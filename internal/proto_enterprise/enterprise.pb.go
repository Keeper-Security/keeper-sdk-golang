// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: enterprise.proto

package proto_enterprise

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyType int32

const (
	KeyType_RSA KeyType = 0
	KeyType_ECC KeyType = 1
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "RSA",
		1: "ECC",
	}
	KeyType_value = map[string]int32{
		"RSA": 0,
		"ECC": 1,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{0}
}

type EnterpriseType int32

const (
	EnterpriseType_ENTERPRISE_STANDARD EnterpriseType = 0
	EnterpriseType_ENTERPRISE_MSP      EnterpriseType = 1
)

// Enum value maps for EnterpriseType.
var (
	EnterpriseType_name = map[int32]string{
		0: "ENTERPRISE_STANDARD",
		1: "ENTERPRISE_MSP",
	}
	EnterpriseType_value = map[string]int32{
		"ENTERPRISE_STANDARD": 0,
		"ENTERPRISE_MSP":      1,
	}
)

func (x EnterpriseType) Enum() *EnterpriseType {
	p := new(EnterpriseType)
	*p = x
	return p
}

func (x EnterpriseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterpriseType) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[1].Descriptor()
}

func (EnterpriseType) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[1]
}

func (x EnterpriseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterpriseType.Descriptor instead.
func (EnterpriseType) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{1}
}

type TransferAcceptanceStatus int32

const (
	TransferAcceptanceStatus_UNDEFINED          TransferAcceptanceStatus = 0
	TransferAcceptanceStatus_NOT_REQUIRED       TransferAcceptanceStatus = 1
	TransferAcceptanceStatus_NOT_ACCEPTED       TransferAcceptanceStatus = 2
	TransferAcceptanceStatus_PARTIALLY_ACCEPTED TransferAcceptanceStatus = 3
	TransferAcceptanceStatus_ACCEPTED           TransferAcceptanceStatus = 4
)

// Enum value maps for TransferAcceptanceStatus.
var (
	TransferAcceptanceStatus_name = map[int32]string{
		0: "UNDEFINED",
		1: "NOT_REQUIRED",
		2: "NOT_ACCEPTED",
		3: "PARTIALLY_ACCEPTED",
		4: "ACCEPTED",
	}
	TransferAcceptanceStatus_value = map[string]int32{
		"UNDEFINED":          0,
		"NOT_REQUIRED":       1,
		"NOT_ACCEPTED":       2,
		"PARTIALLY_ACCEPTED": 3,
		"ACCEPTED":           4,
	}
)

func (x TransferAcceptanceStatus) Enum() *TransferAcceptanceStatus {
	p := new(TransferAcceptanceStatus)
	*p = x
	return p
}

func (x TransferAcceptanceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferAcceptanceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[2].Descriptor()
}

func (TransferAcceptanceStatus) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[2]
}

func (x TransferAcceptanceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferAcceptanceStatus.Descriptor instead.
func (TransferAcceptanceStatus) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{2}
}

type EnterpriseDataEntity int32

const (
	EnterpriseDataEntity_UNKNOWN                               EnterpriseDataEntity = 0
	EnterpriseDataEntity_NODES                                 EnterpriseDataEntity = 1
	EnterpriseDataEntity_ROLES                                 EnterpriseDataEntity = 2
	EnterpriseDataEntity_USERS                                 EnterpriseDataEntity = 3
	EnterpriseDataEntity_TEAMS                                 EnterpriseDataEntity = 4
	EnterpriseDataEntity_TEAM_USERS                            EnterpriseDataEntity = 5
	EnterpriseDataEntity_ROLE_USERS                            EnterpriseDataEntity = 6
	EnterpriseDataEntity_ROLE_PRIVILEGES                       EnterpriseDataEntity = 7
	EnterpriseDataEntity_ROLE_ENFORCEMENTS                     EnterpriseDataEntity = 8
	EnterpriseDataEntity_ROLE_TEAMS                            EnterpriseDataEntity = 9
	EnterpriseDataEntity_LICENSES                              EnterpriseDataEntity = 10
	EnterpriseDataEntity_MANAGED_NODES                         EnterpriseDataEntity = 11
	EnterpriseDataEntity_MANAGED_COMPANIES                     EnterpriseDataEntity = 12
	EnterpriseDataEntity_BRIDGES                               EnterpriseDataEntity = 13
	EnterpriseDataEntity_SCIMS                                 EnterpriseDataEntity = 14
	EnterpriseDataEntity_EMAIL_PROVISION                       EnterpriseDataEntity = 15
	EnterpriseDataEntity_QUEUED_TEAMS                          EnterpriseDataEntity = 16
	EnterpriseDataEntity_QUEUED_TEAM_USERS                     EnterpriseDataEntity = 17
	EnterpriseDataEntity_SSO_SERVICES                          EnterpriseDataEntity = 18
	EnterpriseDataEntity_REPORT_FILTER_USERS                   EnterpriseDataEntity = 19
	EnterpriseDataEntity_DEVICES_REQUEST_FOR_ADMIN_APPROVAL    EnterpriseDataEntity = 20
	EnterpriseDataEntity_USER_ALIASES                          EnterpriseDataEntity = 21
	EnterpriseDataEntity_COMPLIANCE_REPORT_CRITERIA_AND_FILTER EnterpriseDataEntity = 22
	EnterpriseDataEntity_COMPLIANCE_REPORTS                    EnterpriseDataEntity = 23
)

// Enum value maps for EnterpriseDataEntity.
var (
	EnterpriseDataEntity_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "NODES",
		2:  "ROLES",
		3:  "USERS",
		4:  "TEAMS",
		5:  "TEAM_USERS",
		6:  "ROLE_USERS",
		7:  "ROLE_PRIVILEGES",
		8:  "ROLE_ENFORCEMENTS",
		9:  "ROLE_TEAMS",
		10: "LICENSES",
		11: "MANAGED_NODES",
		12: "MANAGED_COMPANIES",
		13: "BRIDGES",
		14: "SCIMS",
		15: "EMAIL_PROVISION",
		16: "QUEUED_TEAMS",
		17: "QUEUED_TEAM_USERS",
		18: "SSO_SERVICES",
		19: "REPORT_FILTER_USERS",
		20: "DEVICES_REQUEST_FOR_ADMIN_APPROVAL",
		21: "USER_ALIASES",
		22: "COMPLIANCE_REPORT_CRITERIA_AND_FILTER",
		23: "COMPLIANCE_REPORTS",
	}
	EnterpriseDataEntity_value = map[string]int32{
		"UNKNOWN":                               0,
		"NODES":                                 1,
		"ROLES":                                 2,
		"USERS":                                 3,
		"TEAMS":                                 4,
		"TEAM_USERS":                            5,
		"ROLE_USERS":                            6,
		"ROLE_PRIVILEGES":                       7,
		"ROLE_ENFORCEMENTS":                     8,
		"ROLE_TEAMS":                            9,
		"LICENSES":                              10,
		"MANAGED_NODES":                         11,
		"MANAGED_COMPANIES":                     12,
		"BRIDGES":                               13,
		"SCIMS":                                 14,
		"EMAIL_PROVISION":                       15,
		"QUEUED_TEAMS":                          16,
		"QUEUED_TEAM_USERS":                     17,
		"SSO_SERVICES":                          18,
		"REPORT_FILTER_USERS":                   19,
		"DEVICES_REQUEST_FOR_ADMIN_APPROVAL":    20,
		"USER_ALIASES":                          21,
		"COMPLIANCE_REPORT_CRITERIA_AND_FILTER": 22,
		"COMPLIANCE_REPORTS":                    23,
	}
)

func (x EnterpriseDataEntity) Enum() *EnterpriseDataEntity {
	p := new(EnterpriseDataEntity)
	*p = x
	return p
}

func (x EnterpriseDataEntity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterpriseDataEntity) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[3].Descriptor()
}

func (EnterpriseDataEntity) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[3]
}

func (x EnterpriseDataEntity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterpriseDataEntity.Descriptor instead.
func (EnterpriseDataEntity) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{3}
}

type CacheStatus int32

const (
	CacheStatus_KEEP  CacheStatus = 0
	CacheStatus_CLEAR CacheStatus = 1
)

// Enum value maps for CacheStatus.
var (
	CacheStatus_name = map[int32]string{
		0: "KEEP",
		1: "CLEAR",
	}
	CacheStatus_value = map[string]int32{
		"KEEP":  0,
		"CLEAR": 1,
	}
)

func (x CacheStatus) Enum() *CacheStatus {
	p := new(CacheStatus)
	*p = x
	return p
}

func (x CacheStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[4].Descriptor()
}

func (CacheStatus) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[4]
}

func (x CacheStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheStatus.Descriptor instead.
func (CacheStatus) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{4}
}

type BackupKeyType int32

const (
	BackupKeyType_NO_KEY                      BackupKeyType = 0
	BackupKeyType_ENCRYPTED_BY_DATA_KEY       BackupKeyType = 1
	BackupKeyType_ENCRYPTED_BY_PUBLIC_KEY     BackupKeyType = 2
	BackupKeyType_ENCRYPTED_BY_DATA_KEY_GCM   BackupKeyType = 3
	BackupKeyType_ENCRYPTED_BY_PUBLIC_KEY_ECC BackupKeyType = 4
)

// Enum value maps for BackupKeyType.
var (
	BackupKeyType_name = map[int32]string{
		0: "NO_KEY",
		1: "ENCRYPTED_BY_DATA_KEY",
		2: "ENCRYPTED_BY_PUBLIC_KEY",
		3: "ENCRYPTED_BY_DATA_KEY_GCM",
		4: "ENCRYPTED_BY_PUBLIC_KEY_ECC",
	}
	BackupKeyType_value = map[string]int32{
		"NO_KEY":                      0,
		"ENCRYPTED_BY_DATA_KEY":       1,
		"ENCRYPTED_BY_PUBLIC_KEY":     2,
		"ENCRYPTED_BY_DATA_KEY_GCM":   3,
		"ENCRYPTED_BY_PUBLIC_KEY_ECC": 4,
	}
)

func (x BackupKeyType) Enum() *BackupKeyType {
	p := new(BackupKeyType)
	*p = x
	return p
}

func (x BackupKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[5].Descriptor()
}

func (BackupKeyType) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[5]
}

func (x BackupKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupKeyType.Descriptor instead.
func (BackupKeyType) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{5}
}

type BackupUserDataKeyType int32

const (
	BackupUserDataKeyType_OWN                  BackupUserDataKeyType = 0
	BackupUserDataKeyType_SHARED_TO_ENTERPRISE BackupUserDataKeyType = 1
)

// Enum value maps for BackupUserDataKeyType.
var (
	BackupUserDataKeyType_name = map[int32]string{
		0: "OWN",
		1: "SHARED_TO_ENTERPRISE",
	}
	BackupUserDataKeyType_value = map[string]int32{
		"OWN":                  0,
		"SHARED_TO_ENTERPRISE": 1,
	}
)

func (x BackupUserDataKeyType) Enum() *BackupUserDataKeyType {
	p := new(BackupUserDataKeyType)
	*p = x
	return p
}

func (x BackupUserDataKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupUserDataKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[6].Descriptor()
}

func (BackupUserDataKeyType) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[6]
}

func (x BackupUserDataKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupUserDataKeyType.Descriptor instead.
func (BackupUserDataKeyType) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{6}
}

type EncryptedKeyType int32

const (
	EncryptedKeyType_KT_NO_KEY                      EncryptedKeyType = 0
	EncryptedKeyType_KT_ENCRYPTED_BY_DATA_KEY       EncryptedKeyType = 1
	EncryptedKeyType_KT_ENCRYPTED_BY_PUBLIC_KEY     EncryptedKeyType = 2
	EncryptedKeyType_KT_ENCRYPTED_BY_DATA_KEY_GCM   EncryptedKeyType = 3
	EncryptedKeyType_KT_ENCRYPTED_BY_PUBLIC_KEY_ECC EncryptedKeyType = 4
)

// Enum value maps for EncryptedKeyType.
var (
	EncryptedKeyType_name = map[int32]string{
		0: "KT_NO_KEY",
		1: "KT_ENCRYPTED_BY_DATA_KEY",
		2: "KT_ENCRYPTED_BY_PUBLIC_KEY",
		3: "KT_ENCRYPTED_BY_DATA_KEY_GCM",
		4: "KT_ENCRYPTED_BY_PUBLIC_KEY_ECC",
	}
	EncryptedKeyType_value = map[string]int32{
		"KT_NO_KEY":                      0,
		"KT_ENCRYPTED_BY_DATA_KEY":       1,
		"KT_ENCRYPTED_BY_PUBLIC_KEY":     2,
		"KT_ENCRYPTED_BY_DATA_KEY_GCM":   3,
		"KT_ENCRYPTED_BY_PUBLIC_KEY_ECC": 4,
	}
)

func (x EncryptedKeyType) Enum() *EncryptedKeyType {
	p := new(EncryptedKeyType)
	*p = x
	return p
}

func (x EncryptedKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptedKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[7].Descriptor()
}

func (EncryptedKeyType) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[7]
}

func (x EncryptedKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptedKeyType.Descriptor instead.
func (EncryptedKeyType) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{7}
}

type EnterpriseFlagType int32

const (
	EnterpriseFlagType_INVALID                EnterpriseFlagType = 0
	EnterpriseFlagType_ALLOW_PERSONAL_LICENSE EnterpriseFlagType = 1
	EnterpriseFlagType_SPECIAL_PROVISIONING   EnterpriseFlagType = 2
	EnterpriseFlagType_RECORD_TYPES           EnterpriseFlagType = 3
	EnterpriseFlagType_SECRETS_MANAGER        EnterpriseFlagType = 4
	EnterpriseFlagType_ENTERPRISE_LOCKED      EnterpriseFlagType = 5
)

// Enum value maps for EnterpriseFlagType.
var (
	EnterpriseFlagType_name = map[int32]string{
		0: "INVALID",
		1: "ALLOW_PERSONAL_LICENSE",
		2: "SPECIAL_PROVISIONING",
		3: "RECORD_TYPES",
		4: "SECRETS_MANAGER",
		5: "ENTERPRISE_LOCKED",
	}
	EnterpriseFlagType_value = map[string]int32{
		"INVALID":                0,
		"ALLOW_PERSONAL_LICENSE": 1,
		"SPECIAL_PROVISIONING":   2,
		"RECORD_TYPES":           3,
		"SECRETS_MANAGER":        4,
		"ENTERPRISE_LOCKED":      5,
	}
)

func (x EnterpriseFlagType) Enum() *EnterpriseFlagType {
	p := new(EnterpriseFlagType)
	*p = x
	return p
}

func (x EnterpriseFlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterpriseFlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[8].Descriptor()
}

func (EnterpriseFlagType) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[8]
}

func (x EnterpriseFlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterpriseFlagType.Descriptor instead.
func (EnterpriseFlagType) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{8}
}

type UserUpdateStatus int32

const (
	UserUpdateStatus_USER_UPDATE_OK            UserUpdateStatus = 0 //  can't use OK because it's already defined in AuditUserStatus
	UserUpdateStatus_USER_UPDATE_ACCESS_DENIED UserUpdateStatus = 1 //  same deal for ACCESS_DENIED
)

// Enum value maps for UserUpdateStatus.
var (
	UserUpdateStatus_name = map[int32]string{
		0: "USER_UPDATE_OK",
		1: "USER_UPDATE_ACCESS_DENIED",
	}
	UserUpdateStatus_value = map[string]int32{
		"USER_UPDATE_OK":            0,
		"USER_UPDATE_ACCESS_DENIED": 1,
	}
)

func (x UserUpdateStatus) Enum() *UserUpdateStatus {
	p := new(UserUpdateStatus)
	*p = x
	return p
}

func (x UserUpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserUpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[9].Descriptor()
}

func (UserUpdateStatus) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[9]
}

func (x UserUpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserUpdateStatus.Descriptor instead.
func (UserUpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{9}
}

type AuditUserStatus int32

const (
	AuditUserStatus_OK                      AuditUserStatus = 0
	AuditUserStatus_ACCESS_DENIED           AuditUserStatus = 1 //on a node with no privilege
	AuditUserStatus_NO_LONGER_IN_ENTERPRISE AuditUserStatus = 2 //because user isn't in enterprise, i.e. deleted
)

// Enum value maps for AuditUserStatus.
var (
	AuditUserStatus_name = map[int32]string{
		0: "OK",
		1: "ACCESS_DENIED",
		2: "NO_LONGER_IN_ENTERPRISE",
	}
	AuditUserStatus_value = map[string]int32{
		"OK":                      0,
		"ACCESS_DENIED":           1,
		"NO_LONGER_IN_ENTERPRISE": 2,
	}
)

func (x AuditUserStatus) Enum() *AuditUserStatus {
	p := new(AuditUserStatus)
	*p = x
	return p
}

func (x AuditUserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditUserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[10].Descriptor()
}

func (AuditUserStatus) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[10]
}

func (x AuditUserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditUserStatus.Descriptor instead.
func (AuditUserStatus) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{10}
}

type TeamUserType int32

const (
	TeamUserType_USER       TeamUserType = 0
	TeamUserType_ADMIN      TeamUserType = 1
	TeamUserType_ADMIN_ONLY TeamUserType = 2
)

// Enum value maps for TeamUserType.
var (
	TeamUserType_name = map[int32]string{
		0: "USER",
		1: "ADMIN",
		2: "ADMIN_ONLY",
	}
	TeamUserType_value = map[string]int32{
		"USER":       0,
		"ADMIN":      1,
		"ADMIN_ONLY": 2,
	}
)

func (x TeamUserType) Enum() *TeamUserType {
	p := new(TeamUserType)
	*p = x
	return p
}

func (x TeamUserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamUserType) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[11].Descriptor()
}

func (TeamUserType) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[11]
}

func (x TeamUserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamUserType.Descriptor instead.
func (TeamUserType) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{11}
}

type AppClientType int32

const (
	AppClientType_NOT_USED                          AppClientType = 0
	AppClientType_GENERAL                           AppClientType = 1
	AppClientType_DISCOVERY_AND_ROTATION_CONTROLLER AppClientType = 2
	AppClientType_KCM_CONTROLLER                    AppClientType = 3
)

// Enum value maps for AppClientType.
var (
	AppClientType_name = map[int32]string{
		0: "NOT_USED",
		1: "GENERAL",
		2: "DISCOVERY_AND_ROTATION_CONTROLLER",
		3: "KCM_CONTROLLER",
	}
	AppClientType_value = map[string]int32{
		"NOT_USED":                          0,
		"GENERAL":                           1,
		"DISCOVERY_AND_ROTATION_CONTROLLER": 2,
		"KCM_CONTROLLER":                    3,
	}
)

func (x AppClientType) Enum() *AppClientType {
	p := new(AppClientType)
	*p = x
	return p
}

func (x AppClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[12].Descriptor()
}

func (AppClientType) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[12]
}

func (x AppClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppClientType.Descriptor instead.
func (AppClientType) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{12}
}

type DeleteEnterpriseUsersResult int32

const (
	DeleteEnterpriseUsersResult_SUCCESS                          DeleteEnterpriseUsersResult = 0
	DeleteEnterpriseUsersResult_NOT_AN_ENTERPRISE_USER           DeleteEnterpriseUsersResult = 1 //the delete user is not an enterprise user
	DeleteEnterpriseUsersResult_CANNOT_DELETE_SELF               DeleteEnterpriseUsersResult = 2 //the delete user is the same as the calling user
	DeleteEnterpriseUsersResult_BRIDGE_CANNOT_DELETE_ACTIVE_USER DeleteEnterpriseUsersResult = 3 //bridge cannot delete active user
	DeleteEnterpriseUsersResult_ERROR                            DeleteEnterpriseUsersResult = 4 //unexpected internal error
)

// Enum value maps for DeleteEnterpriseUsersResult.
var (
	DeleteEnterpriseUsersResult_name = map[int32]string{
		0: "SUCCESS",
		1: "NOT_AN_ENTERPRISE_USER",
		2: "CANNOT_DELETE_SELF",
		3: "BRIDGE_CANNOT_DELETE_ACTIVE_USER",
		4: "ERROR",
	}
	DeleteEnterpriseUsersResult_value = map[string]int32{
		"SUCCESS":                          0,
		"NOT_AN_ENTERPRISE_USER":           1,
		"CANNOT_DELETE_SELF":               2,
		"BRIDGE_CANNOT_DELETE_ACTIVE_USER": 3,
		"ERROR":                            4,
	}
)

func (x DeleteEnterpriseUsersResult) Enum() *DeleteEnterpriseUsersResult {
	p := new(DeleteEnterpriseUsersResult)
	*p = x
	return p
}

func (x DeleteEnterpriseUsersResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteEnterpriseUsersResult) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[13].Descriptor()
}

func (DeleteEnterpriseUsersResult) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[13]
}

func (x DeleteEnterpriseUsersResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteEnterpriseUsersResult.Descriptor instead.
func (DeleteEnterpriseUsersResult) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{13}
}

type ClearSecurityDataType int32

const (
	ClearSecurityDataType_RECALCULATE_SUMMARY_REPORT          ClearSecurityDataType = 0
	ClearSecurityDataType_FORCE_CLIENT_CHECK_FOR_MISSING_DATA ClearSecurityDataType = 1
	ClearSecurityDataType_FORCE_CLIENT_RESEND_SECURITY_DATA   ClearSecurityDataType = 2
)

// Enum value maps for ClearSecurityDataType.
var (
	ClearSecurityDataType_name = map[int32]string{
		0: "RECALCULATE_SUMMARY_REPORT",
		1: "FORCE_CLIENT_CHECK_FOR_MISSING_DATA",
		2: "FORCE_CLIENT_RESEND_SECURITY_DATA",
	}
	ClearSecurityDataType_value = map[string]int32{
		"RECALCULATE_SUMMARY_REPORT":          0,
		"FORCE_CLIENT_CHECK_FOR_MISSING_DATA": 1,
		"FORCE_CLIENT_RESEND_SECURITY_DATA":   2,
	}
)

func (x ClearSecurityDataType) Enum() *ClearSecurityDataType {
	p := new(ClearSecurityDataType)
	*p = x
	return p
}

func (x ClearSecurityDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClearSecurityDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_enterprise_proto_enumTypes[14].Descriptor()
}

func (ClearSecurityDataType) Type() protoreflect.EnumType {
	return &file_enterprise_proto_enumTypes[14]
}

func (x ClearSecurityDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClearSecurityDataType.Descriptor instead.
func (ClearSecurityDataType) EnumDescriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{14}
}

type EnterpriseKeyPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterprisePublicKey           []byte  `protobuf:"bytes,1,opt,name=enterprisePublicKey,proto3" json:"enterprisePublicKey,omitempty"`
	EncryptedEnterprisePrivateKey []byte  `protobuf:"bytes,2,opt,name=encryptedEnterprisePrivateKey,proto3" json:"encryptedEnterprisePrivateKey,omitempty"`
	KeyType                       KeyType `protobuf:"varint,3,opt,name=keyType,proto3,enum=Enterprise.KeyType" json:"keyType,omitempty"`
}

func (x *EnterpriseKeyPairRequest) Reset() {
	*x = EnterpriseKeyPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseKeyPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseKeyPairRequest) ProtoMessage() {}

func (x *EnterpriseKeyPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseKeyPairRequest.ProtoReflect.Descriptor instead.
func (*EnterpriseKeyPairRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{0}
}

func (x *EnterpriseKeyPairRequest) GetEnterprisePublicKey() []byte {
	if x != nil {
		return x.EnterprisePublicKey
	}
	return nil
}

func (x *EnterpriseKeyPairRequest) GetEncryptedEnterprisePrivateKey() []byte {
	if x != nil {
		return x.EncryptedEnterprisePrivateKey
	}
	return nil
}

func (x *EnterpriseKeyPairRequest) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_RSA
}

type GetTeamMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid []byte `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
}

func (x *GetTeamMemberRequest) Reset() {
	*x = GetTeamMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamMemberRequest) ProtoMessage() {}

func (x *GetTeamMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamMemberRequest.ProtoReflect.Descriptor instead.
func (*GetTeamMemberRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{1}
}

func (x *GetTeamMemberRequest) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

type EnterpriseUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId   int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Email              string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	EnterpriseUsername string `protobuf:"bytes,3,opt,name=enterpriseUsername,proto3" json:"enterpriseUsername,omitempty"`
	IsShareAdmin       bool   `protobuf:"varint,4,opt,name=isShareAdmin,proto3" json:"isShareAdmin,omitempty"`
}

func (x *EnterpriseUser) Reset() {
	*x = EnterpriseUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUser) ProtoMessage() {}

func (x *EnterpriseUser) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUser.ProtoReflect.Descriptor instead.
func (*EnterpriseUser) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{2}
}

func (x *EnterpriseUser) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EnterpriseUser) GetEnterpriseUsername() string {
	if x != nil {
		return x.EnterpriseUsername
	}
	return ""
}

func (x *EnterpriseUser) GetIsShareAdmin() bool {
	if x != nil {
		return x.IsShareAdmin
	}
	return false
}

type GetTeamMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUser []*EnterpriseUser `protobuf:"bytes,1,rep,name=enterpriseUser,proto3" json:"enterpriseUser,omitempty"`
}

func (x *GetTeamMemberResponse) Reset() {
	*x = GetTeamMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamMemberResponse) ProtoMessage() {}

func (x *GetTeamMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamMemberResponse.ProtoReflect.Descriptor instead.
func (*GetTeamMemberResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{3}
}

func (x *GetTeamMemberResponse) GetEnterpriseUser() []*EnterpriseUser {
	if x != nil {
		return x.EnterpriseUser
	}
	return nil
}

type EnterpriseUserIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId []int64 `protobuf:"varint,1,rep,packed,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
}

func (x *EnterpriseUserIds) Reset() {
	*x = EnterpriseUserIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUserIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUserIds) ProtoMessage() {}

func (x *EnterpriseUserIds) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUserIds.ProtoReflect.Descriptor instead.
func (*EnterpriseUserIds) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{4}
}

func (x *EnterpriseUserIds) GetEnterpriseUserId() []int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return nil
}

type EnterprisePersonalAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email          string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	OBSOLETE_FIELD []byte `protobuf:"bytes,2,opt,name=OBSOLETE_FIELD,json=OBSOLETEFIELD,proto3" json:"OBSOLETE_FIELD,omitempty"` //DO NOT RE-USE. placeholder for backwards compatability
}

func (x *EnterprisePersonalAccount) Reset() {
	*x = EnterprisePersonalAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterprisePersonalAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterprisePersonalAccount) ProtoMessage() {}

func (x *EnterprisePersonalAccount) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterprisePersonalAccount.ProtoReflect.Descriptor instead.
func (*EnterprisePersonalAccount) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{5}
}

func (x *EnterprisePersonalAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EnterprisePersonalAccount) GetOBSOLETE_FIELD() []byte {
	if x != nil {
		return x.OBSOLETE_FIELD
	}
	return nil
}

type EncryptedTeamKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid          []byte `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	EncryptedTeamKey []byte `protobuf:"bytes,2,opt,name=encryptedTeamKey,proto3" json:"encryptedTeamKey,omitempty"`
	Force            bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"` // if false, existing team key must be null to succeed
}

func (x *EncryptedTeamKeyRequest) Reset() {
	*x = EncryptedTeamKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedTeamKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedTeamKeyRequest) ProtoMessage() {}

func (x *EncryptedTeamKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedTeamKeyRequest.ProtoReflect.Descriptor instead.
func (*EncryptedTeamKeyRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{6}
}

func (x *EncryptedTeamKeyRequest) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *EncryptedTeamKeyRequest) GetEncryptedTeamKey() []byte {
	if x != nil {
		return x.EncryptedTeamKey
	}
	return nil
}

func (x *EncryptedTeamKeyRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ReEncryptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReEncryptedData) Reset() {
	*x = ReEncryptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReEncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReEncryptedData) ProtoMessage() {}

func (x *ReEncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReEncryptedData.ProtoReflect.Descriptor instead.
func (*ReEncryptedData) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{7}
}

func (x *ReEncryptedData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReEncryptedData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ReEncryptedRoleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId           int64  `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	EncryptedRoleKey []byte `protobuf:"bytes,2,opt,name=encryptedRoleKey,proto3" json:"encryptedRoleKey,omitempty"`
}

func (x *ReEncryptedRoleKey) Reset() {
	*x = ReEncryptedRoleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReEncryptedRoleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReEncryptedRoleKey) ProtoMessage() {}

func (x *ReEncryptedRoleKey) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReEncryptedRoleKey.ProtoReflect.Descriptor instead.
func (*ReEncryptedRoleKey) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{8}
}

func (x *ReEncryptedRoleKey) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *ReEncryptedRoleKey) GetEncryptedRoleKey() []byte {
	if x != nil {
		return x.EncryptedRoleKey
	}
	return nil
}

type NodeToManagedCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId int32                      `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId,omitempty"`
	Nodes     []*ReEncryptedData         `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Roles     []*ReEncryptedData         `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	Users     []*ReEncryptedData         `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	RoleKeys  []*ReEncryptedRoleKey      `protobuf:"bytes,5,rep,name=roleKeys,proto3" json:"roleKeys,omitempty"`
	TeamKeys  []*EncryptedTeamKeyRequest `protobuf:"bytes,6,rep,name=teamKeys,proto3" json:"teamKeys,omitempty"`
}

func (x *NodeToManagedCompanyRequest) Reset() {
	*x = NodeToManagedCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeToManagedCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeToManagedCompanyRequest) ProtoMessage() {}

func (x *NodeToManagedCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeToManagedCompanyRequest.ProtoReflect.Descriptor instead.
func (*NodeToManagedCompanyRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{9}
}

func (x *NodeToManagedCompanyRequest) GetCompanyId() int32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *NodeToManagedCompanyRequest) GetNodes() []*ReEncryptedData {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeToManagedCompanyRequest) GetRoles() []*ReEncryptedData {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *NodeToManagedCompanyRequest) GetUsers() []*ReEncryptedData {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *NodeToManagedCompanyRequest) GetRoleKeys() []*ReEncryptedRoleKey {
	if x != nil {
		return x.RoleKeys
	}
	return nil
}

func (x *NodeToManagedCompanyRequest) GetTeamKeys() []*EncryptedTeamKeyRequest {
	if x != nil {
		return x.TeamKeys
	}
	return nil
}

type RoleTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId  int64  `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	TeamUid []byte `protobuf:"bytes,2,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
}

func (x *RoleTeam) Reset() {
	*x = RoleTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleTeam) ProtoMessage() {}

func (x *RoleTeam) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleTeam.ProtoReflect.Descriptor instead.
func (*RoleTeam) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{10}
}

func (x *RoleTeam) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleTeam) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

type RoleTeams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleTeam []*RoleTeam `protobuf:"bytes,1,rep,name=role_team,json=roleTeam,proto3" json:"role_team,omitempty"` // 100 max
}

func (x *RoleTeams) Reset() {
	*x = RoleTeams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleTeams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleTeams) ProtoMessage() {}

func (x *RoleTeams) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleTeams.ProtoReflect.Descriptor instead.
func (*RoleTeams) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{11}
}

func (x *RoleTeams) GetRoleTeam() []*RoleTeam {
	if x != nil {
		return x.RoleTeam
	}
	return nil
}

type EnterpriseRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedTreeKey                   []byte                    `protobuf:"bytes,1,opt,name=encryptedTreeKey,proto3" json:"encryptedTreeKey,omitempty"` // AES 256 key encrypted with admin's data key
	EnterpriseName                     string                    `protobuf:"bytes,2,opt,name=enterpriseName,proto3" json:"enterpriseName,omitempty"`     // plain text name
	RootNodeData                       []byte                    `protobuf:"bytes,3,opt,name=rootNodeData,proto3" json:"rootNodeData,omitempty"`         // encrypted node data
	AdminUserData                      []byte                    `protobuf:"bytes,4,opt,name=adminUserData,proto3" json:"adminUserData,omitempty"`       // encrypted user data
	AdminName                          string                    `protobuf:"bytes,5,opt,name=adminName,proto3" json:"adminName,omitempty"`               // full name of admin
	RoleData                           []byte                    `protobuf:"bytes,6,opt,name=roleData,proto3" json:"roleData,omitempty"`                 // encrypted role data for admin role
	RsaKeyPair                         *EnterpriseKeyPairRequest `protobuf:"bytes,7,opt,name=rsaKeyPair,proto3" json:"rsaKeyPair,omitempty"`             // for sharing to the enterprise
	NumberSeats                        int32                     `protobuf:"varint,8,opt,name=numberSeats,proto3" json:"numberSeats,omitempty"`          // should this be part of the request?
	EnterpriseType                     EnterpriseType            `protobuf:"varint,9,opt,name=enterpriseType,proto3,enum=Enterprise.EnterpriseType" json:"enterpriseType,omitempty"`
	RolePublicKey                      []byte                    `protobuf:"bytes,10,opt,name=rolePublicKey,proto3" json:"rolePublicKey,omitempty"`
	RolePrivateKeyEncryptedWithRoleKey []byte                    `protobuf:"bytes,11,opt,name=rolePrivateKeyEncryptedWithRoleKey,proto3" json:"rolePrivateKeyEncryptedWithRoleKey,omitempty"`
	RoleKeyEncryptedWithTreeKey        []byte                    `protobuf:"bytes,12,opt,name=roleKeyEncryptedWithTreeKey,proto3" json:"roleKeyEncryptedWithTreeKey,omitempty"`
	EccKeyPair                         *EnterpriseKeyPairRequest `protobuf:"bytes,13,opt,name=eccKeyPair,proto3" json:"eccKeyPair,omitempty"`
}

func (x *EnterpriseRegistration) Reset() {
	*x = EnterpriseRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseRegistration) ProtoMessage() {}

func (x *EnterpriseRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseRegistration.ProtoReflect.Descriptor instead.
func (*EnterpriseRegistration) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{12}
}

func (x *EnterpriseRegistration) GetEncryptedTreeKey() []byte {
	if x != nil {
		return x.EncryptedTreeKey
	}
	return nil
}

func (x *EnterpriseRegistration) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

func (x *EnterpriseRegistration) GetRootNodeData() []byte {
	if x != nil {
		return x.RootNodeData
	}
	return nil
}

func (x *EnterpriseRegistration) GetAdminUserData() []byte {
	if x != nil {
		return x.AdminUserData
	}
	return nil
}

func (x *EnterpriseRegistration) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *EnterpriseRegistration) GetRoleData() []byte {
	if x != nil {
		return x.RoleData
	}
	return nil
}

func (x *EnterpriseRegistration) GetRsaKeyPair() *EnterpriseKeyPairRequest {
	if x != nil {
		return x.RsaKeyPair
	}
	return nil
}

func (x *EnterpriseRegistration) GetNumberSeats() int32 {
	if x != nil {
		return x.NumberSeats
	}
	return 0
}

func (x *EnterpriseRegistration) GetEnterpriseType() EnterpriseType {
	if x != nil {
		return x.EnterpriseType
	}
	return EnterpriseType_ENTERPRISE_STANDARD
}

func (x *EnterpriseRegistration) GetRolePublicKey() []byte {
	if x != nil {
		return x.RolePublicKey
	}
	return nil
}

func (x *EnterpriseRegistration) GetRolePrivateKeyEncryptedWithRoleKey() []byte {
	if x != nil {
		return x.RolePrivateKeyEncryptedWithRoleKey
	}
	return nil
}

func (x *EnterpriseRegistration) GetRoleKeyEncryptedWithTreeKey() []byte {
	if x != nil {
		return x.RoleKeyEncryptedWithTreeKey
	}
	return nil
}

func (x *EnterpriseRegistration) GetEccKeyPair() *EnterpriseKeyPairRequest {
	if x != nil {
		return x.EccKeyPair
	}
	return nil
}

type DomainPasswordRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *DomainPasswordRulesRequest) Reset() {
	*x = DomainPasswordRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainPasswordRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainPasswordRulesRequest) ProtoMessage() {}

func (x *DomainPasswordRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainPasswordRulesRequest.ProtoReflect.Descriptor instead.
func (*DomainPasswordRulesRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{13}
}

func (x *DomainPasswordRulesRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DomainPasswordRulesFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Minimum int32  `protobuf:"varint,2,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum int32  `protobuf:"varint,3,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Allowed bool   `protobuf:"varint,4,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *DomainPasswordRulesFields) Reset() {
	*x = DomainPasswordRulesFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainPasswordRulesFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainPasswordRulesFields) ProtoMessage() {}

func (x *DomainPasswordRulesFields) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainPasswordRulesFields.ProtoReflect.Descriptor instead.
func (*DomainPasswordRulesFields) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{14}
}

func (x *DomainPasswordRulesFields) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DomainPasswordRulesFields) GetMinimum() int32 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *DomainPasswordRulesFields) GetMaximum() int32 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *DomainPasswordRulesFields) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

type LoginToMcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McEnterpriseId    int32  `protobuf:"varint,1,opt,name=mcEnterpriseId,proto3" json:"mcEnterpriseId,omitempty"`
	MessageSessionUid []byte `protobuf:"bytes,2,opt,name=messageSessionUid,proto3" json:"messageSessionUid,omitempty"`
}

func (x *LoginToMcRequest) Reset() {
	*x = LoginToMcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginToMcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginToMcRequest) ProtoMessage() {}

func (x *LoginToMcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginToMcRequest.ProtoReflect.Descriptor instead.
func (*LoginToMcRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{15}
}

func (x *LoginToMcRequest) GetMcEnterpriseId() int32 {
	if x != nil {
		return x.McEnterpriseId
	}
	return 0
}

func (x *LoginToMcRequest) GetMessageSessionUid() []byte {
	if x != nil {
		return x.MessageSessionUid
	}
	return nil
}

type LoginToMcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedSessionToken []byte `protobuf:"bytes,1,opt,name=encryptedSessionToken,proto3" json:"encryptedSessionToken,omitempty"`
	EncryptedTreeKey      string `protobuf:"bytes,2,opt,name=encryptedTreeKey,proto3" json:"encryptedTreeKey,omitempty"` // MC's tree key encrypted with MSP's tree key
}

func (x *LoginToMcResponse) Reset() {
	*x = LoginToMcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginToMcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginToMcResponse) ProtoMessage() {}

func (x *LoginToMcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginToMcResponse.ProtoReflect.Descriptor instead.
func (*LoginToMcResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{16}
}

func (x *LoginToMcResponse) GetEncryptedSessionToken() []byte {
	if x != nil {
		return x.EncryptedSessionToken
	}
	return nil
}

func (x *LoginToMcResponse) GetEncryptedTreeKey() string {
	if x != nil {
		return x.EncryptedTreeKey
	}
	return ""
}

type DomainPasswordRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainPasswordRulesFields []*DomainPasswordRulesFields `protobuf:"bytes,1,rep,name=domainPasswordRulesFields,proto3" json:"domainPasswordRulesFields,omitempty"`
}

func (x *DomainPasswordRulesResponse) Reset() {
	*x = DomainPasswordRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainPasswordRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainPasswordRulesResponse) ProtoMessage() {}

func (x *DomainPasswordRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainPasswordRulesResponse.ProtoReflect.Descriptor instead.
func (*DomainPasswordRulesResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{17}
}

func (x *DomainPasswordRulesResponse) GetDomainPasswordRulesFields() []*DomainPasswordRulesFields {
	if x != nil {
		return x.DomainPasswordRulesFields
	}
	return nil
}

type ApproveUserDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId       int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	EncryptedDeviceToken   []byte `protobuf:"bytes,2,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	EncryptedDeviceDataKey []byte `protobuf:"bytes,3,opt,name=encryptedDeviceDataKey,proto3" json:"encryptedDeviceDataKey,omitempty"` // required for cloud sso
	DenyApproval           bool   `protobuf:"varint,4,opt,name=denyApproval,proto3" json:"denyApproval,omitempty"`
}

func (x *ApproveUserDeviceRequest) Reset() {
	*x = ApproveUserDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveUserDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveUserDeviceRequest) ProtoMessage() {}

func (x *ApproveUserDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveUserDeviceRequest.ProtoReflect.Descriptor instead.
func (*ApproveUserDeviceRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{18}
}

func (x *ApproveUserDeviceRequest) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *ApproveUserDeviceRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *ApproveUserDeviceRequest) GetEncryptedDeviceDataKey() []byte {
	if x != nil {
		return x.EncryptedDeviceDataKey
	}
	return nil
}

func (x *ApproveUserDeviceRequest) GetDenyApproval() bool {
	if x != nil {
		return x.DenyApproval
	}
	return false
}

type ApproveUserDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId     int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	EncryptedDeviceToken []byte `protobuf:"bytes,2,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	Failed               bool   `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	Message              string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ApproveUserDeviceResponse) Reset() {
	*x = ApproveUserDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveUserDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveUserDeviceResponse) ProtoMessage() {}

func (x *ApproveUserDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveUserDeviceResponse.ProtoReflect.Descriptor instead.
func (*ApproveUserDeviceResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{19}
}

func (x *ApproveUserDeviceResponse) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *ApproveUserDeviceResponse) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *ApproveUserDeviceResponse) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ApproveUserDeviceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApproveUserDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceRequests []*ApproveUserDeviceRequest `protobuf:"bytes,1,rep,name=deviceRequests,proto3" json:"deviceRequests,omitempty"`
}

func (x *ApproveUserDevicesRequest) Reset() {
	*x = ApproveUserDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveUserDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveUserDevicesRequest) ProtoMessage() {}

func (x *ApproveUserDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveUserDevicesRequest.ProtoReflect.Descriptor instead.
func (*ApproveUserDevicesRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{20}
}

func (x *ApproveUserDevicesRequest) GetDeviceRequests() []*ApproveUserDeviceRequest {
	if x != nil {
		return x.DeviceRequests
	}
	return nil
}

type ApproveUserDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceResponses []*ApproveUserDeviceResponse `protobuf:"bytes,1,rep,name=deviceResponses,proto3" json:"deviceResponses,omitempty"`
}

func (x *ApproveUserDevicesResponse) Reset() {
	*x = ApproveUserDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveUserDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveUserDevicesResponse) ProtoMessage() {}

func (x *ApproveUserDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveUserDevicesResponse.ProtoReflect.Descriptor instead.
func (*ApproveUserDevicesResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{21}
}

func (x *ApproveUserDevicesResponse) GetDeviceResponses() []*ApproveUserDeviceResponse {
	if x != nil {
		return x.DeviceResponses
	}
	return nil
}

type EnterpriseUserDataKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId     int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	UserEncryptedDataKey []byte `protobuf:"bytes,2,opt,name=userEncryptedDataKey,proto3" json:"userEncryptedDataKey,omitempty"`
	KeyTypeId            int32  `protobuf:"varint,3,opt,name=keyTypeId,proto3" json:"keyTypeId,omitempty"`
	RoleKey              []byte `protobuf:"bytes,4,opt,name=roleKey,proto3" json:"roleKey,omitempty"`       // Used for migration
	PrivateKey           []byte `protobuf:"bytes,5,opt,name=privateKey,proto3" json:"privateKey,omitempty"` // Used for migration
}

func (x *EnterpriseUserDataKey) Reset() {
	*x = EnterpriseUserDataKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUserDataKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUserDataKey) ProtoMessage() {}

func (x *EnterpriseUserDataKey) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUserDataKey.ProtoReflect.Descriptor instead.
func (*EnterpriseUserDataKey) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{22}
}

func (x *EnterpriseUserDataKey) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUserDataKey) GetUserEncryptedDataKey() []byte {
	if x != nil {
		return x.UserEncryptedDataKey
	}
	return nil
}

func (x *EnterpriseUserDataKey) GetKeyTypeId() int32 {
	if x != nil {
		return x.KeyTypeId
	}
	return 0
}

func (x *EnterpriseUserDataKey) GetRoleKey() []byte {
	if x != nil {
		return x.RoleKey
	}
	return nil
}

func (x *EnterpriseUserDataKey) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type EnterpriseUserDataKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*EnterpriseUserDataKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *EnterpriseUserDataKeys) Reset() {
	*x = EnterpriseUserDataKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUserDataKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUserDataKeys) ProtoMessage() {}

func (x *EnterpriseUserDataKeys) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUserDataKeys.ProtoReflect.Descriptor instead.
func (*EnterpriseUserDataKeys) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{23}
}

func (x *EnterpriseUserDataKeys) GetKeys() []*EnterpriseUserDataKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type EnterpriseDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinuationToken []byte `protobuf:"bytes,1,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *EnterpriseDataRequest) Reset() {
	*x = EnterpriseDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseDataRequest) ProtoMessage() {}

func (x *EnterpriseDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseDataRequest.ProtoReflect.Descriptor instead.
func (*EnterpriseDataRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{24}
}

func (x *EnterpriseDataRequest) GetContinuationToken() []byte {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type SpecialProvisioning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SpecialProvisioning) Reset() {
	*x = SpecialProvisioning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialProvisioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialProvisioning) ProtoMessage() {}

func (x *SpecialProvisioning) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialProvisioning.ProtoReflect.Descriptor instead.
func (*SpecialProvisioning) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{25}
}

func (x *SpecialProvisioning) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SpecialProvisioning) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GeneralDataEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseName      string               `protobuf:"bytes,1,opt,name=enterpriseName,proto3" json:"enterpriseName,omitempty"`
	RestrictVisibility  bool                 `protobuf:"varint,2,opt,name=restrictVisibility,proto3" json:"restrictVisibility,omitempty"`
	SpecialProvisioning *SpecialProvisioning `protobuf:"bytes,4,opt,name=specialProvisioning,proto3" json:"specialProvisioning,omitempty"`
	UserPrivilege       *UserPrivilege       `protobuf:"bytes,7,opt,name=userPrivilege,proto3" json:"userPrivilege,omitempty"`
	Distributor         bool                 `protobuf:"varint,8,opt,name=distributor,proto3" json:"distributor,omitempty"`
}

func (x *GeneralDataEntity) Reset() {
	*x = GeneralDataEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralDataEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralDataEntity) ProtoMessage() {}

func (x *GeneralDataEntity) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralDataEntity.ProtoReflect.Descriptor instead.
func (*GeneralDataEntity) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{26}
}

func (x *GeneralDataEntity) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

func (x *GeneralDataEntity) GetRestrictVisibility() bool {
	if x != nil {
		return x.RestrictVisibility
	}
	return false
}

func (x *GeneralDataEntity) GetSpecialProvisioning() *SpecialProvisioning {
	if x != nil {
		return x.SpecialProvisioning
	}
	return nil
}

func (x *GeneralDataEntity) GetUserPrivilege() *UserPrivilege {
	if x != nil {
		return x.UserPrivilege
	}
	return nil
}

func (x *GeneralDataEntity) GetDistributor() bool {
	if x != nil {
		return x.Distributor
	}
	return false
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId        int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	ParentId      int64  `protobuf:"varint,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	BridgeId      int64  `protobuf:"varint,3,opt,name=bridgeId,proto3" json:"bridgeId,omitempty"`
	ScimId        int64  `protobuf:"varint,4,opt,name=scimId,proto3" json:"scimId,omitempty"`
	LicenseId     int64  `protobuf:"varint,5,opt,name=licenseId,proto3" json:"licenseId,omitempty"`
	EncryptedData string `protobuf:"bytes,6,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	DuoEnabled    bool   `protobuf:"varint,7,opt,name=duoEnabled,proto3" json:"duoEnabled,omitempty"`
	RsaEnabled    bool   `protobuf:"varint,8,opt,name=rsaEnabled,proto3" json:"rsaEnabled,omitempty"`
	// Deprecated: Marked as deprecated in enterprise.proto.
	SsoServiceProviderId  int64   `protobuf:"varint,9,opt,name=ssoServiceProviderId,proto3" json:"ssoServiceProviderId,omitempty"`
	RestrictVisibility    bool    `protobuf:"varint,10,opt,name=restrictVisibility,proto3" json:"restrictVisibility,omitempty"`
	SsoServiceProviderIds []int64 `protobuf:"varint,11,rep,packed,name=ssoServiceProviderIds,proto3" json:"ssoServiceProviderIds,omitempty"` // Nov 2021 - Nodes can now have more than one sso ServiceProviderId.
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{27}
}

func (x *Node) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Node) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Node) GetBridgeId() int64 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

func (x *Node) GetScimId() int64 {
	if x != nil {
		return x.ScimId
	}
	return 0
}

func (x *Node) GetLicenseId() int64 {
	if x != nil {
		return x.LicenseId
	}
	return 0
}

func (x *Node) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

func (x *Node) GetDuoEnabled() bool {
	if x != nil {
		return x.DuoEnabled
	}
	return false
}

func (x *Node) GetRsaEnabled() bool {
	if x != nil {
		return x.RsaEnabled
	}
	return false
}

// Deprecated: Marked as deprecated in enterprise.proto.
func (x *Node) GetSsoServiceProviderId() int64 {
	if x != nil {
		return x.SsoServiceProviderId
	}
	return 0
}

func (x *Node) GetRestrictVisibility() bool {
	if x != nil {
		return x.RestrictVisibility
	}
	return false
}

func (x *Node) GetSsoServiceProviderIds() []int64 {
	if x != nil {
		return x.SsoServiceProviderIds
	}
	return nil
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId         int64  `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
	NodeId         int64  `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	EncryptedData  string `protobuf:"bytes,3,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	KeyType        string `protobuf:"bytes,4,opt,name=keyType,proto3" json:"keyType,omitempty"`
	VisibleBelow   bool   `protobuf:"varint,5,opt,name=visibleBelow,proto3" json:"visibleBelow,omitempty"`
	NewUserInherit bool   `protobuf:"varint,6,opt,name=newUserInherit,proto3" json:"newUserInherit,omitempty"`
	RoleType       string `protobuf:"bytes,7,opt,name=roleType,proto3" json:"roleType,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{28}
}

func (x *Role) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *Role) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Role) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

func (x *Role) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *Role) GetVisibleBelow() bool {
	if x != nil {
		return x.VisibleBelow
	}
	return false
}

func (x *Role) GetNewUserInherit() bool {
	if x != nil {
		return x.NewUserInherit
	}
	return false
}

func (x *Role) GetRoleType() string {
	if x != nil {
		return x.RoleType
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId         int64                    `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	NodeId                   int64                    `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	EncryptedData            string                   `protobuf:"bytes,3,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	KeyType                  string                   `protobuf:"bytes,4,opt,name=keyType,proto3" json:"keyType,omitempty"`
	Username                 string                   `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Status                   string                   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Lock                     int32                    `protobuf:"varint,7,opt,name=lock,proto3" json:"lock,omitempty"`
	UserId                   int32                    `protobuf:"varint,8,opt,name=userId,proto3" json:"userId,omitempty"`
	AccountShareExpiration   int64                    `protobuf:"varint,9,opt,name=accountShareExpiration,proto3" json:"accountShareExpiration,omitempty"`
	FullName                 string                   `protobuf:"bytes,10,opt,name=fullName,proto3" json:"fullName,omitempty"`
	JobTitle                 string                   `protobuf:"bytes,11,opt,name=jobTitle,proto3" json:"jobTitle,omitempty"`
	TfaEnabled               bool                     `protobuf:"varint,12,opt,name=tfaEnabled,proto3" json:"tfaEnabled,omitempty"`
	TransferAcceptanceStatus TransferAcceptanceStatus `protobuf:"varint,13,opt,name=transferAcceptanceStatus,proto3,enum=Enterprise.TransferAcceptanceStatus" json:"transferAcceptanceStatus,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{29}
}

func (x *User) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *User) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *User) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

func (x *User) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *User) GetLock() int32 {
	if x != nil {
		return x.Lock
	}
	return 0
}

func (x *User) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetAccountShareExpiration() int64 {
	if x != nil {
		return x.AccountShareExpiration
	}
	return 0
}

func (x *User) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *User) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *User) GetTfaEnabled() bool {
	if x != nil {
		return x.TfaEnabled
	}
	return false
}

func (x *User) GetTransferAcceptanceStatus() TransferAcceptanceStatus {
	if x != nil {
		return x.TransferAcceptanceStatus
	}
	return TransferAcceptanceStatus_UNDEFINED
}

type UserAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Username         string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UserAlias) Reset() {
	*x = UserAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAlias) ProtoMessage() {}

func (x *UserAlias) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAlias.ProtoReflect.Descriptor instead.
func (*UserAlias) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{30}
}

func (x *UserAlias) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *UserAlias) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type ComplianceReportMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportUid       []byte `protobuf:"bytes,1,opt,name=reportUid,proto3" json:"reportUid,omitempty"`
	NodeId          int64  `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"` //  node where the report was generated
	ReportName      string `protobuf:"bytes,3,opt,name=reportName,proto3" json:"reportName,omitempty"`
	DateGenerated   int64  `protobuf:"varint,4,opt,name=dateGenerated,proto3" json:"dateGenerated,omitempty"`
	RunByName       string `protobuf:"bytes,5,opt,name=runByName,proto3" json:"runByName,omitempty"`              //  user who generated the report
	NumberOfOwners  int32  `protobuf:"varint,7,opt,name=numberOfOwners,proto3" json:"numberOfOwners,omitempty"`   //  number of record owners included in the report
	NumberOfRecords int32  `protobuf:"varint,8,opt,name=numberOfRecords,proto3" json:"numberOfRecords,omitempty"` //  number of records included in the report
}

func (x *ComplianceReportMetaData) Reset() {
	*x = ComplianceReportMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceReportMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceReportMetaData) ProtoMessage() {}

func (x *ComplianceReportMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceReportMetaData.ProtoReflect.Descriptor instead.
func (*ComplianceReportMetaData) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{31}
}

func (x *ComplianceReportMetaData) GetReportUid() []byte {
	if x != nil {
		return x.ReportUid
	}
	return nil
}

func (x *ComplianceReportMetaData) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ComplianceReportMetaData) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *ComplianceReportMetaData) GetDateGenerated() int64 {
	if x != nil {
		return x.DateGenerated
	}
	return 0
}

func (x *ComplianceReportMetaData) GetRunByName() string {
	if x != nil {
		return x.RunByName
	}
	return ""
}

func (x *ComplianceReportMetaData) GetNumberOfOwners() int32 {
	if x != nil {
		return x.NumberOfOwners
	}
	return 0
}

func (x *ComplianceReportMetaData) GetNumberOfRecords() int32 {
	if x != nil {
		return x.NumberOfRecords
	}
	return 0
}

type ManagedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId                int64 `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
	ManagedNodeId         int64 `protobuf:"varint,2,opt,name=managedNodeId,proto3" json:"managedNodeId,omitempty"`
	CascadeNodeManagement bool  `protobuf:"varint,3,opt,name=cascadeNodeManagement,proto3" json:"cascadeNodeManagement,omitempty"`
}

func (x *ManagedNode) Reset() {
	*x = ManagedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedNode) ProtoMessage() {}

func (x *ManagedNode) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedNode.ProtoReflect.Descriptor instead.
func (*ManagedNode) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{32}
}

func (x *ManagedNode) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *ManagedNode) GetManagedNodeId() int64 {
	if x != nil {
		return x.ManagedNodeId
	}
	return 0
}

func (x *ManagedNode) GetCascadeNodeManagement() bool {
	if x != nil {
		return x.CascadeNodeManagement
	}
	return false
}

type UserManagedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                int64    `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	CascadeNodeManagement bool     `protobuf:"varint,2,opt,name=cascadeNodeManagement,proto3" json:"cascadeNodeManagement,omitempty"`
	Privileges            []string `protobuf:"bytes,3,rep,name=privileges,proto3" json:"privileges,omitempty"`
}

func (x *UserManagedNode) Reset() {
	*x = UserManagedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserManagedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserManagedNode) ProtoMessage() {}

func (x *UserManagedNode) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserManagedNode.ProtoReflect.Descriptor instead.
func (*UserManagedNode) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{33}
}

func (x *UserManagedNode) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *UserManagedNode) GetCascadeNodeManagement() bool {
	if x != nil {
		return x.CascadeNodeManagement
	}
	return false
}

func (x *UserManagedNode) GetPrivileges() []string {
	if x != nil {
		return x.Privileges
	}
	return nil
}

type UserPrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserManagedNodes []*UserManagedNode `protobuf:"bytes,1,rep,name=userManagedNodes,proto3" json:"userManagedNodes,omitempty"`
	EnterpriseUserId int64              `protobuf:"varint,2,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	EncryptedData    string             `protobuf:"bytes,3,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
}

func (x *UserPrivilege) Reset() {
	*x = UserPrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPrivilege) ProtoMessage() {}

func (x *UserPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPrivilege.ProtoReflect.Descriptor instead.
func (*UserPrivilege) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{34}
}

func (x *UserPrivilege) GetUserManagedNodes() []*UserManagedNode {
	if x != nil {
		return x.UserManagedNodes
	}
	return nil
}

func (x *UserPrivilege) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *UserPrivilege) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

type RoleUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId           int64 `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
	EnterpriseUserId int64 `protobuf:"varint,2,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
}

func (x *RoleUser) Reset() {
	*x = RoleUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleUser) ProtoMessage() {}

func (x *RoleUser) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleUser.ProtoReflect.Descriptor instead.
func (*RoleUser) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{35}
}

func (x *RoleUser) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleUser) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

// possible values for privilegeType
// UNKNOWN = 0
// MANAGE_USER = 1
// MANAGE_NODES = 2
// MANAGE_LICENCES = 3
// MANAGE_ROLES = 4
// MANAGE_TEAMS = 5
// TRANSFER_ACCOUNT = 6
// RUN_REPORTS = 7
// VIEW_TREE = 8
// MANAGE_BRIDGE = 9
// MANAGE_COMPANIES = 10
// ALLOCATE_POOL_LICENSES = 11
// APPROVE_DEVICE = 13
type RolePrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedNodeId int64  `protobuf:"varint,1,opt,name=managedNodeId,proto3" json:"managedNodeId,omitempty"`
	RoleId        int64  `protobuf:"varint,2,opt,name=roleId,proto3" json:"roleId,omitempty"`
	PrivilegeType string `protobuf:"bytes,3,opt,name=privilegeType,proto3" json:"privilegeType,omitempty"`
}

func (x *RolePrivilege) Reset() {
	*x = RolePrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePrivilege) ProtoMessage() {}

func (x *RolePrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePrivilege.ProtoReflect.Descriptor instead.
func (*RolePrivilege) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{36}
}

func (x *RolePrivilege) GetManagedNodeId() int64 {
	if x != nil {
		return x.ManagedNodeId
	}
	return 0
}

func (x *RolePrivilege) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RolePrivilege) GetPrivilegeType() string {
	if x != nil {
		return x.PrivilegeType
	}
	return ""
}

type RoleEnforcement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId          int64  `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
	EnforcementType string `protobuf:"bytes,2,opt,name=enforcementType,proto3" json:"enforcementType,omitempty"`
	Value           string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RoleEnforcement) Reset() {
	*x = RoleEnforcement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleEnforcement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleEnforcement) ProtoMessage() {}

func (x *RoleEnforcement) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleEnforcement.ProtoReflect.Descriptor instead.
func (*RoleEnforcement) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{37}
}

func (x *RoleEnforcement) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleEnforcement) GetEnforcementType() string {
	if x != nil {
		return x.EnforcementType
	}
	return ""
}

func (x *RoleEnforcement) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid          []byte `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NodeId           int64  `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	RestrictEdit     bool   `protobuf:"varint,4,opt,name=restrictEdit,proto3" json:"restrictEdit,omitempty"`
	RestrictShare    bool   `protobuf:"varint,5,opt,name=restrictShare,proto3" json:"restrictShare,omitempty"`
	RestrictView     bool   `protobuf:"varint,6,opt,name=restrictView,proto3" json:"restrictView,omitempty"`
	EncryptedData    string `protobuf:"bytes,7,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	EncryptedTeamKey string `protobuf:"bytes,8,opt,name=encryptedTeamKey,proto3" json:"encryptedTeamKey,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{38}
}

func (x *Team) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Team) GetRestrictEdit() bool {
	if x != nil {
		return x.RestrictEdit
	}
	return false
}

func (x *Team) GetRestrictShare() bool {
	if x != nil {
		return x.RestrictShare
	}
	return false
}

func (x *Team) GetRestrictView() bool {
	if x != nil {
		return x.RestrictView
	}
	return false
}

func (x *Team) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

func (x *Team) GetEncryptedTeamKey() string {
	if x != nil {
		return x.EncryptedTeamKey
	}
	return ""
}

// possible value for userType
// USER = 0;
// ADMIN = 1;
// ADMIN_HIDE_SHARED_FOLDERS = 2;
type TeamUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid          []byte `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	EnterpriseUserId int64  `protobuf:"varint,2,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	UserType         string `protobuf:"bytes,3,opt,name=userType,proto3" json:"userType,omitempty"`
}

func (x *TeamUser) Reset() {
	*x = TeamUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamUser) ProtoMessage() {}

func (x *TeamUser) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamUser.ProtoReflect.Descriptor instead.
func (*TeamUser) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{39}
}

func (x *TeamUser) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *TeamUser) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *TeamUser) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

type GetDistributorInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distributors []*Distributor `protobuf:"bytes,1,rep,name=distributors,proto3" json:"distributors,omitempty"`
}

func (x *GetDistributorInfoResponse) Reset() {
	*x = GetDistributorInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDistributorInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDistributorInfoResponse) ProtoMessage() {}

func (x *GetDistributorInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDistributorInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDistributorInfoResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{40}
}

func (x *GetDistributorInfoResponse) GetDistributors() []*Distributor {
	if x != nil {
		return x.Distributors
	}
	return nil
}

type Distributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MspInfos []*MspInfo `protobuf:"bytes,2,rep,name=mspInfos,proto3" json:"mspInfos,omitempty"`
}

func (x *Distributor) Reset() {
	*x = Distributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distributor) ProtoMessage() {}

func (x *Distributor) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distributor.ProtoReflect.Descriptor instead.
func (*Distributor) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{41}
}

func (x *Distributor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Distributor) GetMspInfos() []*MspInfo {
	if x != nil {
		return x.MspInfos
	}
	return nil
}

type MspInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseId           int32             `protobuf:"varint,1,opt,name=enterpriseId,proto3" json:"enterpriseId,omitempty"`
	EnterpriseName         string            `protobuf:"bytes,2,opt,name=enterpriseName,proto3" json:"enterpriseName,omitempty"`
	AllocatedLicenses      int32             `protobuf:"varint,3,opt,name=allocatedLicenses,proto3" json:"allocatedLicenses,omitempty"` // MAX_INT is infinity
	AllowedMcProducts      []string          `protobuf:"bytes,4,rep,name=allowedMcProducts,proto3" json:"allowedMcProducts,omitempty"`  // codes of allowed MC Products
	AllowedAddOns          []string          `protobuf:"bytes,5,rep,name=allowedAddOns,proto3" json:"allowedAddOns,omitempty"`
	MaxFilePlanType        string            `protobuf:"bytes,6,opt,name=maxFilePlanType,proto3" json:"maxFilePlanType,omitempty"`
	ManagedCompanies       []*ManagedCompany `protobuf:"bytes,7,rep,name=managedCompanies,proto3" json:"managedCompanies,omitempty"`
	AllowUnlimitedLicenses bool              `protobuf:"varint,8,opt,name=allowUnlimitedLicenses,proto3" json:"allowUnlimitedLicenses,omitempty"` //Allows MSP allocate Infinity as number of licenses to its MCs.
	AddOns                 []*LicenseAddOn   `protobuf:"bytes,9,rep,name=addOns,proto3" json:"addOns,omitempty"`
}

func (x *MspInfo) Reset() {
	*x = MspInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MspInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MspInfo) ProtoMessage() {}

func (x *MspInfo) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MspInfo.ProtoReflect.Descriptor instead.
func (*MspInfo) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{42}
}

func (x *MspInfo) GetEnterpriseId() int32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *MspInfo) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

func (x *MspInfo) GetAllocatedLicenses() int32 {
	if x != nil {
		return x.AllocatedLicenses
	}
	return 0
}

func (x *MspInfo) GetAllowedMcProducts() []string {
	if x != nil {
		return x.AllowedMcProducts
	}
	return nil
}

func (x *MspInfo) GetAllowedAddOns() []string {
	if x != nil {
		return x.AllowedAddOns
	}
	return nil
}

func (x *MspInfo) GetMaxFilePlanType() string {
	if x != nil {
		return x.MaxFilePlanType
	}
	return ""
}

func (x *MspInfo) GetManagedCompanies() []*ManagedCompany {
	if x != nil {
		return x.ManagedCompanies
	}
	return nil
}

func (x *MspInfo) GetAllowUnlimitedLicenses() bool {
	if x != nil {
		return x.AllowUnlimitedLicenses
	}
	return false
}

func (x *MspInfo) GetAddOns() []*LicenseAddOn {
	if x != nil {
		return x.AddOns
	}
	return nil
}

type ManagedCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McEnterpriseId   int32           `protobuf:"varint,1,opt,name=mcEnterpriseId,proto3" json:"mcEnterpriseId,omitempty"`
	McEnterpriseName string          `protobuf:"bytes,2,opt,name=mcEnterpriseName,proto3" json:"mcEnterpriseName,omitempty"`
	MspNodeId        int64           `protobuf:"varint,3,opt,name=mspNodeId,proto3" json:"mspNodeId,omitempty"`
	NumberOfSeats    int32           `protobuf:"varint,4,opt,name=numberOfSeats,proto3" json:"numberOfSeats,omitempty"`
	NumberOfUsers    int32           `protobuf:"varint,5,opt,name=numberOfUsers,proto3" json:"numberOfUsers,omitempty"`
	ProductId        string          `protobuf:"bytes,6,opt,name=productId,proto3" json:"productId,omitempty"`
	IsExpired        bool            `protobuf:"varint,7,opt,name=isExpired,proto3" json:"isExpired,omitempty"` // this is also the indication of whether or not it is expired as it gets expired when it is paused.
	TreeKey          string          `protobuf:"bytes,8,opt,name=treeKey,proto3" json:"treeKey,omitempty"`
	TreeKeyRole      int64           `protobuf:"varint,9,opt,name=tree_key_role,json=treeKeyRole,proto3" json:"tree_key_role,omitempty"`
	FilePlanType     string          `protobuf:"bytes,10,opt,name=filePlanType,proto3" json:"filePlanType,omitempty"`
	AddOns           []*LicenseAddOn `protobuf:"bytes,11,rep,name=addOns,proto3" json:"addOns,omitempty"`
}

func (x *ManagedCompany) Reset() {
	*x = ManagedCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedCompany) ProtoMessage() {}

func (x *ManagedCompany) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedCompany.ProtoReflect.Descriptor instead.
func (*ManagedCompany) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{43}
}

func (x *ManagedCompany) GetMcEnterpriseId() int32 {
	if x != nil {
		return x.McEnterpriseId
	}
	return 0
}

func (x *ManagedCompany) GetMcEnterpriseName() string {
	if x != nil {
		return x.McEnterpriseName
	}
	return ""
}

func (x *ManagedCompany) GetMspNodeId() int64 {
	if x != nil {
		return x.MspNodeId
	}
	return 0
}

func (x *ManagedCompany) GetNumberOfSeats() int32 {
	if x != nil {
		return x.NumberOfSeats
	}
	return 0
}

func (x *ManagedCompany) GetNumberOfUsers() int32 {
	if x != nil {
		return x.NumberOfUsers
	}
	return 0
}

func (x *ManagedCompany) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ManagedCompany) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *ManagedCompany) GetTreeKey() string {
	if x != nil {
		return x.TreeKey
	}
	return ""
}

func (x *ManagedCompany) GetTreeKeyRole() int64 {
	if x != nil {
		return x.TreeKeyRole
	}
	return 0
}

func (x *ManagedCompany) GetFilePlanType() string {
	if x != nil {
		return x.FilePlanType
	}
	return ""
}

func (x *ManagedCompany) GetAddOns() []*LicenseAddOn {
	if x != nil {
		return x.AddOns
	}
	return nil
}

type MSPPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId      string `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
	Seats          int32  `protobuf:"varint,2,opt,name=seats,proto3" json:"seats,omitempty"`
	AvailableSeats int32  `protobuf:"varint,3,opt,name=availableSeats,proto3" json:"availableSeats,omitempty"`
	Stash          int32  `protobuf:"varint,4,opt,name=stash,proto3" json:"stash,omitempty"`
}

func (x *MSPPool) Reset() {
	*x = MSPPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSPPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSPPool) ProtoMessage() {}

func (x *MSPPool) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSPPool.ProtoReflect.Descriptor instead.
func (*MSPPool) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{44}
}

func (x *MSPPool) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MSPPool) GetSeats() int32 {
	if x != nil {
		return x.Seats
	}
	return 0
}

func (x *MSPPool) GetAvailableSeats() int32 {
	if x != nil {
		return x.AvailableSeats
	}
	return 0
}

func (x *MSPPool) GetStash() int32 {
	if x != nil {
		return x.Stash
	}
	return 0
}

type MSPContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseId   int32  `protobuf:"varint,1,opt,name=enterpriseId,proto3" json:"enterpriseId,omitempty"`
	EnterpriseName string `protobuf:"bytes,2,opt,name=enterpriseName,proto3" json:"enterpriseName,omitempty"`
}

func (x *MSPContact) Reset() {
	*x = MSPContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSPContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSPContact) ProtoMessage() {}

func (x *MSPContact) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSPContact.ProtoReflect.Descriptor instead.
func (*MSPContact) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{45}
}

func (x *MSPContact) GetEnterpriseId() int32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *MSPContact) GetEnterpriseName() string {
	if x != nil {
		return x.EnterpriseName
	}
	return ""
}

type LicenseAddOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled           bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	IsTrial           bool   `protobuf:"varint,3,opt,name=isTrial,proto3" json:"isTrial,omitempty"`
	Expiration        int64  `protobuf:"varint,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Created           int64  `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	Seats             int32  `protobuf:"varint,6,opt,name=seats,proto3" json:"seats,omitempty"`
	ActivationTime    int64  `protobuf:"varint,7,opt,name=activationTime,proto3" json:"activationTime,omitempty"`
	IncludedInProduct bool   `protobuf:"varint,8,opt,name=includedInProduct,proto3" json:"includedInProduct,omitempty"`
	ApiCallCount      int32  `protobuf:"varint,9,opt,name=apiCallCount,proto3" json:"apiCallCount,omitempty"`
}

func (x *LicenseAddOn) Reset() {
	*x = LicenseAddOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseAddOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseAddOn) ProtoMessage() {}

func (x *LicenseAddOn) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseAddOn.ProtoReflect.Descriptor instead.
func (*LicenseAddOn) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{46}
}

func (x *LicenseAddOn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LicenseAddOn) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *LicenseAddOn) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *LicenseAddOn) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *LicenseAddOn) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *LicenseAddOn) GetSeats() int32 {
	if x != nil {
		return x.Seats
	}
	return 0
}

func (x *LicenseAddOn) GetActivationTime() int64 {
	if x != nil {
		return x.ActivationTime
	}
	return 0
}

func (x *LicenseAddOn) GetIncludedInProduct() bool {
	if x != nil {
		return x.IncludedInProduct
	}
	return false
}

func (x *LicenseAddOn) GetApiCallCount() int32 {
	if x != nil {
		return x.ApiCallCount
	}
	return 0
}

type MCDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McProduct        string   `protobuf:"bytes,1,opt,name=mcProduct,proto3" json:"mcProduct,omitempty"`
	AddOns           []string `protobuf:"bytes,2,rep,name=addOns,proto3" json:"addOns,omitempty"`
	FilePlanType     string   `protobuf:"bytes,3,opt,name=filePlanType,proto3" json:"filePlanType,omitempty"`
	MaxLicenses      int32    `protobuf:"varint,4,opt,name=maxLicenses,proto3" json:"maxLicenses,omitempty"`
	FixedMaxLicenses bool     `protobuf:"varint,5,opt,name=fixedMaxLicenses,proto3" json:"fixedMaxLicenses,omitempty"`
}

func (x *MCDefault) Reset() {
	*x = MCDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCDefault) ProtoMessage() {}

func (x *MCDefault) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCDefault.ProtoReflect.Descriptor instead.
func (*MCDefault) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{47}
}

func (x *MCDefault) GetMcProduct() string {
	if x != nil {
		return x.McProduct
	}
	return ""
}

func (x *MCDefault) GetAddOns() []string {
	if x != nil {
		return x.AddOns
	}
	return nil
}

func (x *MCDefault) GetFilePlanType() string {
	if x != nil {
		return x.FilePlanType
	}
	return ""
}

func (x *MCDefault) GetMaxLicenses() int32 {
	if x != nil {
		return x.MaxLicenses
	}
	return 0
}

func (x *MCDefault) GetFixedMaxLicenses() bool {
	if x != nil {
		return x.FixedMaxLicenses
	}
	return false
}

// permits granted by a distributor to its MSP to pass to MC
type MSPPermits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Restricted             bool         `protobuf:"varint,1,opt,name=restricted,proto3" json:"restricted,omitempty"`                 // if false then no need to check the rest
	MaxAllowedLicenses     int32        `protobuf:"varint,2,opt,name=maxAllowedLicenses,proto3" json:"maxAllowedLicenses,omitempty"` // obsolete in favor of allowUnlimitedLicenses
	AllowedMcProducts      []string     `protobuf:"bytes,3,rep,name=allowedMcProducts,proto3" json:"allowedMcProducts,omitempty"`
	AllowedAddOns          []string     `protobuf:"bytes,4,rep,name=allowedAddOns,proto3" json:"allowedAddOns,omitempty"`
	MaxFilePlanType        string       `protobuf:"bytes,5,opt,name=maxFilePlanType,proto3" json:"maxFilePlanType,omitempty"`
	AllowUnlimitedLicenses bool         `protobuf:"varint,6,opt,name=allowUnlimitedLicenses,proto3" json:"allowUnlimitedLicenses,omitempty"`
	McDefaults             []*MCDefault `protobuf:"bytes,7,rep,name=mcDefaults,proto3" json:"mcDefaults,omitempty"`
}

func (x *MSPPermits) Reset() {
	*x = MSPPermits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSPPermits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSPPermits) ProtoMessage() {}

func (x *MSPPermits) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSPPermits.ProtoReflect.Descriptor instead.
func (*MSPPermits) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{48}
}

func (x *MSPPermits) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *MSPPermits) GetMaxAllowedLicenses() int32 {
	if x != nil {
		return x.MaxAllowedLicenses
	}
	return 0
}

func (x *MSPPermits) GetAllowedMcProducts() []string {
	if x != nil {
		return x.AllowedMcProducts
	}
	return nil
}

func (x *MSPPermits) GetAllowedAddOns() []string {
	if x != nil {
		return x.AllowedAddOns
	}
	return nil
}

func (x *MSPPermits) GetMaxFilePlanType() string {
	if x != nil {
		return x.MaxFilePlanType
	}
	return ""
}

func (x *MSPPermits) GetAllowUnlimitedLicenses() bool {
	if x != nil {
		return x.AllowUnlimitedLicenses
	}
	return false
}

func (x *MSPPermits) GetMcDefaults() []*MCDefault {
	if x != nil {
		return x.McDefaults
	}
	return nil
}

type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paid                bool            `protobuf:"varint,1,opt,name=paid,proto3" json:"paid,omitempty"`
	NumberOfSeats       int32           `protobuf:"varint,2,opt,name=numberOfSeats,proto3" json:"numberOfSeats,omitempty"`
	Expiration          int64           `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	LicenseKeyId        int32           `protobuf:"varint,4,opt,name=licenseKeyId,proto3" json:"licenseKeyId,omitempty"`
	ProductTypeId       int32           `protobuf:"varint,5,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	Name                string          `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	EnterpriseLicenseId int64           `protobuf:"varint,7,opt,name=enterpriseLicenseId,proto3" json:"enterpriseLicenseId,omitempty"`
	SeatsAllocated      int32           `protobuf:"varint,8,opt,name=seatsAllocated,proto3" json:"seatsAllocated,omitempty"`
	SeatsPending        int32           `protobuf:"varint,9,opt,name=seatsPending,proto3" json:"seatsPending,omitempty"`
	Tier                int32           `protobuf:"varint,10,opt,name=tier,proto3" json:"tier,omitempty"`
	FilePlanTypeId      int32           `protobuf:"varint,11,opt,name=filePlanTypeId,proto3" json:"filePlanTypeId,omitempty"`
	MaxBytes            int64           `protobuf:"varint,12,opt,name=maxBytes,proto3" json:"maxBytes,omitempty"`
	StorageExpiration   int64           `protobuf:"varint,13,opt,name=storageExpiration,proto3" json:"storageExpiration,omitempty"`
	LicenseStatus       string          `protobuf:"bytes,14,opt,name=licenseStatus,proto3" json:"licenseStatus,omitempty"`
	MspPool             []*MSPPool      `protobuf:"bytes,15,rep,name=mspPool,proto3" json:"mspPool,omitempty"`
	ManagedBy           *MSPContact     `protobuf:"bytes,16,opt,name=managedBy,proto3" json:"managedBy,omitempty"`
	AddOns              []*LicenseAddOn `protobuf:"bytes,17,rep,name=addOns,proto3" json:"addOns,omitempty"`
	NextBillingDate     int64           `protobuf:"varint,18,opt,name=nextBillingDate,proto3" json:"nextBillingDate,omitempty"`
	HasMSPLegacyLog     bool            `protobuf:"varint,19,opt,name=hasMSPLegacyLog,proto3" json:"hasMSPLegacyLog,omitempty"`
	MspPermits          *MSPPermits     `protobuf:"bytes,20,opt,name=mspPermits,proto3" json:"mspPermits,omitempty"`
	Distributor         bool            `protobuf:"varint,21,opt,name=distributor,proto3" json:"distributor,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{49}
}

func (x *License) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *License) GetNumberOfSeats() int32 {
	if x != nil {
		return x.NumberOfSeats
	}
	return 0
}

func (x *License) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *License) GetLicenseKeyId() int32 {
	if x != nil {
		return x.LicenseKeyId
	}
	return 0
}

func (x *License) GetProductTypeId() int32 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *License) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *License) GetEnterpriseLicenseId() int64 {
	if x != nil {
		return x.EnterpriseLicenseId
	}
	return 0
}

func (x *License) GetSeatsAllocated() int32 {
	if x != nil {
		return x.SeatsAllocated
	}
	return 0
}

func (x *License) GetSeatsPending() int32 {
	if x != nil {
		return x.SeatsPending
	}
	return 0
}

func (x *License) GetTier() int32 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *License) GetFilePlanTypeId() int32 {
	if x != nil {
		return x.FilePlanTypeId
	}
	return 0
}

func (x *License) GetMaxBytes() int64 {
	if x != nil {
		return x.MaxBytes
	}
	return 0
}

func (x *License) GetStorageExpiration() int64 {
	if x != nil {
		return x.StorageExpiration
	}
	return 0
}

func (x *License) GetLicenseStatus() string {
	if x != nil {
		return x.LicenseStatus
	}
	return ""
}

func (x *License) GetMspPool() []*MSPPool {
	if x != nil {
		return x.MspPool
	}
	return nil
}

func (x *License) GetManagedBy() *MSPContact {
	if x != nil {
		return x.ManagedBy
	}
	return nil
}

func (x *License) GetAddOns() []*LicenseAddOn {
	if x != nil {
		return x.AddOns
	}
	return nil
}

func (x *License) GetNextBillingDate() int64 {
	if x != nil {
		return x.NextBillingDate
	}
	return 0
}

func (x *License) GetHasMSPLegacyLog() bool {
	if x != nil {
		return x.HasMSPLegacyLog
	}
	return false
}

func (x *License) GetMspPermits() *MSPPermits {
	if x != nil {
		return x.MspPermits
	}
	return nil
}

func (x *License) GetDistributor() bool {
	if x != nil {
		return x.Distributor
	}
	return false
}

type Bridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeId         int64  `protobuf:"varint,1,opt,name=bridgeId,proto3" json:"bridgeId,omitempty"`
	NodeId           int64  `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	WanIpEnforcement string `protobuf:"bytes,3,opt,name=wanIpEnforcement,proto3" json:"wanIpEnforcement,omitempty"`
	LanIpEnforcement string `protobuf:"bytes,4,opt,name=lanIpEnforcement,proto3" json:"lanIpEnforcement,omitempty"`
	Status           string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Bridge) Reset() {
	*x = Bridge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge) ProtoMessage() {}

func (x *Bridge) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bridge.ProtoReflect.Descriptor instead.
func (*Bridge) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{50}
}

func (x *Bridge) GetBridgeId() int64 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

func (x *Bridge) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Bridge) GetWanIpEnforcement() string {
	if x != nil {
		return x.WanIpEnforcement
	}
	return ""
}

func (x *Bridge) GetLanIpEnforcement() string {
	if x != nil {
		return x.LanIpEnforcement
	}
	return ""
}

func (x *Bridge) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Scim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScimId       int64  `protobuf:"varint,1,opt,name=scimId,proto3" json:"scimId,omitempty"`
	NodeId       int64  `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Status       string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	LastSynced   int64  `protobuf:"varint,4,opt,name=lastSynced,proto3" json:"lastSynced,omitempty"`
	RolePrefix   string `protobuf:"bytes,5,opt,name=rolePrefix,proto3" json:"rolePrefix,omitempty"`
	UniqueGroups bool   `protobuf:"varint,6,opt,name=uniqueGroups,proto3" json:"uniqueGroups,omitempty"`
}

func (x *Scim) Reset() {
	*x = Scim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scim) ProtoMessage() {}

func (x *Scim) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scim.ProtoReflect.Descriptor instead.
func (*Scim) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{51}
}

func (x *Scim) GetScimId() int64 {
	if x != nil {
		return x.ScimId
	}
	return 0
}

func (x *Scim) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Scim) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Scim) GetLastSynced() int64 {
	if x != nil {
		return x.LastSynced
	}
	return 0
}

func (x *Scim) GetRolePrefix() string {
	if x != nil {
		return x.RolePrefix
	}
	return ""
}

func (x *Scim) GetUniqueGroups() bool {
	if x != nil {
		return x.UniqueGroups
	}
	return false
}

type EmailProvision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId int64  `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *EmailProvision) Reset() {
	*x = EmailProvision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailProvision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailProvision) ProtoMessage() {}

func (x *EmailProvision) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailProvision.ProtoReflect.Descriptor instead.
func (*EmailProvision) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{52}
}

func (x *EmailProvision) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmailProvision) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *EmailProvision) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *EmailProvision) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type QueuedTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid       []byte `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NodeId        int64  `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	EncryptedData string `protobuf:"bytes,4,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
}

func (x *QueuedTeam) Reset() {
	*x = QueuedTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedTeam) ProtoMessage() {}

func (x *QueuedTeam) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedTeam.ProtoReflect.Descriptor instead.
func (*QueuedTeam) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{53}
}

func (x *QueuedTeam) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *QueuedTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueuedTeam) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *QueuedTeam) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

type QueuedTeamUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid []byte  `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Users   []int64 `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"`
}

func (x *QueuedTeamUser) Reset() {
	*x = QueuedTeamUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedTeamUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedTeamUser) ProtoMessage() {}

func (x *QueuedTeamUser) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedTeamUser.ProtoReflect.Descriptor instead.
func (*QueuedTeamUser) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{54}
}

func (x *QueuedTeamUser) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *QueuedTeamUser) GetUsers() []int64 {
	if x != nil {
		return x.Users
	}
	return nil
}

// *
// This is not used in an API yet.
// It can be used in a new teams_add API if we do one.
// It is currently used internally when creating teams.
//
// The command is successful if at least one of the teams was added successfully.
// The top-level errorMessage field is used only when the top-level result is "error".
type TeamsAddResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessfulTeamAdd   []*TeamAddResult `protobuf:"bytes,1,rep,name=successfulTeamAdd,proto3" json:"successfulTeamAdd,omitempty"`
	UnsuccessfulTeamAdd []*TeamAddResult `protobuf:"bytes,2,rep,name=unsuccessfulTeamAdd,proto3" json:"unsuccessfulTeamAdd,omitempty"`
	Result              string           `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`             // "success" or "fail"
	ErrorMessage        string           `protobuf:"bytes,4,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"` // only used if result == "fail"
}

func (x *TeamsAddResult) Reset() {
	*x = TeamsAddResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsAddResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsAddResult) ProtoMessage() {}

func (x *TeamsAddResult) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsAddResult.ProtoReflect.Descriptor instead.
func (*TeamsAddResult) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{55}
}

func (x *TeamsAddResult) GetSuccessfulTeamAdd() []*TeamAddResult {
	if x != nil {
		return x.SuccessfulTeamAdd
	}
	return nil
}

func (x *TeamsAddResult) GetUnsuccessfulTeamAdd() []*TeamAddResult {
	if x != nil {
		return x.UnsuccessfulTeamAdd
	}
	return nil
}

func (x *TeamsAddResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *TeamsAddResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type TeamAddResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team         *Team  `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`                 // team info.  May not be completely filled out
	Result       string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`             // "success" or "fail"
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"` // only used if result == "fail"
}

func (x *TeamAddResult) Reset() {
	*x = TeamAddResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamAddResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamAddResult) ProtoMessage() {}

func (x *TeamAddResult) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamAddResult.ProtoReflect.Descriptor instead.
func (*TeamAddResult) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{56}
}

func (x *TeamAddResult) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *TeamAddResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *TeamAddResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type SsoService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsoServiceProviderId int64  `protobuf:"varint,1,opt,name=ssoServiceProviderId,proto3" json:"ssoServiceProviderId,omitempty"`
	NodeId               int64  `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Name                 string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SpUrl                string `protobuf:"bytes,4,opt,name=sp_url,json=spUrl,proto3" json:"sp_url,omitempty"`
	InviteNewUsers       bool   `protobuf:"varint,5,opt,name=inviteNewUsers,proto3" json:"inviteNewUsers,omitempty"`
	Active               bool   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	IsCloud              bool   `protobuf:"varint,7,opt,name=isCloud,proto3" json:"isCloud,omitempty"`
}

func (x *SsoService) Reset() {
	*x = SsoService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsoService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsoService) ProtoMessage() {}

func (x *SsoService) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsoService.ProtoReflect.Descriptor instead.
func (*SsoService) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{57}
}

func (x *SsoService) GetSsoServiceProviderId() int64 {
	if x != nil {
		return x.SsoServiceProviderId
	}
	return 0
}

func (x *SsoService) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SsoService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SsoService) GetSpUrl() string {
	if x != nil {
		return x.SpUrl
	}
	return ""
}

func (x *SsoService) GetInviteNewUsers() bool {
	if x != nil {
		return x.InviteNewUsers
	}
	return false
}

func (x *SsoService) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *SsoService) GetIsCloud() bool {
	if x != nil {
		return x.IsCloud
	}
	return false
}

type ReportFilterUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Email  string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ReportFilterUser) Reset() {
	*x = ReportFilterUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFilterUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFilterUser) ProtoMessage() {}

func (x *ReportFilterUser) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFilterUser.ProtoReflect.Descriptor instead.
func (*ReportFilterUser) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{58}
}

func (x *ReportFilterUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReportFilterUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type DeviceRequestForAdminApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId             int64  `protobuf:"varint,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	EnterpriseUserId     int64  `protobuf:"varint,2,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	EncryptedDeviceToken []byte `protobuf:"bytes,3,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	DevicePublicKey      []byte `protobuf:"bytes,4,opt,name=devicePublicKey,proto3" json:"devicePublicKey,omitempty"`
	DeviceName           string `protobuf:"bytes,5,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ClientVersion        string `protobuf:"bytes,6,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	DeviceType           string `protobuf:"bytes,7,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Date                 int64  `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	IpAddress            string `protobuf:"bytes,9,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Location             string `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	Email                string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	AccountUid           []byte `protobuf:"bytes,12,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
}

func (x *DeviceRequestForAdminApproval) Reset() {
	*x = DeviceRequestForAdminApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRequestForAdminApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRequestForAdminApproval) ProtoMessage() {}

func (x *DeviceRequestForAdminApproval) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRequestForAdminApproval.ProtoReflect.Descriptor instead.
func (*DeviceRequestForAdminApproval) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{59}
}

func (x *DeviceRequestForAdminApproval) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceRequestForAdminApproval) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *DeviceRequestForAdminApproval) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *DeviceRequestForAdminApproval) GetDevicePublicKey() []byte {
	if x != nil {
		return x.DevicePublicKey
	}
	return nil
}

func (x *DeviceRequestForAdminApproval) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceRequestForAdminApproval) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceRequestForAdminApproval) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceRequestForAdminApproval) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *DeviceRequestForAdminApproval) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DeviceRequestForAdminApproval) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *DeviceRequestForAdminApproval) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DeviceRequestForAdminApproval) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

type EnterpriseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity EnterpriseDataEntity `protobuf:"varint,1,opt,name=entity,proto3,enum=Enterprise.EnterpriseDataEntity" json:"entity,omitempty"`
	Delete bool                 `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
	Data   [][]byte             `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"` // If delete==false then it's list of entity objects (Node, Users etc...). If delete==true then those objects have only ids but no other info.
}

func (x *EnterpriseData) Reset() {
	*x = EnterpriseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseData) ProtoMessage() {}

func (x *EnterpriseData) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseData.ProtoReflect.Descriptor instead.
func (*EnterpriseData) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{60}
}

func (x *EnterpriseData) GetEntity() EnterpriseDataEntity {
	if x != nil {
		return x.Entity
	}
	return EnterpriseDataEntity_UNKNOWN
}

func (x *EnterpriseData) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *EnterpriseData) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type EnterpriseDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinuationToken []byte             `protobuf:"bytes,1,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	HasMore           bool               `protobuf:"varint,2,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	CacheStatus       CacheStatus        `protobuf:"varint,3,opt,name=cacheStatus,proto3,enum=Enterprise.CacheStatus" json:"cacheStatus,omitempty"`
	Data              []*EnterpriseData  `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	GeneralData       *GeneralDataEntity `protobuf:"bytes,5,opt,name=generalData,proto3" json:"generalData,omitempty"`
}

func (x *EnterpriseDataResponse) Reset() {
	*x = EnterpriseDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseDataResponse) ProtoMessage() {}

func (x *EnterpriseDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseDataResponse.ProtoReflect.Descriptor instead.
func (*EnterpriseDataResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{61}
}

func (x *EnterpriseDataResponse) GetContinuationToken() []byte {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *EnterpriseDataResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *EnterpriseDataResponse) GetCacheStatus() CacheStatus {
	if x != nil {
		return x.CacheStatus
	}
	return CacheStatus_KEEP
}

func (x *EnterpriseDataResponse) GetData() []*EnterpriseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EnterpriseDataResponse) GetGeneralData() *GeneralDataEntity {
	if x != nil {
		return x.GeneralData
	}
	return nil
}

type BackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinuationToken []byte `protobuf:"bytes,1,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *BackupRequest) Reset() {
	*x = BackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRequest) ProtoMessage() {}

func (x *BackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRequest.ProtoReflect.Descriptor instead.
func (*BackupRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{62}
}

func (x *BackupRequest) GetContinuationToken() []byte {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type BackupRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32         `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	RecordUid []byte        `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Key       []byte        `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	KeyType   BackupKeyType `protobuf:"varint,4,opt,name=keyType,proto3,enum=Enterprise.BackupKeyType" json:"keyType,omitempty"`
	Version   int32         `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Data      []byte        `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Extra     []byte        `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *BackupRecord) Reset() {
	*x = BackupRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRecord) ProtoMessage() {}

func (x *BackupRecord) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRecord.ProtoReflect.Descriptor instead.
func (*BackupRecord) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{63}
}

func (x *BackupRecord) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BackupRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *BackupRecord) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *BackupRecord) GetKeyType() BackupKeyType {
	if x != nil {
		return x.KeyType
	}
	return BackupKeyType_NO_KEY
}

func (x *BackupRecord) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BackupRecord) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BackupRecord) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BackupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	BackupKey []byte `protobuf:"bytes,2,opt,name=backupKey,proto3" json:"backupKey,omitempty"`
}

func (x *BackupKey) Reset() {
	*x = BackupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupKey) ProtoMessage() {}

func (x *BackupKey) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupKey.ProtoReflect.Descriptor instead.
func (*BackupKey) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{64}
}

func (x *BackupKey) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BackupKey) GetBackupKey() []byte {
	if x != nil {
		return x.BackupKey
	}
	return nil
}

type BackupUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int32                 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName     string                `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	DataKey      []byte                `protobuf:"bytes,3,opt,name=dataKey,proto3" json:"dataKey,omitempty"`
	DataKeyType  BackupUserDataKeyType `protobuf:"varint,4,opt,name=dataKeyType,proto3,enum=Enterprise.BackupUserDataKeyType" json:"dataKeyType,omitempty"`
	PrivateKey   []byte                `protobuf:"bytes,5,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	TreeKey      []byte                `protobuf:"bytes,6,opt,name=treeKey,proto3" json:"treeKey,omitempty"`
	TreeKeyType  BackupKeyType         `protobuf:"varint,7,opt,name=treeKeyType,proto3,enum=Enterprise.BackupKeyType" json:"treeKeyType,omitempty"`
	BackupKeys   []*BackupKey          `protobuf:"bytes,8,rep,name=backupKeys,proto3" json:"backupKeys,omitempty"`
	PrivateECKey []byte                `protobuf:"bytes,9,opt,name=privateECKey,proto3" json:"privateECKey,omitempty"`
}

func (x *BackupUser) Reset() {
	*x = BackupUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupUser) ProtoMessage() {}

func (x *BackupUser) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupUser.ProtoReflect.Descriptor instead.
func (*BackupUser) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{65}
}

func (x *BackupUser) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BackupUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *BackupUser) GetDataKey() []byte {
	if x != nil {
		return x.DataKey
	}
	return nil
}

func (x *BackupUser) GetDataKeyType() BackupUserDataKeyType {
	if x != nil {
		return x.DataKeyType
	}
	return BackupUserDataKeyType_OWN
}

func (x *BackupUser) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *BackupUser) GetTreeKey() []byte {
	if x != nil {
		return x.TreeKey
	}
	return nil
}

func (x *BackupUser) GetTreeKeyType() BackupKeyType {
	if x != nil {
		return x.TreeKeyType
	}
	return BackupKeyType_NO_KEY
}

func (x *BackupUser) GetBackupKeys() []*BackupKey {
	if x != nil {
		return x.BackupKeys
	}
	return nil
}

func (x *BackupUser) GetPrivateECKey() []byte {
	if x != nil {
		return x.PrivateECKey
	}
	return nil
}

type BackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseEccPrivateKey []byte          `protobuf:"bytes,1,opt,name=enterpriseEccPrivateKey,proto3" json:"enterpriseEccPrivateKey,omitempty"`
	Users                   []*BackupUser   `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Records                 []*BackupRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	ContinuationToken       []byte          `protobuf:"bytes,4,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
}

func (x *BackupResponse) Reset() {
	*x = BackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupResponse) ProtoMessage() {}

func (x *BackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupResponse.ProtoReflect.Descriptor instead.
func (*BackupResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{66}
}

func (x *BackupResponse) GetEnterpriseEccPrivateKey() []byte {
	if x != nil {
		return x.EnterpriseEccPrivateKey
	}
	return nil
}

func (x *BackupResponse) GetUsers() []*BackupUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *BackupResponse) GetRecords() []*BackupRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *BackupResponse) GetContinuationToken() []byte {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

type BackupFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	BackupUid   []byte `protobuf:"bytes,2,opt,name=backupUid,proto3" json:"backupUid,omitempty"`
	FileName    string `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Created     int64  `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
	DownloadUrl string `protobuf:"bytes,5,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"`
}

func (x *BackupFile) Reset() {
	*x = BackupFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupFile) ProtoMessage() {}

func (x *BackupFile) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupFile.ProtoReflect.Descriptor instead.
func (*BackupFile) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{67}
}

func (x *BackupFile) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *BackupFile) GetBackupUid() []byte {
	if x != nil {
		return x.BackupUid
	}
	return nil
}

func (x *BackupFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *BackupFile) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *BackupFile) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

type BackupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*BackupFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *BackupsResponse) Reset() {
	*x = BackupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupsResponse) ProtoMessage() {}

func (x *BackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupsResponse.ProtoReflect.Descriptor instead.
func (*BackupsResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{68}
}

func (x *BackupsResponse) GetFiles() []*BackupFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type GetEnterpriseDataKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId []int64 `protobuf:"varint,1,rep,packed,name=roleId,proto3" json:"roleId,omitempty"`
}

func (x *GetEnterpriseDataKeysRequest) Reset() {
	*x = GetEnterpriseDataKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnterpriseDataKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnterpriseDataKeysRequest) ProtoMessage() {}

func (x *GetEnterpriseDataKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnterpriseDataKeysRequest.ProtoReflect.Descriptor instead.
func (*GetEnterpriseDataKeysRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{69}
}

func (x *GetEnterpriseDataKeysRequest) GetRoleId() []int64 {
	if x != nil {
		return x.RoleId
	}
	return nil
}

type GetEnterpriseDataKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReEncryptedRoleKey []*ReEncryptedRoleKey `protobuf:"bytes,1,rep,name=reEncryptedRoleKey,proto3" json:"reEncryptedRoleKey,omitempty"`
	RoleKey            []*RoleKey            `protobuf:"bytes,2,rep,name=roleKey,proto3" json:"roleKey,omitempty"`
	MspKey             *MspKey               `protobuf:"bytes,3,opt,name=mspKey,proto3" json:"mspKey,omitempty"`
	EnterpriseKeys     *EnterpriseKeys       `protobuf:"bytes,4,opt,name=enterpriseKeys,proto3" json:"enterpriseKeys,omitempty"`
	TreeKey            *TreeKey              `protobuf:"bytes,5,opt,name=treeKey,proto3" json:"treeKey,omitempty"`
}

func (x *GetEnterpriseDataKeysResponse) Reset() {
	*x = GetEnterpriseDataKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnterpriseDataKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnterpriseDataKeysResponse) ProtoMessage() {}

func (x *GetEnterpriseDataKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnterpriseDataKeysResponse.ProtoReflect.Descriptor instead.
func (*GetEnterpriseDataKeysResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{70}
}

func (x *GetEnterpriseDataKeysResponse) GetReEncryptedRoleKey() []*ReEncryptedRoleKey {
	if x != nil {
		return x.ReEncryptedRoleKey
	}
	return nil
}

func (x *GetEnterpriseDataKeysResponse) GetRoleKey() []*RoleKey {
	if x != nil {
		return x.RoleKey
	}
	return nil
}

func (x *GetEnterpriseDataKeysResponse) GetMspKey() *MspKey {
	if x != nil {
		return x.MspKey
	}
	return nil
}

func (x *GetEnterpriseDataKeysResponse) GetEnterpriseKeys() *EnterpriseKeys {
	if x != nil {
		return x.EnterpriseKeys
	}
	return nil
}

func (x *GetEnterpriseDataKeysResponse) GetTreeKey() *TreeKey {
	if x != nil {
		return x.TreeKey
	}
	return nil
}

type RoleKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId       int64            `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
	EncryptedKey string           `protobuf:"bytes,2,opt,name=encryptedKey,proto3" json:"encryptedKey,omitempty"`
	KeyType      EncryptedKeyType `protobuf:"varint,3,opt,name=keyType,proto3,enum=Enterprise.EncryptedKeyType" json:"keyType,omitempty"`
}

func (x *RoleKey) Reset() {
	*x = RoleKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleKey) ProtoMessage() {}

func (x *RoleKey) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleKey.ProtoReflect.Descriptor instead.
func (*RoleKey) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{71}
}

func (x *RoleKey) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleKey) GetEncryptedKey() string {
	if x != nil {
		return x.EncryptedKey
	}
	return ""
}

func (x *RoleKey) GetKeyType() EncryptedKeyType {
	if x != nil {
		return x.KeyType
	}
	return EncryptedKeyType_KT_NO_KEY
}

type MspKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedMspTreeKey     string           `protobuf:"bytes,1,opt,name=encryptedMspTreeKey,proto3" json:"encryptedMspTreeKey,omitempty"`
	EncryptedMspTreeKeyType EncryptedKeyType `protobuf:"varint,2,opt,name=encryptedMspTreeKeyType,proto3,enum=Enterprise.EncryptedKeyType" json:"encryptedMspTreeKeyType,omitempty"`
}

func (x *MspKey) Reset() {
	*x = MspKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MspKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MspKey) ProtoMessage() {}

func (x *MspKey) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MspKey.ProtoReflect.Descriptor instead.
func (*MspKey) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{72}
}

func (x *MspKey) GetEncryptedMspTreeKey() string {
	if x != nil {
		return x.EncryptedMspTreeKey
	}
	return ""
}

func (x *MspKey) GetEncryptedMspTreeKeyType() EncryptedKeyType {
	if x != nil {
		return x.EncryptedMspTreeKeyType
	}
	return EncryptedKeyType_KT_NO_KEY
}

type EnterpriseKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsaPublicKey           []byte `protobuf:"bytes,1,opt,name=rsaPublicKey,proto3" json:"rsaPublicKey,omitempty"`
	RsaEncryptedPrivateKey []byte `protobuf:"bytes,2,opt,name=rsaEncryptedPrivateKey,proto3" json:"rsaEncryptedPrivateKey,omitempty"`
	EccPublicKey           []byte `protobuf:"bytes,3,opt,name=eccPublicKey,proto3" json:"eccPublicKey,omitempty"`
	EccEncryptedPrivateKey []byte `protobuf:"bytes,4,opt,name=eccEncryptedPrivateKey,proto3" json:"eccEncryptedPrivateKey,omitempty"`
}

func (x *EnterpriseKeys) Reset() {
	*x = EnterpriseKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseKeys) ProtoMessage() {}

func (x *EnterpriseKeys) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseKeys.ProtoReflect.Descriptor instead.
func (*EnterpriseKeys) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{73}
}

func (x *EnterpriseKeys) GetRsaPublicKey() []byte {
	if x != nil {
		return x.RsaPublicKey
	}
	return nil
}

func (x *EnterpriseKeys) GetRsaEncryptedPrivateKey() []byte {
	if x != nil {
		return x.RsaEncryptedPrivateKey
	}
	return nil
}

func (x *EnterpriseKeys) GetEccPublicKey() []byte {
	if x != nil {
		return x.EccPublicKey
	}
	return nil
}

func (x *EnterpriseKeys) GetEccEncryptedPrivateKey() []byte {
	if x != nil {
		return x.EccEncryptedPrivateKey
	}
	return nil
}

type TreeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeKey   string        `protobuf:"bytes,1,opt,name=treeKey,proto3" json:"treeKey,omitempty"`
	KeyTypeId BackupKeyType `protobuf:"varint,2,opt,name=keyTypeId,proto3,enum=Enterprise.BackupKeyType" json:"keyTypeId,omitempty"`
}

func (x *TreeKey) Reset() {
	*x = TreeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeKey) ProtoMessage() {}

func (x *TreeKey) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeKey.ProtoReflect.Descriptor instead.
func (*TreeKey) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{74}
}

func (x *TreeKey) GetTreeKey() string {
	if x != nil {
		return x.TreeKey
	}
	return ""
}

func (x *TreeKey) GetKeyTypeId() BackupKeyType {
	if x != nil {
		return x.KeyTypeId
	}
	return BackupKeyType_NO_KEY
}

type SharedRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*SharedRecordEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *SharedRecordResponse) Reset() {
	*x = SharedRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedRecordResponse) ProtoMessage() {}

func (x *SharedRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedRecordResponse.ProtoReflect.Descriptor instead.
func (*SharedRecordResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{75}
}

func (x *SharedRecordResponse) GetEvents() []*SharedRecordEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type SharedRecordEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid  []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	CanEdit    bool   `protobuf:"varint,3,opt,name=canEdit,proto3" json:"canEdit,omitempty"`
	CanReshare bool   `protobuf:"varint,4,opt,name=canReshare,proto3" json:"canReshare,omitempty"`
	ShareFrom  int32  `protobuf:"varint,5,opt,name=shareFrom,proto3" json:"shareFrom,omitempty"` //1 is direct share, 2 share folder, 3 share team folder
}

func (x *SharedRecordEvent) Reset() {
	*x = SharedRecordEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedRecordEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedRecordEvent) ProtoMessage() {}

func (x *SharedRecordEvent) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedRecordEvent.ProtoReflect.Descriptor instead.
func (*SharedRecordEvent) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{76}
}

func (x *SharedRecordEvent) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *SharedRecordEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SharedRecordEvent) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *SharedRecordEvent) GetCanReshare() bool {
	if x != nil {
		return x.CanReshare
	}
	return false
}

func (x *SharedRecordEvent) GetShareFrom() int32 {
	if x != nil {
		return x.ShareFrom
	}
	return 0
}

type SetRestrictVisibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *SetRestrictVisibilityRequest) Reset() {
	*x = SetRestrictVisibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRestrictVisibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRestrictVisibilityRequest) ProtoMessage() {}

func (x *SetRestrictVisibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRestrictVisibilityRequest.ProtoReflect.Descriptor instead.
func (*SetRestrictVisibilityRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{77}
}

func (x *SetRestrictVisibilityRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// Note that this guy's not currently used!  We will probably make
// enterprise_user_add take multiple users like enterprise_user_update.
type UserAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId    int64            `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	NodeId              int64            `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	EncryptedData       []byte           `protobuf:"bytes,3,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"` //Data encrypted with the tree key, i.e. { display_name="first name middle last name"}
	KeyType             EncryptedKeyType `protobuf:"varint,4,opt,name=keyType,proto3,enum=Enterprise.EncryptedKeyType" json:"keyType,omitempty"`
	FullName            string           `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName,omitempty"`                        //The user full name, i.e. {John Doe}
	JobTitle            string           `protobuf:"bytes,6,opt,name=jobTitle,proto3" json:"jobTitle,omitempty"`                        //The job tile, i.e. {Chief Financial Officer}
	Email               string           `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`                              //The email address of new the enterprise user
	SuppressEmailInvite bool             `protobuf:"varint,8,opt,name=suppressEmailInvite,proto3" json:"suppressEmailInvite,omitempty"` //Optional field, if true, server will not send the user an invite email, but instead will return the verification code in the response
}

func (x *UserAddRequest) Reset() {
	*x = UserAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAddRequest) ProtoMessage() {}

func (x *UserAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAddRequest.ProtoReflect.Descriptor instead.
func (*UserAddRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{78}
}

func (x *UserAddRequest) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *UserAddRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *UserAddRequest) GetEncryptedData() []byte {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *UserAddRequest) GetKeyType() EncryptedKeyType {
	if x != nil {
		return x.KeyType
	}
	return EncryptedKeyType_KT_NO_KEY
}

func (x *UserAddRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserAddRequest) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *UserAddRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserAddRequest) GetSuppressEmailInvite() bool {
	if x != nil {
		return x.SuppressEmailInvite
	}
	return false
}

type UserUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserUpdate `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserUpdateRequest) Reset() {
	*x = UserUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdateRequest) ProtoMessage() {}

func (x *UserUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdateRequest.ProtoReflect.Descriptor instead.
func (*UserUpdateRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{79}
}

func (x *UserUpdateRequest) GetUsers() []*UserUpdate {
	if x != nil {
		return x.Users
	}
	return nil
}

// Note that ONLY fullName is currently supported!
type UserUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64            `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	NodeId           int64            `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	EncryptedData    []byte           `protobuf:"bytes,3,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"` //Data encrypted with the tree key, i.e. { display_name="first name middle last name"}
	KeyType          EncryptedKeyType `protobuf:"varint,4,opt,name=keyType,proto3,enum=Enterprise.EncryptedKeyType" json:"keyType,omitempty"`
	FullName         string           `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName,omitempty"` //The user full name, e.g. "Explodin' Dr. Jaggers Flymo".  Sending an empty string will leave the name unchanged; sending all whitespace will clear the name.
	JobTitle         string           `protobuf:"bytes,6,opt,name=jobTitle,proto3" json:"jobTitle,omitempty"` //The job tile, e.g. "Drums".  Sending an empty string will leave the title unchanged; sending all whitespace will clear the title.
	Email            string           `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`       //The new email address of the enterprise user.
}

func (x *UserUpdate) Reset() {
	*x = UserUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdate) ProtoMessage() {}

func (x *UserUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdate.ProtoReflect.Descriptor instead.
func (*UserUpdate) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{80}
}

func (x *UserUpdate) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *UserUpdate) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *UserUpdate) GetEncryptedData() []byte {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *UserUpdate) GetKeyType() EncryptedKeyType {
	if x != nil {
		return x.KeyType
	}
	return EncryptedKeyType_KT_NO_KEY
}

func (x *UserUpdate) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserUpdate) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *UserUpdate) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UserUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserUpdateResult `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserUpdateResponse) Reset() {
	*x = UserUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdateResponse) ProtoMessage() {}

func (x *UserUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdateResponse.ProtoReflect.Descriptor instead.
func (*UserUpdateResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{81}
}

func (x *UserUpdateResponse) GetUsers() []*UserUpdateResult {
	if x != nil {
		return x.Users
	}
	return nil
}

type UserUpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64            `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Status           UserUpdateStatus `protobuf:"varint,2,opt,name=status,proto3,enum=Enterprise.UserUpdateStatus" json:"status,omitempty"`
}

func (x *UserUpdateResult) Reset() {
	*x = UserUpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdateResult) ProtoMessage() {}

func (x *UserUpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdateResult.ProtoReflect.Descriptor instead.
func (*UserUpdateResult) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{82}
}

func (x *UserUpdateResult) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *UserUpdateResult) GetStatus() UserUpdateStatus {
	if x != nil {
		return x.Status
	}
	return UserUpdateStatus_USER_UPDATE_OK
}

type ComplianceRecordOwnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIds          []int64 `protobuf:"varint,1,rep,packed,name=nodeIds,proto3" json:"nodeIds,omitempty"`
	IncludeNonShared bool    `protobuf:"varint,2,opt,name=includeNonShared,proto3" json:"includeNonShared,omitempty"`
}

func (x *ComplianceRecordOwnersRequest) Reset() {
	*x = ComplianceRecordOwnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceRecordOwnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceRecordOwnersRequest) ProtoMessage() {}

func (x *ComplianceRecordOwnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceRecordOwnersRequest.ProtoReflect.Descriptor instead.
func (*ComplianceRecordOwnersRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{83}
}

func (x *ComplianceRecordOwnersRequest) GetNodeIds() []int64 {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *ComplianceRecordOwnersRequest) GetIncludeNonShared() bool {
	if x != nil {
		return x.IncludeNonShared
	}
	return false
}

type ComplianceRecordOwnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordOwners []*RecordOwner `protobuf:"bytes,1,rep,name=recordOwners,proto3" json:"recordOwners,omitempty"`
}

func (x *ComplianceRecordOwnersResponse) Reset() {
	*x = ComplianceRecordOwnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceRecordOwnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceRecordOwnersResponse) ProtoMessage() {}

func (x *ComplianceRecordOwnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceRecordOwnersResponse.ProtoReflect.Descriptor instead.
func (*ComplianceRecordOwnersResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{84}
}

func (x *ComplianceRecordOwnersResponse) GetRecordOwners() []*RecordOwner {
	if x != nil {
		return x.RecordOwners
	}
	return nil
}

type RecordOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64 `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Shared           bool  `protobuf:"varint,2,opt,name=shared,proto3" json:"shared,omitempty"` //  true if at least one owned record is shared.
}

func (x *RecordOwner) Reset() {
	*x = RecordOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordOwner) ProtoMessage() {}

func (x *RecordOwner) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordOwner.ProtoReflect.Descriptor instead.
func (*RecordOwner) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{85}
}

func (x *RecordOwner) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *RecordOwner) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

type PreliminaryComplianceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserIds                          []int64 `protobuf:"varint,1,rep,packed,name=enterpriseUserIds,proto3" json:"enterpriseUserIds,omitempty"`
	IncludeNonShared                           bool    `protobuf:"varint,2,opt,name=includeNonShared,proto3" json:"includeNonShared,omitempty"` //Default is false, meaning we'll consider only records which are shared.  If true, we'll include the list of records that are not shared.
	ContinuationToken                          []byte  `protobuf:"bytes,3,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	IncludeTotalMatchingRecordsInFirstResponse bool    `protobuf:"varint,4,opt,name=includeTotalMatchingRecordsInFirstResponse,proto3" json:"includeTotalMatchingRecordsInFirstResponse,omitempty"`
}

func (x *PreliminaryComplianceDataRequest) Reset() {
	*x = PreliminaryComplianceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreliminaryComplianceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreliminaryComplianceDataRequest) ProtoMessage() {}

func (x *PreliminaryComplianceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreliminaryComplianceDataRequest.ProtoReflect.Descriptor instead.
func (*PreliminaryComplianceDataRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{86}
}

func (x *PreliminaryComplianceDataRequest) GetEnterpriseUserIds() []int64 {
	if x != nil {
		return x.EnterpriseUserIds
	}
	return nil
}

func (x *PreliminaryComplianceDataRequest) GetIncludeNonShared() bool {
	if x != nil {
		return x.IncludeNonShared
	}
	return false
}

func (x *PreliminaryComplianceDataRequest) GetContinuationToken() []byte {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *PreliminaryComplianceDataRequest) GetIncludeTotalMatchingRecordsInFirstResponse() bool {
	if x != nil {
		return x.IncludeTotalMatchingRecordsInFirstResponse
	}
	return false
}

type PreliminaryComplianceDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditUserData        []*AuditUserData `protobuf:"bytes,1,rep,name=auditUserData,proto3" json:"auditUserData,omitempty"`
	ContinuationToken    []byte           `protobuf:"bytes,2,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	HasMore              bool             `protobuf:"varint,3,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	TotalMatchingRecords int32            `protobuf:"varint,4,opt,name=totalMatchingRecords,proto3" json:"totalMatchingRecords,omitempty"`
}

func (x *PreliminaryComplianceDataResponse) Reset() {
	*x = PreliminaryComplianceDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreliminaryComplianceDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreliminaryComplianceDataResponse) ProtoMessage() {}

func (x *PreliminaryComplianceDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreliminaryComplianceDataResponse.ProtoReflect.Descriptor instead.
func (*PreliminaryComplianceDataResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{87}
}

func (x *PreliminaryComplianceDataResponse) GetAuditUserData() []*AuditUserData {
	if x != nil {
		return x.AuditUserData
	}
	return nil
}

func (x *PreliminaryComplianceDataResponse) GetContinuationToken() []byte {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *PreliminaryComplianceDataResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *PreliminaryComplianceDataResponse) GetTotalMatchingRecords() int32 {
	if x != nil {
		return x.TotalMatchingRecords
	}
	return 0
}

type AuditUserRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid     []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	EncryptedData []byte `protobuf:"bytes,2,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"` //audit data encrypted with the audit key.
	Shared        bool   `protobuf:"varint,3,opt,name=shared,proto3" json:"shared,omitempty"`              //Default is false. If true, this record is shared.
}

func (x *AuditUserRecord) Reset() {
	*x = AuditUserRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditUserRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditUserRecord) ProtoMessage() {}

func (x *AuditUserRecord) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditUserRecord.ProtoReflect.Descriptor instead.
func (*AuditUserRecord) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{88}
}

func (x *AuditUserRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *AuditUserRecord) GetEncryptedData() []byte {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *AuditUserRecord) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

type AuditUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64              `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	AuditUserRecords []*AuditUserRecord `protobuf:"bytes,2,rep,name=auditUserRecords,proto3" json:"auditUserRecords,omitempty"`              //The list of record owned or owned and shared by this user.
	Status           AuditUserStatus    `protobuf:"varint,3,opt,name=status,proto3,enum=Enterprise.AuditUserStatus" json:"status,omitempty"` //Status of user for report
}

func (x *AuditUserData) Reset() {
	*x = AuditUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditUserData) ProtoMessage() {}

func (x *AuditUserData) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditUserData.ProtoReflect.Descriptor instead.
func (*AuditUserData) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{89}
}

func (x *AuditUserData) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *AuditUserData) GetAuditUserRecords() []*AuditUserRecord {
	if x != nil {
		return x.AuditUserRecords
	}
	return nil
}

func (x *AuditUserData) GetStatus() AuditUserStatus {
	if x != nil {
		return x.Status
	}
	return AuditUserStatus_OK
}

type ComplianceReportFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTitles      []string `protobuf:"bytes,1,rep,name=recordTitles,proto3" json:"recordTitles,omitempty"`                   //The list of record titles.
	RecordUids        [][]byte `protobuf:"bytes,2,rep,name=recordUids,proto3" json:"recordUids,omitempty"`                       //The list of record UIDs.
	JobTitles         []int64  `protobuf:"varint,3,rep,packed,name=jobTitles,proto3" json:"jobTitles,omitempty"`                 //The list of user job titles.
	Urls              []string `protobuf:"bytes,4,rep,name=urls,proto3" json:"urls,omitempty"`                                   //The list of record URLs.
	EnterpriseUserIds []int64  `protobuf:"varint,5,rep,packed,name=enterpriseUserIds,proto3" json:"enterpriseUserIds,omitempty"` //The list of users chosen.
}

func (x *ComplianceReportFilters) Reset() {
	*x = ComplianceReportFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceReportFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceReportFilters) ProtoMessage() {}

func (x *ComplianceReportFilters) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceReportFilters.ProtoReflect.Descriptor instead.
func (*ComplianceReportFilters) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{90}
}

func (x *ComplianceReportFilters) GetRecordTitles() []string {
	if x != nil {
		return x.RecordTitles
	}
	return nil
}

func (x *ComplianceReportFilters) GetRecordUids() [][]byte {
	if x != nil {
		return x.RecordUids
	}
	return nil
}

func (x *ComplianceReportFilters) GetJobTitles() []int64 {
	if x != nil {
		return x.JobTitles
	}
	return nil
}

func (x *ComplianceReportFilters) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *ComplianceReportFilters) GetEnterpriseUserIds() []int64 {
	if x != nil {
		return x.EnterpriseUserIds
	}
	return nil
}

type ComplianceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplianceReportRun *ComplianceReportRun `protobuf:"bytes,1,opt,name=complianceReportRun,proto3" json:"complianceReportRun,omitempty"`
	ReportName          string               `protobuf:"bytes,2,opt,name=reportName,proto3" json:"reportName,omitempty"`  //The report name (only required when we want to save the report).
	SaveReport          bool                 `protobuf:"varint,3,opt,name=saveReport,proto3" json:"saveReport,omitempty"` //Default is false.  True means we will save the report.
}

func (x *ComplianceReportRequest) Reset() {
	*x = ComplianceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceReportRequest) ProtoMessage() {}

func (x *ComplianceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceReportRequest.ProtoReflect.Descriptor instead.
func (*ComplianceReportRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{91}
}

func (x *ComplianceReportRequest) GetComplianceReportRun() *ComplianceReportRun {
	if x != nil {
		return x.ComplianceReportRun
	}
	return nil
}

func (x *ComplianceReportRequest) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *ComplianceReportRequest) GetSaveReport() bool {
	if x != nil {
		return x.SaveReport
	}
	return false
}

type ComplianceReportRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportCriteriaAndFilter *ComplianceReportCriteriaAndFilter `protobuf:"bytes,1,opt,name=reportCriteriaAndFilter,proto3" json:"reportCriteriaAndFilter,omitempty"`
	Users                   []int64                            `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"` //List of enterprise user IDs sent to get_preliminary_compliance_data.
	Records                 [][]byte                           `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`     //These are the records that will be run.  Max number of recordUids is 1000.
}

func (x *ComplianceReportRun) Reset() {
	*x = ComplianceReportRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceReportRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceReportRun) ProtoMessage() {}

func (x *ComplianceReportRun) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceReportRun.ProtoReflect.Descriptor instead.
func (*ComplianceReportRun) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{92}
}

func (x *ComplianceReportRun) GetReportCriteriaAndFilter() *ComplianceReportCriteriaAndFilter {
	if x != nil {
		return x.ReportCriteriaAndFilter
	}
	return nil
}

func (x *ComplianceReportRun) GetUsers() []int64 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ComplianceReportRun) GetRecords() [][]byte {
	if x != nil {
		return x.Records
	}
	return nil
}

type ComplianceReportCriteriaAndFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId            int64                     `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	CriteriaUid       []byte                    `protobuf:"bytes,2,opt,name=criteriaUid,proto3" json:"criteriaUid,omitempty"` //Uid provided by the client
	CriteriaName      string                    `protobuf:"bytes,3,opt,name=criteriaName,proto3" json:"criteriaName,omitempty"`
	Criteria          *ComplianceReportCriteria `protobuf:"bytes,4,opt,name=criteria,proto3" json:"criteria,omitempty"`
	Filters           []*ComplianceReportFilter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
	LastModified      int64                     `protobuf:"varint,6,opt,name=lastModified,proto3" json:"lastModified,omitempty"`
	NodeEncryptedData []byte                    `protobuf:"bytes,7,opt,name=nodeEncryptedData,proto3" json:"nodeEncryptedData,omitempty"` //The node data object encrypted with the tree key that contains the nodeName
}

func (x *ComplianceReportCriteriaAndFilter) Reset() {
	*x = ComplianceReportCriteriaAndFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceReportCriteriaAndFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceReportCriteriaAndFilter) ProtoMessage() {}

func (x *ComplianceReportCriteriaAndFilter) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceReportCriteriaAndFilter.ProtoReflect.Descriptor instead.
func (*ComplianceReportCriteriaAndFilter) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{93}
}

func (x *ComplianceReportCriteriaAndFilter) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ComplianceReportCriteriaAndFilter) GetCriteriaUid() []byte {
	if x != nil {
		return x.CriteriaUid
	}
	return nil
}

func (x *ComplianceReportCriteriaAndFilter) GetCriteriaName() string {
	if x != nil {
		return x.CriteriaName
	}
	return ""
}

func (x *ComplianceReportCriteriaAndFilter) GetCriteria() *ComplianceReportCriteria {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *ComplianceReportCriteriaAndFilter) GetFilters() []*ComplianceReportFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ComplianceReportCriteriaAndFilter) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *ComplianceReportCriteriaAndFilter) GetNodeEncryptedData() []byte {
	if x != nil {
		return x.NodeEncryptedData
	}
	return nil
}

type ComplianceReportCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobTitles         []string `protobuf:"bytes,1,rep,name=jobTitles,proto3" json:"jobTitles,omitempty"`                         //The list of job titles chosen.
	EnterpriseUserIds []int64  `protobuf:"varint,2,rep,packed,name=enterpriseUserIds,proto3" json:"enterpriseUserIds,omitempty"` //The list of users chosen.
	IncludeNonShared  bool     `protobuf:"varint,3,opt,name=includeNonShared,proto3" json:"includeNonShared,omitempty"`          //If true, include the list the records that are not shared
}

func (x *ComplianceReportCriteria) Reset() {
	*x = ComplianceReportCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceReportCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceReportCriteria) ProtoMessage() {}

func (x *ComplianceReportCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceReportCriteria.ProtoReflect.Descriptor instead.
func (*ComplianceReportCriteria) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{94}
}

func (x *ComplianceReportCriteria) GetJobTitles() []string {
	if x != nil {
		return x.JobTitles
	}
	return nil
}

func (x *ComplianceReportCriteria) GetEnterpriseUserIds() []int64 {
	if x != nil {
		return x.EnterpriseUserIds
	}
	return nil
}

func (x *ComplianceReportCriteria) GetIncludeNonShared() bool {
	if x != nil {
		return x.IncludeNonShared
	}
	return false
}

type ComplianceReportFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTitles []string `protobuf:"bytes,1,rep,name=recordTitles,proto3" json:"recordTitles,omitempty"`
	RecordUids   [][]byte `protobuf:"bytes,2,rep,name=recordUids,proto3" json:"recordUids,omitempty"`
	JobTitles    []string `protobuf:"bytes,3,rep,name=jobTitles,proto3" json:"jobTitles,omitempty"`
	Urls         []string `protobuf:"bytes,4,rep,name=urls,proto3" json:"urls,omitempty"`
	RecordTypes  []string `protobuf:"bytes,5,rep,name=recordTypes,proto3" json:"recordTypes,omitempty"`
}

func (x *ComplianceReportFilter) Reset() {
	*x = ComplianceReportFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceReportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceReportFilter) ProtoMessage() {}

func (x *ComplianceReportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceReportFilter.ProtoReflect.Descriptor instead.
func (*ComplianceReportFilter) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{95}
}

func (x *ComplianceReportFilter) GetRecordTitles() []string {
	if x != nil {
		return x.RecordTitles
	}
	return nil
}

func (x *ComplianceReportFilter) GetRecordUids() [][]byte {
	if x != nil {
		return x.RecordUids
	}
	return nil
}

func (x *ComplianceReportFilter) GetJobTitles() []string {
	if x != nil {
		return x.JobTitles
	}
	return nil
}

func (x *ComplianceReportFilter) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *ComplianceReportFilter) GetRecordTypes() []string {
	if x != nil {
		return x.RecordTypes
	}
	return nil
}

type ComplianceReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateGenerated       int64                 `protobuf:"varint,1,opt,name=dateGenerated,proto3" json:"dateGenerated,omitempty"`
	RunByUserName       string                `protobuf:"bytes,2,opt,name=runByUserName,proto3" json:"runByUserName,omitempty"`
	ReportName          string                `protobuf:"bytes,3,opt,name=reportName,proto3" json:"reportName,omitempty"`
	ReportUid           []byte                `protobuf:"bytes,4,opt,name=reportUid,proto3" json:"reportUid,omitempty"`
	ComplianceReportRun *ComplianceReportRun  `protobuf:"bytes,5,opt,name=complianceReportRun,proto3" json:"complianceReportRun,omitempty"`
	UserProfiles        []*UserProfile        `protobuf:"bytes,6,rep,name=userProfiles,proto3" json:"userProfiles,omitempty"`
	AuditTeams          []*AuditTeam          `protobuf:"bytes,7,rep,name=auditTeams,proto3" json:"auditTeams,omitempty"`
	AuditRecords        []*AuditRecord        `protobuf:"bytes,8,rep,name=auditRecords,proto3" json:"auditRecords,omitempty"`
	UserRecords         []*UserRecord         `protobuf:"bytes,9,rep,name=userRecords,proto3" json:"userRecords,omitempty"`
	SharedFolderRecords []*SharedFolderRecord `protobuf:"bytes,10,rep,name=sharedFolderRecords,proto3" json:"sharedFolderRecords,omitempty"`
	SharedFolderUsers   []*SharedFolderUser   `protobuf:"bytes,11,rep,name=sharedFolderUsers,proto3" json:"sharedFolderUsers,omitempty"`
	SharedFolderTeams   []*SharedFolderTeam   `protobuf:"bytes,12,rep,name=sharedFolderTeams,proto3" json:"sharedFolderTeams,omitempty"`
	AuditTeamUsers      []*AuditTeamUser      `protobuf:"bytes,13,rep,name=auditTeamUsers,proto3" json:"auditTeamUsers,omitempty"`
	AuditRoles          []*AuditRole          `protobuf:"bytes,14,rep,name=auditRoles,proto3" json:"auditRoles,omitempty"`
	LinkedRecords       []*LinkedRecord       `protobuf:"bytes,15,rep,name=linkedRecords,proto3" json:"linkedRecords,omitempty"`
}

func (x *ComplianceReportResponse) Reset() {
	*x = ComplianceReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceReportResponse) ProtoMessage() {}

func (x *ComplianceReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceReportResponse.ProtoReflect.Descriptor instead.
func (*ComplianceReportResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{96}
}

func (x *ComplianceReportResponse) GetDateGenerated() int64 {
	if x != nil {
		return x.DateGenerated
	}
	return 0
}

func (x *ComplianceReportResponse) GetRunByUserName() string {
	if x != nil {
		return x.RunByUserName
	}
	return ""
}

func (x *ComplianceReportResponse) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *ComplianceReportResponse) GetReportUid() []byte {
	if x != nil {
		return x.ReportUid
	}
	return nil
}

func (x *ComplianceReportResponse) GetComplianceReportRun() *ComplianceReportRun {
	if x != nil {
		return x.ComplianceReportRun
	}
	return nil
}

func (x *ComplianceReportResponse) GetUserProfiles() []*UserProfile {
	if x != nil {
		return x.UserProfiles
	}
	return nil
}

func (x *ComplianceReportResponse) GetAuditTeams() []*AuditTeam {
	if x != nil {
		return x.AuditTeams
	}
	return nil
}

func (x *ComplianceReportResponse) GetAuditRecords() []*AuditRecord {
	if x != nil {
		return x.AuditRecords
	}
	return nil
}

func (x *ComplianceReportResponse) GetUserRecords() []*UserRecord {
	if x != nil {
		return x.UserRecords
	}
	return nil
}

func (x *ComplianceReportResponse) GetSharedFolderRecords() []*SharedFolderRecord {
	if x != nil {
		return x.SharedFolderRecords
	}
	return nil
}

func (x *ComplianceReportResponse) GetSharedFolderUsers() []*SharedFolderUser {
	if x != nil {
		return x.SharedFolderUsers
	}
	return nil
}

func (x *ComplianceReportResponse) GetSharedFolderTeams() []*SharedFolderTeam {
	if x != nil {
		return x.SharedFolderTeams
	}
	return nil
}

func (x *ComplianceReportResponse) GetAuditTeamUsers() []*AuditTeamUser {
	if x != nil {
		return x.AuditTeamUsers
	}
	return nil
}

func (x *ComplianceReportResponse) GetAuditRoles() []*AuditRole {
	if x != nil {
		return x.AuditRoles
	}
	return nil
}

func (x *ComplianceReportResponse) GetLinkedRecords() []*LinkedRecord {
	if x != nil {
		return x.LinkedRecords
	}
	return nil
}

type AuditRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid      []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	AuditData      []byte `protobuf:"bytes,2,opt,name=auditData,proto3" json:"auditData,omitempty"`
	HasAttachments bool   `protobuf:"varint,3,opt,name=hasAttachments,proto3" json:"hasAttachments,omitempty"`
	InTrash        bool   `protobuf:"varint,4,opt,name=inTrash,proto3" json:"inTrash,omitempty"`     //  true if this record is in its owner's trash/"deleted items".  Not set on older saved reports.
	TreeLeft       int32  `protobuf:"varint,5,opt,name=treeLeft,proto3" json:"treeLeft,omitempty"`   //  record's owner's node.  Not set in older saved reports.
	TreeRight      int32  `protobuf:"varint,6,opt,name=treeRight,proto3" json:"treeRight,omitempty"` //  record's owner's node.  Not set in older saved reports.
}

func (x *AuditRecord) Reset() {
	*x = AuditRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditRecord) ProtoMessage() {}

func (x *AuditRecord) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditRecord.ProtoReflect.Descriptor instead.
func (*AuditRecord) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{97}
}

func (x *AuditRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *AuditRecord) GetAuditData() []byte {
	if x != nil {
		return x.AuditData
	}
	return nil
}

func (x *AuditRecord) GetHasAttachments() bool {
	if x != nil {
		return x.HasAttachments
	}
	return false
}

func (x *AuditRecord) GetInTrash() bool {
	if x != nil {
		return x.InTrash
	}
	return false
}

func (x *AuditRecord) GetTreeLeft() int32 {
	if x != nil {
		return x.TreeLeft
	}
	return 0
}

func (x *AuditRecord) GetTreeRight() int32 {
	if x != nil {
		return x.TreeRight
	}
	return 0
}

type AuditRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId                            int64                 `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
	EncryptedData                     []byte                `protobuf:"bytes,2,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	RestrictShareOutsideEnterprise    bool                  `protobuf:"varint,3,opt,name=restrictShareOutsideEnterprise,proto3" json:"restrictShareOutsideEnterprise,omitempty"`       //True means cannot share records to others not in the same enterprise
	RestrictShareAll                  bool                  `protobuf:"varint,4,opt,name=restrictShareAll,proto3" json:"restrictShareAll,omitempty"`                                   //True means can't share records
	RestrictShareOfAttachments        bool                  `protobuf:"varint,5,opt,name=restrictShareOfAttachments,proto3" json:"restrictShareOfAttachments,omitempty"`               //True means can't share records with attachments
	RestrictMaskPasswordsWhileEditing bool                  `protobuf:"varint,6,opt,name=restrictMaskPasswordsWhileEditing,proto3" json:"restrictMaskPasswordsWhileEditing,omitempty"` //True means you can't even see the password when you are editing
	RoleNodeManagements               []*RoleNodeManagement `protobuf:"bytes,7,rep,name=roleNodeManagements,proto3" json:"roleNodeManagements,omitempty"`
}

func (x *AuditRole) Reset() {
	*x = AuditRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditRole) ProtoMessage() {}

func (x *AuditRole) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditRole.ProtoReflect.Descriptor instead.
func (*AuditRole) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{98}
}

func (x *AuditRole) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *AuditRole) GetEncryptedData() []byte {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *AuditRole) GetRestrictShareOutsideEnterprise() bool {
	if x != nil {
		return x.RestrictShareOutsideEnterprise
	}
	return false
}

func (x *AuditRole) GetRestrictShareAll() bool {
	if x != nil {
		return x.RestrictShareAll
	}
	return false
}

func (x *AuditRole) GetRestrictShareOfAttachments() bool {
	if x != nil {
		return x.RestrictShareOfAttachments
	}
	return false
}

func (x *AuditRole) GetRestrictMaskPasswordsWhileEditing() bool {
	if x != nil {
		return x.RestrictMaskPasswordsWhileEditing
	}
	return false
}

func (x *AuditRole) GetRoleNodeManagements() []*RoleNodeManagement {
	if x != nil {
		return x.RoleNodeManagements
	}
	return nil
}

type RoleNodeManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeLeft   int32 `protobuf:"varint,1,opt,name=treeLeft,proto3" json:"treeLeft,omitempty"`
	TreeRight  int32 `protobuf:"varint,2,opt,name=treeRight,proto3" json:"treeRight,omitempty"`
	Cascade    bool  `protobuf:"varint,3,opt,name=cascade,proto3" json:"cascade,omitempty"`
	Privileges int32 `protobuf:"varint,4,opt,name=privileges,proto3" json:"privileges,omitempty"` //  bit field; 1 is SHARING_ADMINISTRATOR
}

func (x *RoleNodeManagement) Reset() {
	*x = RoleNodeManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleNodeManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleNodeManagement) ProtoMessage() {}

func (x *RoleNodeManagement) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleNodeManagement.ProtoReflect.Descriptor instead.
func (*RoleNodeManagement) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{99}
}

func (x *RoleNodeManagement) GetTreeLeft() int32 {
	if x != nil {
		return x.TreeLeft
	}
	return 0
}

func (x *RoleNodeManagement) GetTreeRight() int32 {
	if x != nil {
		return x.TreeRight
	}
	return 0
}

func (x *RoleNodeManagement) GetCascade() bool {
	if x != nil {
		return x.Cascade
	}
	return false
}

func (x *RoleNodeManagement) GetPrivileges() int32 {
	if x != nil {
		return x.Privileges
	}
	return 0
}

type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64   `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	FullName         string  `protobuf:"bytes,2,opt,name=fullName,proto3" json:"fullName,omitempty"` //The user's full name.
	JobTitle         string  `protobuf:"bytes,3,opt,name=jobTitle,proto3" json:"jobTitle,omitempty"`
	Email            string  `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	RoleIds          []int64 `protobuf:"varint,5,rep,packed,name=roleIds,proto3" json:"roleIds,omitempty"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{100}
}

func (x *UserProfile) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *UserProfile) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserProfile) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *UserProfile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserProfile) GetRoleIds() []int64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type RecordPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid      []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	PermissionBits int32  `protobuf:"varint,2,opt,name=permissionBits,proto3" json:"permissionBits,omitempty"`
}

func (x *RecordPermission) Reset() {
	*x = RecordPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPermission) ProtoMessage() {}

func (x *RecordPermission) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPermission.ProtoReflect.Descriptor instead.
func (*RecordPermission) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{101}
}

func (x *RecordPermission) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordPermission) GetPermissionBits() int32 {
	if x != nil {
		return x.PermissionBits
	}
	return 0
}

type UserRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId  int64               `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	RecordPermissions []*RecordPermission `protobuf:"bytes,2,rep,name=recordPermissions,proto3" json:"recordPermissions,omitempty"`
}

func (x *UserRecord) Reset() {
	*x = UserRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRecord) ProtoMessage() {}

func (x *UserRecord) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRecord.ProtoReflect.Descriptor instead.
func (*UserRecord) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{102}
}

func (x *UserRecord) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *UserRecord) GetRecordPermissions() []*RecordPermission {
	if x != nil {
		return x.RecordPermissions
	}
	return nil
}

type AuditTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid       []byte `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	TeamName      string `protobuf:"bytes,2,opt,name=teamName,proto3" json:"teamName,omitempty"`
	RestrictEdit  bool   `protobuf:"varint,3,opt,name=restrictEdit,proto3" json:"restrictEdit,omitempty"`
	RestrictShare bool   `protobuf:"varint,4,opt,name=restrictShare,proto3" json:"restrictShare,omitempty"`
}

func (x *AuditTeam) Reset() {
	*x = AuditTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditTeam) ProtoMessage() {}

func (x *AuditTeam) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditTeam.ProtoReflect.Descriptor instead.
func (*AuditTeam) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{103}
}

func (x *AuditTeam) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *AuditTeam) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *AuditTeam) GetRestrictEdit() bool {
	if x != nil {
		return x.RestrictEdit
	}
	return false
}

func (x *AuditTeam) GetRestrictShare() bool {
	if x != nil {
		return x.RestrictShare
	}
	return false
}

type AuditTeamUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid           []byte  `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	EnterpriseUserIds []int64 `protobuf:"varint,2,rep,packed,name=enterpriseUserIds,proto3" json:"enterpriseUserIds,omitempty"`
}

func (x *AuditTeamUser) Reset() {
	*x = AuditTeamUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditTeamUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditTeamUser) ProtoMessage() {}

func (x *AuditTeamUser) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditTeamUser.ProtoReflect.Descriptor instead.
func (*AuditTeamUser) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{104}
}

func (x *AuditTeamUser) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *AuditTeamUser) GetEnterpriseUserIds() []int64 {
	if x != nil {
		return x.EnterpriseUserIds
	}
	return nil
}

type SharedFolderRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid   []byte              `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	RecordPermissions []*RecordPermission `protobuf:"bytes,2,rep,name=recordPermissions,proto3" json:"recordPermissions,omitempty"`
	ShareAdminRecords []*ShareAdminRecord `protobuf:"bytes,3,rep,name=shareAdminRecords,proto3" json:"shareAdminRecords,omitempty"`
}

func (x *SharedFolderRecord) Reset() {
	*x = SharedFolderRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderRecord) ProtoMessage() {}

func (x *SharedFolderRecord) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderRecord.ProtoReflect.Descriptor instead.
func (*SharedFolderRecord) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{105}
}

func (x *SharedFolderRecord) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderRecord) GetRecordPermissions() []*RecordPermission {
	if x != nil {
		return x.RecordPermissions
	}
	return nil
}

func (x *SharedFolderRecord) GetShareAdminRecords() []*ShareAdminRecord {
	if x != nil {
		return x.ShareAdminRecords
	}
	return nil
}

type ShareAdminRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId        int64   `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	RecordPermissionIndexes []int32 `protobuf:"varint,2,rep,packed,name=recordPermissionIndexes,proto3" json:"recordPermissionIndexes,omitempty"`
}

func (x *ShareAdminRecord) Reset() {
	*x = ShareAdminRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareAdminRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareAdminRecord) ProtoMessage() {}

func (x *ShareAdminRecord) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareAdminRecord.ProtoReflect.Descriptor instead.
func (*ShareAdminRecord) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{106}
}

func (x *ShareAdminRecord) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *ShareAdminRecord) GetRecordPermissionIndexes() []int32 {
	if x != nil {
		return x.RecordPermissionIndexes
	}
	return nil
}

type SharedFolderUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid   []byte  `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	EnterpriseUserIds []int64 `protobuf:"varint,2,rep,packed,name=enterpriseUserIds,proto3" json:"enterpriseUserIds,omitempty"`
}

func (x *SharedFolderUser) Reset() {
	*x = SharedFolderUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUser) ProtoMessage() {}

func (x *SharedFolderUser) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUser.ProtoReflect.Descriptor instead.
func (*SharedFolderUser) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{107}
}

func (x *SharedFolderUser) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderUser) GetEnterpriseUserIds() []int64 {
	if x != nil {
		return x.EnterpriseUserIds
	}
	return nil
}

type SharedFolderTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte   `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	TeamUids        [][]byte `protobuf:"bytes,2,rep,name=teamUids,proto3" json:"teamUids,omitempty"`
}

func (x *SharedFolderTeam) Reset() {
	*x = SharedFolderTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderTeam) ProtoMessage() {}

func (x *SharedFolderTeam) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderTeam.ProtoReflect.Descriptor instead.
func (*SharedFolderTeam) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{108}
}

func (x *SharedFolderTeam) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderTeam) GetTeamUids() [][]byte {
	if x != nil {
		return x.TeamUids
	}
	return nil
}

type GetComplianceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportUid []byte `protobuf:"bytes,1,opt,name=reportUid,proto3" json:"reportUid,omitempty"`
}

func (x *GetComplianceReportRequest) Reset() {
	*x = GetComplianceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComplianceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComplianceReportRequest) ProtoMessage() {}

func (x *GetComplianceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComplianceReportRequest.ProtoReflect.Descriptor instead.
func (*GetComplianceReportRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{109}
}

func (x *GetComplianceReportRequest) GetReportUid() []byte {
	if x != nil {
		return x.ReportUid
	}
	return nil
}

type GetComplianceReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl string `protobuf:"bytes,1,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"`
}

func (x *GetComplianceReportResponse) Reset() {
	*x = GetComplianceReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComplianceReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComplianceReportResponse) ProtoMessage() {}

func (x *GetComplianceReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComplianceReportResponse.ProtoReflect.Descriptor instead.
func (*GetComplianceReportResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{110}
}

func (x *GetComplianceReportResponse) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

type ComplianceReportCriteriaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CriteriaUid []byte `protobuf:"bytes,1,opt,name=criteriaUid,proto3" json:"criteriaUid,omitempty"`
}

func (x *ComplianceReportCriteriaRequest) Reset() {
	*x = ComplianceReportCriteriaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceReportCriteriaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceReportCriteriaRequest) ProtoMessage() {}

func (x *ComplianceReportCriteriaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceReportCriteriaRequest.ProtoReflect.Descriptor instead.
func (*ComplianceReportCriteriaRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{111}
}

func (x *ComplianceReportCriteriaRequest) GetCriteriaUid() []byte {
	if x != nil {
		return x.CriteriaUid
	}
	return nil
}

type SaveComplianceReportCriteriaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CriteriaUid []byte `protobuf:"bytes,1,opt,name=criteriaUid,proto3" json:"criteriaUid,omitempty"`
}

func (x *SaveComplianceReportCriteriaResponse) Reset() {
	*x = SaveComplianceReportCriteriaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveComplianceReportCriteriaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveComplianceReportCriteriaResponse) ProtoMessage() {}

func (x *SaveComplianceReportCriteriaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveComplianceReportCriteriaResponse.ProtoReflect.Descriptor instead.
func (*SaveComplianceReportCriteriaResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{112}
}

func (x *SaveComplianceReportCriteriaResponse) GetCriteriaUid() []byte {
	if x != nil {
		return x.CriteriaUid
	}
	return nil
}

type LinkedRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the owner *record* UID.
	OwnerUid []byte `protobuf:"bytes,1,opt,name=ownerUid,proto3" json:"ownerUid,omitempty"`
	// A child record may have multiple parent/"owner" records, but will not itself be an owner.
	RecordUids [][]byte `protobuf:"bytes,2,rep,name=recordUids,proto3" json:"recordUids,omitempty"`
}

func (x *LinkedRecord) Reset() {
	*x = LinkedRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedRecord) ProtoMessage() {}

func (x *LinkedRecord) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedRecord.ProtoReflect.Descriptor instead.
func (*LinkedRecord) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{113}
}

func (x *LinkedRecord) GetOwnerUid() []byte {
	if x != nil {
		return x.OwnerUid
	}
	return nil
}

func (x *LinkedRecord) GetRecordUids() [][]byte {
	if x != nil {
		return x.RecordUids
	}
	return nil
}

type GetSharingAdminsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	RecordUid       []byte `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Username        string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetSharingAdminsRequest) Reset() {
	*x = GetSharingAdminsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSharingAdminsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharingAdminsRequest) ProtoMessage() {}

func (x *GetSharingAdminsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharingAdminsRequest.ProtoReflect.Descriptor instead.
func (*GetSharingAdminsRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{114}
}

func (x *GetSharingAdminsRequest) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *GetSharingAdminsRequest) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *GetSharingAdminsRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type UserProfileExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email                            string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	FullName                         string `protobuf:"bytes,2,opt,name=fullName,proto3" json:"fullName,omitempty"` //The user's full name.
	JobTitle                         string `protobuf:"bytes,3,opt,name=jobTitle,proto3" json:"jobTitle,omitempty"`
	IsMSPMCAdmin                     bool   `protobuf:"varint,4,opt,name=isMSPMCAdmin,proto3" json:"isMSPMCAdmin,omitempty"`
	IsInSharedFolder                 bool   `protobuf:"varint,5,opt,name=isInSharedFolder,proto3" json:"isInSharedFolder,omitempty"`
	IsShareAdminForRequestedObject   bool   `protobuf:"varint,6,opt,name=isShareAdminForRequestedObject,proto3" json:"isShareAdminForRequestedObject,omitempty"`
	IsShareAdminForSharedFolderOwner bool   `protobuf:"varint,7,opt,name=isShareAdminForSharedFolderOwner,proto3" json:"isShareAdminForSharedFolderOwner,omitempty"`
	HasAccessToObject                bool   `protobuf:"varint,8,opt,name=hasAccessToObject,proto3" json:"hasAccessToObject,omitempty"`
}

func (x *UserProfileExt) Reset() {
	*x = UserProfileExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileExt) ProtoMessage() {}

func (x *UserProfileExt) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileExt.ProtoReflect.Descriptor instead.
func (*UserProfileExt) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{115}
}

func (x *UserProfileExt) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserProfileExt) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserProfileExt) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *UserProfileExt) GetIsMSPMCAdmin() bool {
	if x != nil {
		return x.IsMSPMCAdmin
	}
	return false
}

func (x *UserProfileExt) GetIsInSharedFolder() bool {
	if x != nil {
		return x.IsInSharedFolder
	}
	return false
}

func (x *UserProfileExt) GetIsShareAdminForRequestedObject() bool {
	if x != nil {
		return x.IsShareAdminForRequestedObject
	}
	return false
}

func (x *UserProfileExt) GetIsShareAdminForSharedFolderOwner() bool {
	if x != nil {
		return x.IsShareAdminForSharedFolderOwner
	}
	return false
}

func (x *UserProfileExt) GetHasAccessToObject() bool {
	if x != nil {
		return x.HasAccessToObject
	}
	return false
}

type GetSharingAdminsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserProfileExts []*UserProfileExt `protobuf:"bytes,1,rep,name=userProfileExts,proto3" json:"userProfileExts,omitempty"`
}

func (x *GetSharingAdminsResponse) Reset() {
	*x = GetSharingAdminsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSharingAdminsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharingAdminsResponse) ProtoMessage() {}

func (x *GetSharingAdminsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharingAdminsResponse.ProtoReflect.Descriptor instead.
func (*GetSharingAdminsResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{116}
}

func (x *GetSharingAdminsResponse) GetUserProfileExts() []*UserProfileExt {
	if x != nil {
		return x.UserProfileExts
	}
	return nil
}

type TeamsEnterpriseUsersAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*TeamsEnterpriseUsersAddTeamRequest `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *TeamsEnterpriseUsersAddRequest) Reset() {
	*x = TeamsEnterpriseUsersAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsEnterpriseUsersAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsEnterpriseUsersAddRequest) ProtoMessage() {}

func (x *TeamsEnterpriseUsersAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsEnterpriseUsersAddRequest.ProtoReflect.Descriptor instead.
func (*TeamsEnterpriseUsersAddRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{117}
}

func (x *TeamsEnterpriseUsersAddRequest) GetTeams() []*TeamsEnterpriseUsersAddTeamRequest {
	if x != nil {
		return x.Teams
	}
	return nil
}

type TeamsEnterpriseUsersAddTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid []byte                                `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Users   []*TeamsEnterpriseUsersAddUserRequest `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *TeamsEnterpriseUsersAddTeamRequest) Reset() {
	*x = TeamsEnterpriseUsersAddTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsEnterpriseUsersAddTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsEnterpriseUsersAddTeamRequest) ProtoMessage() {}

func (x *TeamsEnterpriseUsersAddTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsEnterpriseUsersAddTeamRequest.ProtoReflect.Descriptor instead.
func (*TeamsEnterpriseUsersAddTeamRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{118}
}

func (x *TeamsEnterpriseUsersAddTeamRequest) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *TeamsEnterpriseUsersAddTeamRequest) GetUsers() []*TeamsEnterpriseUsersAddUserRequest {
	if x != nil {
		return x.Users
	}
	return nil
}

type TeamsEnterpriseUsersAddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64        `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	UserType         TeamUserType `protobuf:"varint,2,opt,name=userType,proto3,enum=Enterprise.TeamUserType" json:"userType,omitempty"`
	TeamKey          string       `protobuf:"bytes,3,opt,name=teamKey,proto3" json:"teamKey,omitempty"` // encrypted with the user's public key
}

func (x *TeamsEnterpriseUsersAddUserRequest) Reset() {
	*x = TeamsEnterpriseUsersAddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsEnterpriseUsersAddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsEnterpriseUsersAddUserRequest) ProtoMessage() {}

func (x *TeamsEnterpriseUsersAddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsEnterpriseUsersAddUserRequest.ProtoReflect.Descriptor instead.
func (*TeamsEnterpriseUsersAddUserRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{119}
}

func (x *TeamsEnterpriseUsersAddUserRequest) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *TeamsEnterpriseUsersAddUserRequest) GetUserType() TeamUserType {
	if x != nil {
		return x.UserType
	}
	return TeamUserType_USER
}

func (x *TeamsEnterpriseUsersAddUserRequest) GetTeamKey() string {
	if x != nil {
		return x.TeamKey
	}
	return ""
}

type TeamsEnterpriseUsersAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams    []*TeamsEnterpriseUsersAddTeamResponse `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	Revision int64                                  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *TeamsEnterpriseUsersAddResponse) Reset() {
	*x = TeamsEnterpriseUsersAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsEnterpriseUsersAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsEnterpriseUsersAddResponse) ProtoMessage() {}

func (x *TeamsEnterpriseUsersAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsEnterpriseUsersAddResponse.ProtoReflect.Descriptor instead.
func (*TeamsEnterpriseUsersAddResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{120}
}

func (x *TeamsEnterpriseUsersAddResponse) GetTeams() []*TeamsEnterpriseUsersAddTeamResponse {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *TeamsEnterpriseUsersAddResponse) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type TeamsEnterpriseUsersAddTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid        []byte                                 `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Users          []*TeamsEnterpriseUsersAddUserResponse `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Success        bool                                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Message        string                                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	ResultCode     string                                 `protobuf:"bytes,5,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	AdditionalInfo string                                 `protobuf:"bytes,6,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"`
}

func (x *TeamsEnterpriseUsersAddTeamResponse) Reset() {
	*x = TeamsEnterpriseUsersAddTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsEnterpriseUsersAddTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsEnterpriseUsersAddTeamResponse) ProtoMessage() {}

func (x *TeamsEnterpriseUsersAddTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsEnterpriseUsersAddTeamResponse.ProtoReflect.Descriptor instead.
func (*TeamsEnterpriseUsersAddTeamResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{121}
}

func (x *TeamsEnterpriseUsersAddTeamResponse) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *TeamsEnterpriseUsersAddTeamResponse) GetUsers() []*TeamsEnterpriseUsersAddUserResponse {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TeamsEnterpriseUsersAddTeamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TeamsEnterpriseUsersAddTeamResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TeamsEnterpriseUsersAddTeamResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *TeamsEnterpriseUsersAddTeamResponse) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

type TeamsEnterpriseUsersAddUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Revision         int64  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Success          bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Message          string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	ResultCode       string `protobuf:"bytes,5,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	AdditionalInfo   string `protobuf:"bytes,6,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"`
}

func (x *TeamsEnterpriseUsersAddUserResponse) Reset() {
	*x = TeamsEnterpriseUsersAddUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsEnterpriseUsersAddUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsEnterpriseUsersAddUserResponse) ProtoMessage() {}

func (x *TeamsEnterpriseUsersAddUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsEnterpriseUsersAddUserResponse.ProtoReflect.Descriptor instead.
func (*TeamsEnterpriseUsersAddUserResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{122}
}

func (x *TeamsEnterpriseUsersAddUserResponse) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *TeamsEnterpriseUsersAddUserResponse) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *TeamsEnterpriseUsersAddUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TeamsEnterpriseUsersAddUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TeamsEnterpriseUsersAddUserResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *TeamsEnterpriseUsersAddUserResponse) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

type DomainAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain  string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Alias   string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"` //0-Success else Error
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DomainAlias) Reset() {
	*x = DomainAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainAlias) ProtoMessage() {}

func (x *DomainAlias) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainAlias.ProtoReflect.Descriptor instead.
func (*DomainAlias) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{123}
}

func (x *DomainAlias) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainAlias) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *DomainAlias) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DomainAlias) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DomainAliasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainAlias []*DomainAlias `protobuf:"bytes,1,rep,name=domainAlias,proto3" json:"domainAlias,omitempty"`
}

func (x *DomainAliasRequest) Reset() {
	*x = DomainAliasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainAliasRequest) ProtoMessage() {}

func (x *DomainAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainAliasRequest.ProtoReflect.Descriptor instead.
func (*DomainAliasRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{124}
}

func (x *DomainAliasRequest) GetDomainAlias() []*DomainAlias {
	if x != nil {
		return x.DomainAlias
	}
	return nil
}

type DomainAliasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainAlias []*DomainAlias `protobuf:"bytes,1,rep,name=domainAlias,proto3" json:"domainAlias,omitempty"`
}

func (x *DomainAliasResponse) Reset() {
	*x = DomainAliasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainAliasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainAliasResponse) ProtoMessage() {}

func (x *DomainAliasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainAliasResponse.ProtoReflect.Descriptor instead.
func (*DomainAliasResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{125}
}

func (x *DomainAliasResponse) GetDomainAlias() []*DomainAlias {
	if x != nil {
		return x.DomainAlias
	}
	return nil
}

type EnterpriseUsersProvisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users         []*EnterpriseUsersProvision `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	ClientVersion string                      `protobuf:"bytes,2,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
}

func (x *EnterpriseUsersProvisionRequest) Reset() {
	*x = EnterpriseUsersProvisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUsersProvisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUsersProvisionRequest) ProtoMessage() {}

func (x *EnterpriseUsersProvisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUsersProvisionRequest.ProtoReflect.Descriptor instead.
func (*EnterpriseUsersProvisionRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{126}
}

func (x *EnterpriseUsersProvisionRequest) GetUsers() []*EnterpriseUsersProvision {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *EnterpriseUsersProvisionRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type EnterpriseUsersProvision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from enterprise_user_add
	EnterpriseUserId int64            `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Username         string           `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	NodeId           int64            `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	EncryptedData    string           `protobuf:"bytes,4,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	KeyType          EncryptedKeyType `protobuf:"varint,5,opt,name=keyType,proto3,enum=Enterprise.EncryptedKeyType" json:"keyType,omitempty"`
	FullName         string           `protobuf:"bytes,6,opt,name=fullName,proto3" json:"fullName,omitempty"`
	JobTitle         string           `protobuf:"bytes,7,opt,name=jobTitle,proto3" json:"jobTitle,omitempty"`
	// from set_enterprise_user_data_key_by_admin
	EnterpriseUsersDataKey []byte `protobuf:"bytes,8,opt,name=enterpriseUsersDataKey,proto3" json:"enterpriseUsersDataKey,omitempty"`
	// from APIRequest.CreateUserRequest, used in /authentication/request_create_user
	AuthVerifier           []byte `protobuf:"bytes,9,opt,name=authVerifier,proto3" json:"authVerifier,omitempty"`
	EncryptionParams       []byte `protobuf:"bytes,10,opt,name=encryptionParams,proto3" json:"encryptionParams,omitempty"`
	RsaPublicKey           []byte `protobuf:"bytes,11,opt,name=rsaPublicKey,proto3" json:"rsaPublicKey,omitempty"`
	RsaEncryptedPrivateKey []byte `protobuf:"bytes,12,opt,name=rsaEncryptedPrivateKey,proto3" json:"rsaEncryptedPrivateKey,omitempty"`
	EccPublicKey           []byte `protobuf:"bytes,13,opt,name=eccPublicKey,proto3" json:"eccPublicKey,omitempty"`
	EccEncryptedPrivateKey []byte `protobuf:"bytes,14,opt,name=eccEncryptedPrivateKey,proto3" json:"eccEncryptedPrivateKey,omitempty"`
	EncryptedDeviceToken   []byte `protobuf:"bytes,15,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	EncryptedClientKey     []byte `protobuf:"bytes,16,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`
}

func (x *EnterpriseUsersProvision) Reset() {
	*x = EnterpriseUsersProvision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUsersProvision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUsersProvision) ProtoMessage() {}

func (x *EnterpriseUsersProvision) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUsersProvision.ProtoReflect.Descriptor instead.
func (*EnterpriseUsersProvision) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{127}
}

func (x *EnterpriseUsersProvision) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUsersProvision) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EnterpriseUsersProvision) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *EnterpriseUsersProvision) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

func (x *EnterpriseUsersProvision) GetKeyType() EncryptedKeyType {
	if x != nil {
		return x.KeyType
	}
	return EncryptedKeyType_KT_NO_KEY
}

func (x *EnterpriseUsersProvision) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *EnterpriseUsersProvision) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *EnterpriseUsersProvision) GetEnterpriseUsersDataKey() []byte {
	if x != nil {
		return x.EnterpriseUsersDataKey
	}
	return nil
}

func (x *EnterpriseUsersProvision) GetAuthVerifier() []byte {
	if x != nil {
		return x.AuthVerifier
	}
	return nil
}

func (x *EnterpriseUsersProvision) GetEncryptionParams() []byte {
	if x != nil {
		return x.EncryptionParams
	}
	return nil
}

func (x *EnterpriseUsersProvision) GetRsaPublicKey() []byte {
	if x != nil {
		return x.RsaPublicKey
	}
	return nil
}

func (x *EnterpriseUsersProvision) GetRsaEncryptedPrivateKey() []byte {
	if x != nil {
		return x.RsaEncryptedPrivateKey
	}
	return nil
}

func (x *EnterpriseUsersProvision) GetEccPublicKey() []byte {
	if x != nil {
		return x.EccPublicKey
	}
	return nil
}

func (x *EnterpriseUsersProvision) GetEccEncryptedPrivateKey() []byte {
	if x != nil {
		return x.EccEncryptedPrivateKey
	}
	return nil
}

func (x *EnterpriseUsersProvision) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *EnterpriseUsersProvision) GetEncryptedClientKey() []byte {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

type EnterpriseUsersProvisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*EnterpriseUsersProvisionResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *EnterpriseUsersProvisionResponse) Reset() {
	*x = EnterpriseUsersProvisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUsersProvisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUsersProvisionResponse) ProtoMessage() {}

func (x *EnterpriseUsersProvisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUsersProvisionResponse.ProtoReflect.Descriptor instead.
func (*EnterpriseUsersProvisionResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{128}
}

func (x *EnterpriseUsersProvisionResponse) GetResults() []*EnterpriseUsersProvisionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type EnterpriseUsersProvisionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Code             string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Message          string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	AdditionalInfo   string `protobuf:"bytes,4,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"`
}

func (x *EnterpriseUsersProvisionResult) Reset() {
	*x = EnterpriseUsersProvisionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUsersProvisionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUsersProvisionResult) ProtoMessage() {}

func (x *EnterpriseUsersProvisionResult) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUsersProvisionResult.ProtoReflect.Descriptor instead.
func (*EnterpriseUsersProvisionResult) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{129}
}

func (x *EnterpriseUsersProvisionResult) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUsersProvisionResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EnterpriseUsersProvisionResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EnterpriseUsersProvisionResult) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

type EnterpriseUsersAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users         []*EnterpriseUsersAdd `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	ClientVersion string                `protobuf:"bytes,2,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
}

func (x *EnterpriseUsersAddRequest) Reset() {
	*x = EnterpriseUsersAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUsersAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUsersAddRequest) ProtoMessage() {}

func (x *EnterpriseUsersAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUsersAddRequest.ProtoReflect.Descriptor instead.
func (*EnterpriseUsersAddRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{130}
}

func (x *EnterpriseUsersAddRequest) GetUsers() []*EnterpriseUsersAdd {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *EnterpriseUsersAddRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type EnterpriseUsersAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId    int64            `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Username            string           `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	NodeId              int64            `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	EncryptedData       string           `protobuf:"bytes,4,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	KeyType             EncryptedKeyType `protobuf:"varint,5,opt,name=keyType,proto3,enum=Enterprise.EncryptedKeyType" json:"keyType,omitempty"`
	FullName            string           `protobuf:"bytes,6,opt,name=fullName,proto3" json:"fullName,omitempty"`
	JobTitle            string           `protobuf:"bytes,7,opt,name=jobTitle,proto3" json:"jobTitle,omitempty"`
	SuppressEmailInvite bool             `protobuf:"varint,8,opt,name=suppressEmailInvite,proto3" json:"suppressEmailInvite,omitempty"`
	InviteeLocale       string           `protobuf:"bytes,9,opt,name=inviteeLocale,proto3" json:"inviteeLocale,omitempty"`
	Move                bool             `protobuf:"varint,10,opt,name=move,proto3" json:"move,omitempty"`
	RoleId              int64            `protobuf:"varint,11,opt,name=roleId,proto3" json:"roleId,omitempty"`
}

func (x *EnterpriseUsersAdd) Reset() {
	*x = EnterpriseUsersAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUsersAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUsersAdd) ProtoMessage() {}

func (x *EnterpriseUsersAdd) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUsersAdd.ProtoReflect.Descriptor instead.
func (*EnterpriseUsersAdd) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{131}
}

func (x *EnterpriseUsersAdd) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUsersAdd) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EnterpriseUsersAdd) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *EnterpriseUsersAdd) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

func (x *EnterpriseUsersAdd) GetKeyType() EncryptedKeyType {
	if x != nil {
		return x.KeyType
	}
	return EncryptedKeyType_KT_NO_KEY
}

func (x *EnterpriseUsersAdd) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *EnterpriseUsersAdd) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *EnterpriseUsersAdd) GetSuppressEmailInvite() bool {
	if x != nil {
		return x.SuppressEmailInvite
	}
	return false
}

func (x *EnterpriseUsersAdd) GetInviteeLocale() string {
	if x != nil {
		return x.InviteeLocale
	}
	return ""
}

func (x *EnterpriseUsersAdd) GetMove() bool {
	if x != nil {
		return x.Move
	}
	return false
}

func (x *EnterpriseUsersAdd) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

type EnterpriseUsersAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results        []*EnterpriseUsersAddResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Success        bool                        `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Code           string                      `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                      `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	AdditionalInfo string                      `protobuf:"bytes,5,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"`
}

func (x *EnterpriseUsersAddResponse) Reset() {
	*x = EnterpriseUsersAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUsersAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUsersAddResponse) ProtoMessage() {}

func (x *EnterpriseUsersAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUsersAddResponse.ProtoReflect.Descriptor instead.
func (*EnterpriseUsersAddResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{132}
}

func (x *EnterpriseUsersAddResponse) GetResults() []*EnterpriseUsersAddResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *EnterpriseUsersAddResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EnterpriseUsersAddResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EnterpriseUsersAddResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EnterpriseUsersAddResponse) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

type EnterpriseUsersAddResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Success          bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	VerificationCode string `protobuf:"bytes,3,opt,name=verificationCode,proto3" json:"verificationCode,omitempty"`
	Code             string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Message          string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	AdditionalInfo   string `protobuf:"bytes,6,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"`
}

func (x *EnterpriseUsersAddResult) Reset() {
	*x = EnterpriseUsersAddResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUsersAddResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUsersAddResult) ProtoMessage() {}

func (x *EnterpriseUsersAddResult) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUsersAddResult.ProtoReflect.Descriptor instead.
func (*EnterpriseUsersAddResult) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{133}
}

func (x *EnterpriseUsersAddResult) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUsersAddResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EnterpriseUsersAddResult) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *EnterpriseUsersAddResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EnterpriseUsersAddResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EnterpriseUsersAddResult) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

type UpdateMSPPermitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspEnterpriseId        int32    `protobuf:"varint,1,opt,name=mspEnterpriseId,proto3" json:"mspEnterpriseId,omitempty"`
	MaxAllowedLicenses     int32    `protobuf:"varint,2,opt,name=maxAllowedLicenses,proto3" json:"maxAllowedLicenses,omitempty"` // obsolete in favor of allowUnlimitedLicenses
	AllowedMcProducts      []string `protobuf:"bytes,3,rep,name=allowedMcProducts,proto3" json:"allowedMcProducts,omitempty"`
	AllowedAddOns          []string `protobuf:"bytes,4,rep,name=allowedAddOns,proto3" json:"allowedAddOns,omitempty"`
	MaxFilePlanType        string   `protobuf:"bytes,5,opt,name=maxFilePlanType,proto3" json:"maxFilePlanType,omitempty"`
	AllowUnlimitedLicenses bool     `protobuf:"varint,6,opt,name=allowUnlimitedLicenses,proto3" json:"allowUnlimitedLicenses,omitempty"`
}

func (x *UpdateMSPPermitsRequest) Reset() {
	*x = UpdateMSPPermitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMSPPermitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMSPPermitsRequest) ProtoMessage() {}

func (x *UpdateMSPPermitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMSPPermitsRequest.ProtoReflect.Descriptor instead.
func (*UpdateMSPPermitsRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{134}
}

func (x *UpdateMSPPermitsRequest) GetMspEnterpriseId() int32 {
	if x != nil {
		return x.MspEnterpriseId
	}
	return 0
}

func (x *UpdateMSPPermitsRequest) GetMaxAllowedLicenses() int32 {
	if x != nil {
		return x.MaxAllowedLicenses
	}
	return 0
}

func (x *UpdateMSPPermitsRequest) GetAllowedMcProducts() []string {
	if x != nil {
		return x.AllowedMcProducts
	}
	return nil
}

func (x *UpdateMSPPermitsRequest) GetAllowedAddOns() []string {
	if x != nil {
		return x.AllowedAddOns
	}
	return nil
}

func (x *UpdateMSPPermitsRequest) GetMaxFilePlanType() string {
	if x != nil {
		return x.MaxFilePlanType
	}
	return ""
}

func (x *UpdateMSPPermitsRequest) GetAllowUnlimitedLicenses() bool {
	if x != nil {
		return x.AllowUnlimitedLicenses
	}
	return false
}

type DeleteEnterpriseUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserIds []int64 `protobuf:"varint,1,rep,packed,name=enterpriseUserIds,proto3" json:"enterpriseUserIds,omitempty"`
}

func (x *DeleteEnterpriseUsersRequest) Reset() {
	*x = DeleteEnterpriseUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEnterpriseUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnterpriseUsersRequest) ProtoMessage() {}

func (x *DeleteEnterpriseUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnterpriseUsersRequest.ProtoReflect.Descriptor instead.
func (*DeleteEnterpriseUsersRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{135}
}

func (x *DeleteEnterpriseUsersRequest) GetEnterpriseUserIds() []int64 {
	if x != nil {
		return x.EnterpriseUserIds
	}
	return nil
}

type DeleteEnterpriseUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64                       `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`                         //the enterprise user id
	Status           DeleteEnterpriseUsersResult `protobuf:"varint,2,opt,name=status,proto3,enum=Enterprise.DeleteEnterpriseUsersResult" json:"status,omitempty"` //the delete result
}

func (x *DeleteEnterpriseUserStatus) Reset() {
	*x = DeleteEnterpriseUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEnterpriseUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnterpriseUserStatus) ProtoMessage() {}

func (x *DeleteEnterpriseUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnterpriseUserStatus.ProtoReflect.Descriptor instead.
func (*DeleteEnterpriseUserStatus) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{136}
}

func (x *DeleteEnterpriseUserStatus) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *DeleteEnterpriseUserStatus) GetStatus() DeleteEnterpriseUsersResult {
	if x != nil {
		return x.Status
	}
	return DeleteEnterpriseUsersResult_SUCCESS
}

type DeleteEnterpriseUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteStatus []*DeleteEnterpriseUserStatus `protobuf:"bytes,1,rep,name=deleteStatus,proto3" json:"deleteStatus,omitempty"`
}

func (x *DeleteEnterpriseUsersResponse) Reset() {
	*x = DeleteEnterpriseUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEnterpriseUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnterpriseUsersResponse) ProtoMessage() {}

func (x *DeleteEnterpriseUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnterpriseUsersResponse.ProtoReflect.Descriptor instead.
func (*DeleteEnterpriseUsersResponse) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{137}
}

func (x *DeleteEnterpriseUsersResponse) GetDeleteStatus() []*DeleteEnterpriseUserStatus {
	if x != nil {
		return x.DeleteStatus
	}
	return nil
}

type ClearSecurityDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId []int64               `protobuf:"varint,1,rep,packed,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	AllUsers         bool                  `protobuf:"varint,2,opt,name=allUsers,proto3" json:"allUsers,omitempty"`
	Type             ClearSecurityDataType `protobuf:"varint,3,opt,name=type,proto3,enum=Enterprise.ClearSecurityDataType" json:"type,omitempty"`
}

func (x *ClearSecurityDataRequest) Reset() {
	*x = ClearSecurityDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enterprise_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearSecurityDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearSecurityDataRequest) ProtoMessage() {}

func (x *ClearSecurityDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enterprise_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearSecurityDataRequest.ProtoReflect.Descriptor instead.
func (*ClearSecurityDataRequest) Descriptor() ([]byte, []int) {
	return file_enterprise_proto_rawDescGZIP(), []int{138}
}

func (x *ClearSecurityDataRequest) GetEnterpriseUserId() []int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return nil
}

func (x *ClearSecurityDataRequest) GetAllUsers() bool {
	if x != nil {
		return x.AllUsers
	}
	return false
}

func (x *ClearSecurityDataRequest) GetType() ClearSecurityDataType {
	if x != nil {
		return x.Type
	}
	return ClearSecurityDataType_RECALCULATE_SUMMARY_REPORT
}

var File_enterprise_proto protoreflect.FileDescriptor

var file_enterprise_proto_rawDesc = []byte{
	0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x22, 0xc1,
	0x01, 0x0a, 0x18, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a,
	0x1d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x55, 0x69, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x5b, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x11, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x19, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x22, 0x75, 0x0a, 0x17, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x0f,
	0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x12, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xd1,
	0x02, 0x0a, 0x1b, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x3f, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x65,
	0x79, 0x73, 0x22, 0x3d, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69,
	0x64, 0x22, 0x3e, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x22, 0x9a, 0x05, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x72, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x72, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0e,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x22, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x22, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x72,
	0x65, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x72, 0x6f, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x65, 0x63, 0x63, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x65, 0x63, 0x63, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x22, 0x38,
	0x0a, 0x1a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x19, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x6f, 0x4d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69,
	0x64, 0x22, 0x75, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x4d, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x19, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x19, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd6, 0x01,
	0x0a, 0x18, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6e, 0x79, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x6d, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0xcf, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x22, 0x4f, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x35, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3b, 0x0a, 0x13, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x22, 0x94, 0x03, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x75, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x73, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x73, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x14, 0x73, 0x73, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x14, 0x73, 0x73, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x15, 0x73, 0x73, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x15, 0x73, 0x73, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12,
	0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x66, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x66, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x60, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x15, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63,
	0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x15, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x4e, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x73, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65,
	0x79, 0x22, 0x6c, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x59, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x52, 0x0a, 0x0b, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x08, 0x6d, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x4d, 0x73, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xb3,
	0x03, 0x0a, 0x07, 0x4d, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x4f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x52, 0x06, 0x61, 0x64,
	0x64, 0x4f, 0x6e, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x63, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x63, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x73, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x73, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x52, 0x06, 0x61,
	0x64, 0x64, 0x4f, 0x6e, 0x73, 0x22, 0x7b, 0x0a, 0x07, 0x4d, 0x53, 0x50, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x65, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x73, 0x68, 0x22, 0x58, 0x0a, 0x0a, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa0, 0x02, 0x0a,
	0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x65, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb3, 0x01, 0x0a, 0x09, 0x4d, 0x43, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x64, 0x64, 0x4f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x64,
	0x4f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x0a, 0x4d, 0x53, 0x50, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x4f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x63,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x4d, 0x43, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x6d, 0x63, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xb0, 0x06, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x61,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x65, 0x61, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2d, 0x0a, 0x07, 0x6d, 0x73, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x4d, 0x53,
	0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x6d, 0x73, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x34,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x4d,
	0x53, 0x50, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x52, 0x06,
	0x61, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x4d, 0x53, 0x50, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x4c, 0x6f, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x4d, 0x53,
	0x50, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x73,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x4d, 0x53, 0x50, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0a, 0x6d, 0x73, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x06, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x61, 0x6e, 0x49, 0x70, 0x45, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77,
	0x61, 0x6e, 0x49, 0x70, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x49, 0x70, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x49, 0x70,
	0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x04, 0x53, 0x63, 0x69, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63,
	0x69, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x68, 0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x22, 0x78, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xe2,
	0x01, 0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x75, 0x6e,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x64,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x13, 0x75, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x71, 0x0a, 0x0d, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x53, 0x73, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x73, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x73, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xaf, 0x03, 0x0a, 0x1d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x0e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8c, 0x02, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x3d, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x22, 0x41, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x22, 0xf1, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x43, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x43, 0x4b, 0x65, 0x79, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x45, 0x63, 0x63, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x45, 0x63, 0x63, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22,
	0x3f, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0x36, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x72, 0x65,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x12, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x73, 0x70,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x4d, 0x73, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6d,
	0x73, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x72, 0x65,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x07, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x7d, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x06, 0x4d, 0x73, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d,
	0x73, 0x70, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x70, 0x54, 0x72, 0x65,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x4d, 0x73, 0x70, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x73,
	0x70, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc8, 0x01, 0x0a,
	0x0e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x73, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x16, 0x72, 0x73, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x65, 0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x16, 0x65, 0x63, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x16, 0x65, 0x63, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x5c, 0x0a, 0x07, 0x54, 0x72, 0x65, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x36, 0x0a, 0x1c,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xfc, 0x01, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x48, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x74, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65, 0x0a, 0x1d, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x22, 0x5d, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x22, 0x51, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x20, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x5e, 0x0a, 0x2a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x49, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x49, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xe0, 0x01, 0x0a, 0x21, 0x50, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0x6d, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xbd, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22,
	0xac, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xae,
	0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x67, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x41, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0xd3, 0x02, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x41, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x55, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x86, 0x07,
	0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x55, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x4a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x35, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x66, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x65, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9d,
	0x03, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x3e,
	0x0a, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f,
	0x66, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c,
	0x0a, 0x21, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x45, 0x64, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x57, 0x68, 0x69, 0x6c, 0x65, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x13,
	0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x72, 0x6f, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x88,
	0x01, 0x0a, 0x12, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x66,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x65, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x58, 0x0a,
	0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8b,
	0x01, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x22, 0x57, 0x0a, 0x0d,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x78,
	0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x17, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x22, 0x58, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x73, 0x22, 0x3a,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x43, 0x0a, 0x1f, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x55, 0x69, 0x64,
	0x22, 0x48, 0x0a, 0x24, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x55, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x0c, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x22, 0x7d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x4d, 0x53, 0x50, 0x4d,
	0x43, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x4d, 0x53, 0x50, 0x4d, 0x43, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73,
	0x49, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x49, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4a,
	0x0a, 0x20, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6f,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x60, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x1e, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x22, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x55, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x22, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0x84, 0x01, 0x0a,
	0x1f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x23, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x23, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x12, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x22, 0x50, 0x0a, 0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1f, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x05, 0x0a,
	0x18, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x73, 0x61, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72,
	0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x72,
	0x73, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x72, 0x73, 0x61,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x63, 0x63, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x63, 0x63, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x63, 0x63, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x22, 0x68, 0x0a, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa2, 0x01,
	0x0a, 0x1e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x77, 0x0a, 0x19, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x03, 0x0a, 0x12,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41,
	0x64, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xcc, 0x01, 0x0a,
	0x1a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x18,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xa9, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x53, 0x50, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x73, 0x70, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x73, 0x70, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4d, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x4f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6b, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a,
	0x1b, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53,
	0x41, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x43, 0x43, 0x10, 0x01, 0x2a, 0x3d, 0x0a, 0x0e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x4d, 0x53, 0x50, 0x10, 0x01, 0x2a, 0x73, 0x0a, 0x18, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x2a, 0xe1, 0x03, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x41, 0x4d, 0x53,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49,
	0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x10, 0x09, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x10, 0x0b, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x4e, 0x49, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45,
	0x53, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x49, 0x4d, 0x53, 0x10, 0x0e, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x53, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x53, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x12, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x14, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x45, 0x53, 0x10,
	0x15, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x45, 0x52, 0x49, 0x41, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x10, 0x17, 0x2a, 0x22, 0x0a, 0x0b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x2a, 0x93, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x47, 0x43, 0x4d, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x43, 0x43, 0x10, 0x04, 0x2a, 0x3a,
	0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x01, 0x2a, 0xa5, 0x01, 0x0a, 0x10, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x4b, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x4b, 0x54, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x4b, 0x54, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x4b, 0x54, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x47, 0x43, 0x4d, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x4b, 0x54, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x43, 0x43,
	0x10, 0x04, 0x2a, 0x95, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x45, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0x49, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x02, 0x2a, 0x33, 0x0a, 0x0c,
	0x54, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x02, 0x2a, 0x65, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a,
	0x21, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x43, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x8f, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4e, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x52, 0x49,
	0x44, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x87, 0x01, 0x0a, 0x15, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x25, 0x0a,
	0x21, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x02, 0x42, 0x26, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enterprise_proto_rawDescOnce sync.Once
	file_enterprise_proto_rawDescData = file_enterprise_proto_rawDesc
)

func file_enterprise_proto_rawDescGZIP() []byte {
	file_enterprise_proto_rawDescOnce.Do(func() {
		file_enterprise_proto_rawDescData = protoimpl.X.CompressGZIP(file_enterprise_proto_rawDescData)
	})
	return file_enterprise_proto_rawDescData
}

var file_enterprise_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_enterprise_proto_msgTypes = make([]protoimpl.MessageInfo, 139)
var file_enterprise_proto_goTypes = []interface{}{
	(KeyType)(0),                                 // 0: Enterprise.KeyType
	(EnterpriseType)(0),                          // 1: Enterprise.EnterpriseType
	(TransferAcceptanceStatus)(0),                // 2: Enterprise.TransferAcceptanceStatus
	(EnterpriseDataEntity)(0),                    // 3: Enterprise.EnterpriseDataEntity
	(CacheStatus)(0),                             // 4: Enterprise.CacheStatus
	(BackupKeyType)(0),                           // 5: Enterprise.BackupKeyType
	(BackupUserDataKeyType)(0),                   // 6: Enterprise.BackupUserDataKeyType
	(EncryptedKeyType)(0),                        // 7: Enterprise.EncryptedKeyType
	(EnterpriseFlagType)(0),                      // 8: Enterprise.EnterpriseFlagType
	(UserUpdateStatus)(0),                        // 9: Enterprise.UserUpdateStatus
	(AuditUserStatus)(0),                         // 10: Enterprise.AuditUserStatus
	(TeamUserType)(0),                            // 11: Enterprise.TeamUserType
	(AppClientType)(0),                           // 12: Enterprise.AppClientType
	(DeleteEnterpriseUsersResult)(0),             // 13: Enterprise.DeleteEnterpriseUsersResult
	(ClearSecurityDataType)(0),                   // 14: Enterprise.ClearSecurityDataType
	(*EnterpriseKeyPairRequest)(nil),             // 15: Enterprise.EnterpriseKeyPairRequest
	(*GetTeamMemberRequest)(nil),                 // 16: Enterprise.GetTeamMemberRequest
	(*EnterpriseUser)(nil),                       // 17: Enterprise.EnterpriseUser
	(*GetTeamMemberResponse)(nil),                // 18: Enterprise.GetTeamMemberResponse
	(*EnterpriseUserIds)(nil),                    // 19: Enterprise.EnterpriseUserIds
	(*EnterprisePersonalAccount)(nil),            // 20: Enterprise.EnterprisePersonalAccount
	(*EncryptedTeamKeyRequest)(nil),              // 21: Enterprise.EncryptedTeamKeyRequest
	(*ReEncryptedData)(nil),                      // 22: Enterprise.ReEncryptedData
	(*ReEncryptedRoleKey)(nil),                   // 23: Enterprise.ReEncryptedRoleKey
	(*NodeToManagedCompanyRequest)(nil),          // 24: Enterprise.NodeToManagedCompanyRequest
	(*RoleTeam)(nil),                             // 25: Enterprise.RoleTeam
	(*RoleTeams)(nil),                            // 26: Enterprise.RoleTeams
	(*EnterpriseRegistration)(nil),               // 27: Enterprise.EnterpriseRegistration
	(*DomainPasswordRulesRequest)(nil),           // 28: Enterprise.DomainPasswordRulesRequest
	(*DomainPasswordRulesFields)(nil),            // 29: Enterprise.DomainPasswordRulesFields
	(*LoginToMcRequest)(nil),                     // 30: Enterprise.LoginToMcRequest
	(*LoginToMcResponse)(nil),                    // 31: Enterprise.LoginToMcResponse
	(*DomainPasswordRulesResponse)(nil),          // 32: Enterprise.DomainPasswordRulesResponse
	(*ApproveUserDeviceRequest)(nil),             // 33: Enterprise.ApproveUserDeviceRequest
	(*ApproveUserDeviceResponse)(nil),            // 34: Enterprise.ApproveUserDeviceResponse
	(*ApproveUserDevicesRequest)(nil),            // 35: Enterprise.ApproveUserDevicesRequest
	(*ApproveUserDevicesResponse)(nil),           // 36: Enterprise.ApproveUserDevicesResponse
	(*EnterpriseUserDataKey)(nil),                // 37: Enterprise.EnterpriseUserDataKey
	(*EnterpriseUserDataKeys)(nil),               // 38: Enterprise.EnterpriseUserDataKeys
	(*EnterpriseDataRequest)(nil),                // 39: Enterprise.EnterpriseDataRequest
	(*SpecialProvisioning)(nil),                  // 40: Enterprise.SpecialProvisioning
	(*GeneralDataEntity)(nil),                    // 41: Enterprise.GeneralDataEntity
	(*Node)(nil),                                 // 42: Enterprise.Node
	(*Role)(nil),                                 // 43: Enterprise.Role
	(*User)(nil),                                 // 44: Enterprise.User
	(*UserAlias)(nil),                            // 45: Enterprise.UserAlias
	(*ComplianceReportMetaData)(nil),             // 46: Enterprise.ComplianceReportMetaData
	(*ManagedNode)(nil),                          // 47: Enterprise.ManagedNode
	(*UserManagedNode)(nil),                      // 48: Enterprise.UserManagedNode
	(*UserPrivilege)(nil),                        // 49: Enterprise.UserPrivilege
	(*RoleUser)(nil),                             // 50: Enterprise.RoleUser
	(*RolePrivilege)(nil),                        // 51: Enterprise.RolePrivilege
	(*RoleEnforcement)(nil),                      // 52: Enterprise.RoleEnforcement
	(*Team)(nil),                                 // 53: Enterprise.Team
	(*TeamUser)(nil),                             // 54: Enterprise.TeamUser
	(*GetDistributorInfoResponse)(nil),           // 55: Enterprise.GetDistributorInfoResponse
	(*Distributor)(nil),                          // 56: Enterprise.Distributor
	(*MspInfo)(nil),                              // 57: Enterprise.MspInfo
	(*ManagedCompany)(nil),                       // 58: Enterprise.ManagedCompany
	(*MSPPool)(nil),                              // 59: Enterprise.MSPPool
	(*MSPContact)(nil),                           // 60: Enterprise.MSPContact
	(*LicenseAddOn)(nil),                         // 61: Enterprise.LicenseAddOn
	(*MCDefault)(nil),                            // 62: Enterprise.MCDefault
	(*MSPPermits)(nil),                           // 63: Enterprise.MSPPermits
	(*License)(nil),                              // 64: Enterprise.License
	(*Bridge)(nil),                               // 65: Enterprise.Bridge
	(*Scim)(nil),                                 // 66: Enterprise.Scim
	(*EmailProvision)(nil),                       // 67: Enterprise.EmailProvision
	(*QueuedTeam)(nil),                           // 68: Enterprise.QueuedTeam
	(*QueuedTeamUser)(nil),                       // 69: Enterprise.QueuedTeamUser
	(*TeamsAddResult)(nil),                       // 70: Enterprise.TeamsAddResult
	(*TeamAddResult)(nil),                        // 71: Enterprise.TeamAddResult
	(*SsoService)(nil),                           // 72: Enterprise.SsoService
	(*ReportFilterUser)(nil),                     // 73: Enterprise.ReportFilterUser
	(*DeviceRequestForAdminApproval)(nil),        // 74: Enterprise.DeviceRequestForAdminApproval
	(*EnterpriseData)(nil),                       // 75: Enterprise.EnterpriseData
	(*EnterpriseDataResponse)(nil),               // 76: Enterprise.EnterpriseDataResponse
	(*BackupRequest)(nil),                        // 77: Enterprise.BackupRequest
	(*BackupRecord)(nil),                         // 78: Enterprise.BackupRecord
	(*BackupKey)(nil),                            // 79: Enterprise.BackupKey
	(*BackupUser)(nil),                           // 80: Enterprise.BackupUser
	(*BackupResponse)(nil),                       // 81: Enterprise.BackupResponse
	(*BackupFile)(nil),                           // 82: Enterprise.BackupFile
	(*BackupsResponse)(nil),                      // 83: Enterprise.BackupsResponse
	(*GetEnterpriseDataKeysRequest)(nil),         // 84: Enterprise.GetEnterpriseDataKeysRequest
	(*GetEnterpriseDataKeysResponse)(nil),        // 85: Enterprise.GetEnterpriseDataKeysResponse
	(*RoleKey)(nil),                              // 86: Enterprise.RoleKey
	(*MspKey)(nil),                               // 87: Enterprise.MspKey
	(*EnterpriseKeys)(nil),                       // 88: Enterprise.EnterpriseKeys
	(*TreeKey)(nil),                              // 89: Enterprise.TreeKey
	(*SharedRecordResponse)(nil),                 // 90: Enterprise.SharedRecordResponse
	(*SharedRecordEvent)(nil),                    // 91: Enterprise.SharedRecordEvent
	(*SetRestrictVisibilityRequest)(nil),         // 92: Enterprise.SetRestrictVisibilityRequest
	(*UserAddRequest)(nil),                       // 93: Enterprise.UserAddRequest
	(*UserUpdateRequest)(nil),                    // 94: Enterprise.UserUpdateRequest
	(*UserUpdate)(nil),                           // 95: Enterprise.UserUpdate
	(*UserUpdateResponse)(nil),                   // 96: Enterprise.UserUpdateResponse
	(*UserUpdateResult)(nil),                     // 97: Enterprise.UserUpdateResult
	(*ComplianceRecordOwnersRequest)(nil),        // 98: Enterprise.ComplianceRecordOwnersRequest
	(*ComplianceRecordOwnersResponse)(nil),       // 99: Enterprise.ComplianceRecordOwnersResponse
	(*RecordOwner)(nil),                          // 100: Enterprise.RecordOwner
	(*PreliminaryComplianceDataRequest)(nil),     // 101: Enterprise.PreliminaryComplianceDataRequest
	(*PreliminaryComplianceDataResponse)(nil),    // 102: Enterprise.PreliminaryComplianceDataResponse
	(*AuditUserRecord)(nil),                      // 103: Enterprise.AuditUserRecord
	(*AuditUserData)(nil),                        // 104: Enterprise.AuditUserData
	(*ComplianceReportFilters)(nil),              // 105: Enterprise.ComplianceReportFilters
	(*ComplianceReportRequest)(nil),              // 106: Enterprise.ComplianceReportRequest
	(*ComplianceReportRun)(nil),                  // 107: Enterprise.ComplianceReportRun
	(*ComplianceReportCriteriaAndFilter)(nil),    // 108: Enterprise.ComplianceReportCriteriaAndFilter
	(*ComplianceReportCriteria)(nil),             // 109: Enterprise.ComplianceReportCriteria
	(*ComplianceReportFilter)(nil),               // 110: Enterprise.ComplianceReportFilter
	(*ComplianceReportResponse)(nil),             // 111: Enterprise.ComplianceReportResponse
	(*AuditRecord)(nil),                          // 112: Enterprise.AuditRecord
	(*AuditRole)(nil),                            // 113: Enterprise.AuditRole
	(*RoleNodeManagement)(nil),                   // 114: Enterprise.RoleNodeManagement
	(*UserProfile)(nil),                          // 115: Enterprise.UserProfile
	(*RecordPermission)(nil),                     // 116: Enterprise.RecordPermission
	(*UserRecord)(nil),                           // 117: Enterprise.UserRecord
	(*AuditTeam)(nil),                            // 118: Enterprise.AuditTeam
	(*AuditTeamUser)(nil),                        // 119: Enterprise.AuditTeamUser
	(*SharedFolderRecord)(nil),                   // 120: Enterprise.SharedFolderRecord
	(*ShareAdminRecord)(nil),                     // 121: Enterprise.ShareAdminRecord
	(*SharedFolderUser)(nil),                     // 122: Enterprise.SharedFolderUser
	(*SharedFolderTeam)(nil),                     // 123: Enterprise.SharedFolderTeam
	(*GetComplianceReportRequest)(nil),           // 124: Enterprise.GetComplianceReportRequest
	(*GetComplianceReportResponse)(nil),          // 125: Enterprise.GetComplianceReportResponse
	(*ComplianceReportCriteriaRequest)(nil),      // 126: Enterprise.ComplianceReportCriteriaRequest
	(*SaveComplianceReportCriteriaResponse)(nil), // 127: Enterprise.SaveComplianceReportCriteriaResponse
	(*LinkedRecord)(nil),                         // 128: Enterprise.LinkedRecord
	(*GetSharingAdminsRequest)(nil),              // 129: Enterprise.GetSharingAdminsRequest
	(*UserProfileExt)(nil),                       // 130: Enterprise.UserProfileExt
	(*GetSharingAdminsResponse)(nil),             // 131: Enterprise.GetSharingAdminsResponse
	(*TeamsEnterpriseUsersAddRequest)(nil),       // 132: Enterprise.TeamsEnterpriseUsersAddRequest
	(*TeamsEnterpriseUsersAddTeamRequest)(nil),   // 133: Enterprise.TeamsEnterpriseUsersAddTeamRequest
	(*TeamsEnterpriseUsersAddUserRequest)(nil),   // 134: Enterprise.TeamsEnterpriseUsersAddUserRequest
	(*TeamsEnterpriseUsersAddResponse)(nil),      // 135: Enterprise.TeamsEnterpriseUsersAddResponse
	(*TeamsEnterpriseUsersAddTeamResponse)(nil),  // 136: Enterprise.TeamsEnterpriseUsersAddTeamResponse
	(*TeamsEnterpriseUsersAddUserResponse)(nil),  // 137: Enterprise.TeamsEnterpriseUsersAddUserResponse
	(*DomainAlias)(nil),                          // 138: Enterprise.DomainAlias
	(*DomainAliasRequest)(nil),                   // 139: Enterprise.DomainAliasRequest
	(*DomainAliasResponse)(nil),                  // 140: Enterprise.DomainAliasResponse
	(*EnterpriseUsersProvisionRequest)(nil),      // 141: Enterprise.EnterpriseUsersProvisionRequest
	(*EnterpriseUsersProvision)(nil),             // 142: Enterprise.EnterpriseUsersProvision
	(*EnterpriseUsersProvisionResponse)(nil),     // 143: Enterprise.EnterpriseUsersProvisionResponse
	(*EnterpriseUsersProvisionResult)(nil),       // 144: Enterprise.EnterpriseUsersProvisionResult
	(*EnterpriseUsersAddRequest)(nil),            // 145: Enterprise.EnterpriseUsersAddRequest
	(*EnterpriseUsersAdd)(nil),                   // 146: Enterprise.EnterpriseUsersAdd
	(*EnterpriseUsersAddResponse)(nil),           // 147: Enterprise.EnterpriseUsersAddResponse
	(*EnterpriseUsersAddResult)(nil),             // 148: Enterprise.EnterpriseUsersAddResult
	(*UpdateMSPPermitsRequest)(nil),              // 149: Enterprise.UpdateMSPPermitsRequest
	(*DeleteEnterpriseUsersRequest)(nil),         // 150: Enterprise.DeleteEnterpriseUsersRequest
	(*DeleteEnterpriseUserStatus)(nil),           // 151: Enterprise.DeleteEnterpriseUserStatus
	(*DeleteEnterpriseUsersResponse)(nil),        // 152: Enterprise.DeleteEnterpriseUsersResponse
	(*ClearSecurityDataRequest)(nil),             // 153: Enterprise.ClearSecurityDataRequest
}
var file_enterprise_proto_depIdxs = []int32{
	0,   // 0: Enterprise.EnterpriseKeyPairRequest.keyType:type_name -> Enterprise.KeyType
	17,  // 1: Enterprise.GetTeamMemberResponse.enterpriseUser:type_name -> Enterprise.EnterpriseUser
	22,  // 2: Enterprise.NodeToManagedCompanyRequest.nodes:type_name -> Enterprise.ReEncryptedData
	22,  // 3: Enterprise.NodeToManagedCompanyRequest.roles:type_name -> Enterprise.ReEncryptedData
	22,  // 4: Enterprise.NodeToManagedCompanyRequest.users:type_name -> Enterprise.ReEncryptedData
	23,  // 5: Enterprise.NodeToManagedCompanyRequest.roleKeys:type_name -> Enterprise.ReEncryptedRoleKey
	21,  // 6: Enterprise.NodeToManagedCompanyRequest.teamKeys:type_name -> Enterprise.EncryptedTeamKeyRequest
	25,  // 7: Enterprise.RoleTeams.role_team:type_name -> Enterprise.RoleTeam
	15,  // 8: Enterprise.EnterpriseRegistration.rsaKeyPair:type_name -> Enterprise.EnterpriseKeyPairRequest
	1,   // 9: Enterprise.EnterpriseRegistration.enterpriseType:type_name -> Enterprise.EnterpriseType
	15,  // 10: Enterprise.EnterpriseRegistration.eccKeyPair:type_name -> Enterprise.EnterpriseKeyPairRequest
	29,  // 11: Enterprise.DomainPasswordRulesResponse.domainPasswordRulesFields:type_name -> Enterprise.DomainPasswordRulesFields
	33,  // 12: Enterprise.ApproveUserDevicesRequest.deviceRequests:type_name -> Enterprise.ApproveUserDeviceRequest
	34,  // 13: Enterprise.ApproveUserDevicesResponse.deviceResponses:type_name -> Enterprise.ApproveUserDeviceResponse
	37,  // 14: Enterprise.EnterpriseUserDataKeys.keys:type_name -> Enterprise.EnterpriseUserDataKey
	40,  // 15: Enterprise.GeneralDataEntity.specialProvisioning:type_name -> Enterprise.SpecialProvisioning
	49,  // 16: Enterprise.GeneralDataEntity.userPrivilege:type_name -> Enterprise.UserPrivilege
	2,   // 17: Enterprise.User.transferAcceptanceStatus:type_name -> Enterprise.TransferAcceptanceStatus
	48,  // 18: Enterprise.UserPrivilege.userManagedNodes:type_name -> Enterprise.UserManagedNode
	56,  // 19: Enterprise.GetDistributorInfoResponse.distributors:type_name -> Enterprise.Distributor
	57,  // 20: Enterprise.Distributor.mspInfos:type_name -> Enterprise.MspInfo
	58,  // 21: Enterprise.MspInfo.managedCompanies:type_name -> Enterprise.ManagedCompany
	61,  // 22: Enterprise.MspInfo.addOns:type_name -> Enterprise.LicenseAddOn
	61,  // 23: Enterprise.ManagedCompany.addOns:type_name -> Enterprise.LicenseAddOn
	62,  // 24: Enterprise.MSPPermits.mcDefaults:type_name -> Enterprise.MCDefault
	59,  // 25: Enterprise.License.mspPool:type_name -> Enterprise.MSPPool
	60,  // 26: Enterprise.License.managedBy:type_name -> Enterprise.MSPContact
	61,  // 27: Enterprise.License.addOns:type_name -> Enterprise.LicenseAddOn
	63,  // 28: Enterprise.License.mspPermits:type_name -> Enterprise.MSPPermits
	71,  // 29: Enterprise.TeamsAddResult.successfulTeamAdd:type_name -> Enterprise.TeamAddResult
	71,  // 30: Enterprise.TeamsAddResult.unsuccessfulTeamAdd:type_name -> Enterprise.TeamAddResult
	53,  // 31: Enterprise.TeamAddResult.team:type_name -> Enterprise.Team
	3,   // 32: Enterprise.EnterpriseData.entity:type_name -> Enterprise.EnterpriseDataEntity
	4,   // 33: Enterprise.EnterpriseDataResponse.cacheStatus:type_name -> Enterprise.CacheStatus
	75,  // 34: Enterprise.EnterpriseDataResponse.data:type_name -> Enterprise.EnterpriseData
	41,  // 35: Enterprise.EnterpriseDataResponse.generalData:type_name -> Enterprise.GeneralDataEntity
	5,   // 36: Enterprise.BackupRecord.keyType:type_name -> Enterprise.BackupKeyType
	6,   // 37: Enterprise.BackupUser.dataKeyType:type_name -> Enterprise.BackupUserDataKeyType
	5,   // 38: Enterprise.BackupUser.treeKeyType:type_name -> Enterprise.BackupKeyType
	79,  // 39: Enterprise.BackupUser.backupKeys:type_name -> Enterprise.BackupKey
	80,  // 40: Enterprise.BackupResponse.users:type_name -> Enterprise.BackupUser
	78,  // 41: Enterprise.BackupResponse.records:type_name -> Enterprise.BackupRecord
	82,  // 42: Enterprise.BackupsResponse.files:type_name -> Enterprise.BackupFile
	23,  // 43: Enterprise.GetEnterpriseDataKeysResponse.reEncryptedRoleKey:type_name -> Enterprise.ReEncryptedRoleKey
	86,  // 44: Enterprise.GetEnterpriseDataKeysResponse.roleKey:type_name -> Enterprise.RoleKey
	87,  // 45: Enterprise.GetEnterpriseDataKeysResponse.mspKey:type_name -> Enterprise.MspKey
	88,  // 46: Enterprise.GetEnterpriseDataKeysResponse.enterpriseKeys:type_name -> Enterprise.EnterpriseKeys
	89,  // 47: Enterprise.GetEnterpriseDataKeysResponse.treeKey:type_name -> Enterprise.TreeKey
	7,   // 48: Enterprise.RoleKey.keyType:type_name -> Enterprise.EncryptedKeyType
	7,   // 49: Enterprise.MspKey.encryptedMspTreeKeyType:type_name -> Enterprise.EncryptedKeyType
	5,   // 50: Enterprise.TreeKey.keyTypeId:type_name -> Enterprise.BackupKeyType
	91,  // 51: Enterprise.SharedRecordResponse.events:type_name -> Enterprise.SharedRecordEvent
	7,   // 52: Enterprise.UserAddRequest.keyType:type_name -> Enterprise.EncryptedKeyType
	95,  // 53: Enterprise.UserUpdateRequest.users:type_name -> Enterprise.UserUpdate
	7,   // 54: Enterprise.UserUpdate.keyType:type_name -> Enterprise.EncryptedKeyType
	97,  // 55: Enterprise.UserUpdateResponse.users:type_name -> Enterprise.UserUpdateResult
	9,   // 56: Enterprise.UserUpdateResult.status:type_name -> Enterprise.UserUpdateStatus
	100, // 57: Enterprise.ComplianceRecordOwnersResponse.recordOwners:type_name -> Enterprise.RecordOwner
	104, // 58: Enterprise.PreliminaryComplianceDataResponse.auditUserData:type_name -> Enterprise.AuditUserData
	103, // 59: Enterprise.AuditUserData.auditUserRecords:type_name -> Enterprise.AuditUserRecord
	10,  // 60: Enterprise.AuditUserData.status:type_name -> Enterprise.AuditUserStatus
	107, // 61: Enterprise.ComplianceReportRequest.complianceReportRun:type_name -> Enterprise.ComplianceReportRun
	108, // 62: Enterprise.ComplianceReportRun.reportCriteriaAndFilter:type_name -> Enterprise.ComplianceReportCriteriaAndFilter
	109, // 63: Enterprise.ComplianceReportCriteriaAndFilter.criteria:type_name -> Enterprise.ComplianceReportCriteria
	110, // 64: Enterprise.ComplianceReportCriteriaAndFilter.filters:type_name -> Enterprise.ComplianceReportFilter
	107, // 65: Enterprise.ComplianceReportResponse.complianceReportRun:type_name -> Enterprise.ComplianceReportRun
	115, // 66: Enterprise.ComplianceReportResponse.userProfiles:type_name -> Enterprise.UserProfile
	118, // 67: Enterprise.ComplianceReportResponse.auditTeams:type_name -> Enterprise.AuditTeam
	112, // 68: Enterprise.ComplianceReportResponse.auditRecords:type_name -> Enterprise.AuditRecord
	117, // 69: Enterprise.ComplianceReportResponse.userRecords:type_name -> Enterprise.UserRecord
	120, // 70: Enterprise.ComplianceReportResponse.sharedFolderRecords:type_name -> Enterprise.SharedFolderRecord
	122, // 71: Enterprise.ComplianceReportResponse.sharedFolderUsers:type_name -> Enterprise.SharedFolderUser
	123, // 72: Enterprise.ComplianceReportResponse.sharedFolderTeams:type_name -> Enterprise.SharedFolderTeam
	119, // 73: Enterprise.ComplianceReportResponse.auditTeamUsers:type_name -> Enterprise.AuditTeamUser
	113, // 74: Enterprise.ComplianceReportResponse.auditRoles:type_name -> Enterprise.AuditRole
	128, // 75: Enterprise.ComplianceReportResponse.linkedRecords:type_name -> Enterprise.LinkedRecord
	114, // 76: Enterprise.AuditRole.roleNodeManagements:type_name -> Enterprise.RoleNodeManagement
	116, // 77: Enterprise.UserRecord.recordPermissions:type_name -> Enterprise.RecordPermission
	116, // 78: Enterprise.SharedFolderRecord.recordPermissions:type_name -> Enterprise.RecordPermission
	121, // 79: Enterprise.SharedFolderRecord.shareAdminRecords:type_name -> Enterprise.ShareAdminRecord
	130, // 80: Enterprise.GetSharingAdminsResponse.userProfileExts:type_name -> Enterprise.UserProfileExt
	133, // 81: Enterprise.TeamsEnterpriseUsersAddRequest.teams:type_name -> Enterprise.TeamsEnterpriseUsersAddTeamRequest
	134, // 82: Enterprise.TeamsEnterpriseUsersAddTeamRequest.users:type_name -> Enterprise.TeamsEnterpriseUsersAddUserRequest
	11,  // 83: Enterprise.TeamsEnterpriseUsersAddUserRequest.userType:type_name -> Enterprise.TeamUserType
	136, // 84: Enterprise.TeamsEnterpriseUsersAddResponse.teams:type_name -> Enterprise.TeamsEnterpriseUsersAddTeamResponse
	137, // 85: Enterprise.TeamsEnterpriseUsersAddTeamResponse.users:type_name -> Enterprise.TeamsEnterpriseUsersAddUserResponse
	138, // 86: Enterprise.DomainAliasRequest.domainAlias:type_name -> Enterprise.DomainAlias
	138, // 87: Enterprise.DomainAliasResponse.domainAlias:type_name -> Enterprise.DomainAlias
	142, // 88: Enterprise.EnterpriseUsersProvisionRequest.users:type_name -> Enterprise.EnterpriseUsersProvision
	7,   // 89: Enterprise.EnterpriseUsersProvision.keyType:type_name -> Enterprise.EncryptedKeyType
	144, // 90: Enterprise.EnterpriseUsersProvisionResponse.results:type_name -> Enterprise.EnterpriseUsersProvisionResult
	146, // 91: Enterprise.EnterpriseUsersAddRequest.users:type_name -> Enterprise.EnterpriseUsersAdd
	7,   // 92: Enterprise.EnterpriseUsersAdd.keyType:type_name -> Enterprise.EncryptedKeyType
	148, // 93: Enterprise.EnterpriseUsersAddResponse.results:type_name -> Enterprise.EnterpriseUsersAddResult
	13,  // 94: Enterprise.DeleteEnterpriseUserStatus.status:type_name -> Enterprise.DeleteEnterpriseUsersResult
	151, // 95: Enterprise.DeleteEnterpriseUsersResponse.deleteStatus:type_name -> Enterprise.DeleteEnterpriseUserStatus
	14,  // 96: Enterprise.ClearSecurityDataRequest.type:type_name -> Enterprise.ClearSecurityDataType
	97,  // [97:97] is the sub-list for method output_type
	97,  // [97:97] is the sub-list for method input_type
	97,  // [97:97] is the sub-list for extension type_name
	97,  // [97:97] is the sub-list for extension extendee
	0,   // [0:97] is the sub-list for field type_name
}

func init() { file_enterprise_proto_init() }
func file_enterprise_proto_init() {
	if File_enterprise_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_enterprise_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseKeyPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUserIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterprisePersonalAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedTeamKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReEncryptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReEncryptedRoleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeToManagedCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleTeams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainPasswordRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainPasswordRulesFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginToMcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginToMcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainPasswordRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveUserDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveUserDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveUserDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveUserDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUserDataKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUserDataKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialProvisioning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralDataEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceReportMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserManagedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolePrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleEnforcement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDistributorInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MspInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSPPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSPContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseAddOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSPPermits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bridge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailProvision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedTeamUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsAddResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamAddResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsoService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportFilterUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRequestForAdminApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnterpriseDataKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnterpriseDataKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MspKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedRecordEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRestrictVisibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceRecordOwnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceRecordOwnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreliminaryComplianceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreliminaryComplianceDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditUserRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceReportFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceReportRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceReportCriteriaAndFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceReportCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceReportFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleNodeManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditTeamUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareAdminRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetComplianceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetComplianceReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceReportCriteriaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveComplianceReportCriteriaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSharingAdminsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSharingAdminsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsEnterpriseUsersAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsEnterpriseUsersAddTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsEnterpriseUsersAddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsEnterpriseUsersAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsEnterpriseUsersAddTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsEnterpriseUsersAddUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainAliasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainAliasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUsersProvisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUsersProvision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUsersProvisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUsersProvisionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUsersAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUsersAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUsersAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUsersAddResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMSPPermitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEnterpriseUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEnterpriseUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEnterpriseUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enterprise_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearSecurityDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enterprise_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   139,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enterprise_proto_goTypes,
		DependencyIndexes: file_enterprise_proto_depIdxs,
		EnumInfos:         file_enterprise_proto_enumTypes,
		MessageInfos:      file_enterprise_proto_msgTypes,
	}.Build()
	File_enterprise_proto = out.File
	file_enterprise_proto_rawDesc = nil
	file_enterprise_proto_goTypes = nil
	file_enterprise_proto_depIdxs = nil
}
