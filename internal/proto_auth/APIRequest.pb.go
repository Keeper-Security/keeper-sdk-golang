// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: APIRequest.proto

package proto_auth

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	proto_enterprise "github.com/keeper-security/keeper-sdk-golang/internal/proto_enterprise"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SupportedLanguage int32

const (
	SupportedLanguage_ENGLISH           SupportedLanguage = 0
	SupportedLanguage_ARABIC            SupportedLanguage = 1
	SupportedLanguage_BRITISH           SupportedLanguage = 2
	SupportedLanguage_CHINESE           SupportedLanguage = 3
	SupportedLanguage_CHINESE_HONG_KONG SupportedLanguage = 4
	SupportedLanguage_CHINESE_TAIWAN    SupportedLanguage = 5
	SupportedLanguage_DUTCH             SupportedLanguage = 6
	SupportedLanguage_FRENCH            SupportedLanguage = 7
	SupportedLanguage_GERMAN            SupportedLanguage = 8
	SupportedLanguage_GREEK             SupportedLanguage = 9
	SupportedLanguage_HEBREW            SupportedLanguage = 10
	SupportedLanguage_ITALIAN           SupportedLanguage = 11
	SupportedLanguage_JAPANESE          SupportedLanguage = 12
	SupportedLanguage_KOREAN            SupportedLanguage = 13
	SupportedLanguage_POLISH            SupportedLanguage = 14
	SupportedLanguage_PORTUGUESE        SupportedLanguage = 15
	SupportedLanguage_PORTUGUESE_BRAZIL SupportedLanguage = 16
	SupportedLanguage_ROMANIAN          SupportedLanguage = 17
	SupportedLanguage_RUSSIAN           SupportedLanguage = 18
	SupportedLanguage_SLOVAK            SupportedLanguage = 19
	SupportedLanguage_SPANISH           SupportedLanguage = 20
)

// Enum value maps for SupportedLanguage.
var (
	SupportedLanguage_name = map[int32]string{
		0:  "ENGLISH",
		1:  "ARABIC",
		2:  "BRITISH",
		3:  "CHINESE",
		4:  "CHINESE_HONG_KONG",
		5:  "CHINESE_TAIWAN",
		6:  "DUTCH",
		7:  "FRENCH",
		8:  "GERMAN",
		9:  "GREEK",
		10: "HEBREW",
		11: "ITALIAN",
		12: "JAPANESE",
		13: "KOREAN",
		14: "POLISH",
		15: "PORTUGUESE",
		16: "PORTUGUESE_BRAZIL",
		17: "ROMANIAN",
		18: "RUSSIAN",
		19: "SLOVAK",
		20: "SPANISH",
	}
	SupportedLanguage_value = map[string]int32{
		"ENGLISH":           0,
		"ARABIC":            1,
		"BRITISH":           2,
		"CHINESE":           3,
		"CHINESE_HONG_KONG": 4,
		"CHINESE_TAIWAN":    5,
		"DUTCH":             6,
		"FRENCH":            7,
		"GERMAN":            8,
		"GREEK":             9,
		"HEBREW":            10,
		"ITALIAN":           11,
		"JAPANESE":          12,
		"KOREAN":            13,
		"POLISH":            14,
		"PORTUGUESE":        15,
		"PORTUGUESE_BRAZIL": 16,
		"ROMANIAN":          17,
		"RUSSIAN":           18,
		"SLOVAK":            19,
		"SPANISH":           20,
	}
)

func (x SupportedLanguage) Enum() *SupportedLanguage {
	p := new(SupportedLanguage)
	*p = x
	return p
}

func (x SupportedLanguage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupportedLanguage) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[0].Descriptor()
}

func (SupportedLanguage) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[0]
}

func (x SupportedLanguage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupportedLanguage.Descriptor instead.
func (SupportedLanguage) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{0}
}

type LoginType int32

const (
	LoginType_NORMAL          LoginType = 0
	LoginType_SSO             LoginType = 1
	LoginType_BIO             LoginType = 2
	LoginType_ALTERNATE       LoginType = 3
	LoginType_OFFLINE         LoginType = 4
	LoginType_FORGOT_PASSWORD LoginType = 5
)

// Enum value maps for LoginType.
var (
	LoginType_name = map[int32]string{
		0: "NORMAL",
		1: "SSO",
		2: "BIO",
		3: "ALTERNATE",
		4: "OFFLINE",
		5: "FORGOT_PASSWORD",
	}
	LoginType_value = map[string]int32{
		"NORMAL":          0,
		"SSO":             1,
		"BIO":             2,
		"ALTERNATE":       3,
		"OFFLINE":         4,
		"FORGOT_PASSWORD": 5,
	}
)

func (x LoginType) Enum() *LoginType {
	p := new(LoginType)
	*p = x
	return p
}

func (x LoginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[1].Descriptor()
}

func (LoginType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[1]
}

func (x LoginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginType.Descriptor instead.
func (LoginType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{1}
}

type DeviceStatus int32

const (
	DeviceStatus_DEVICE_NEEDS_APPROVAL   DeviceStatus = 0
	DeviceStatus_DEVICE_OK               DeviceStatus = 1
	DeviceStatus_DEVICE_DISABLED_BY_USER DeviceStatus = 2
	DeviceStatus_DEVICE_LOCKED_BY_ADMIN  DeviceStatus = 3
)

// Enum value maps for DeviceStatus.
var (
	DeviceStatus_name = map[int32]string{
		0: "DEVICE_NEEDS_APPROVAL",
		1: "DEVICE_OK",
		2: "DEVICE_DISABLED_BY_USER",
		3: "DEVICE_LOCKED_BY_ADMIN",
	}
	DeviceStatus_value = map[string]int32{
		"DEVICE_NEEDS_APPROVAL":   0,
		"DEVICE_OK":               1,
		"DEVICE_DISABLED_BY_USER": 2,
		"DEVICE_LOCKED_BY_ADMIN":  3,
	}
)

func (x DeviceStatus) Enum() *DeviceStatus {
	p := new(DeviceStatus)
	*p = x
	return p
}

func (x DeviceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[2].Descriptor()
}

func (DeviceStatus) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[2]
}

func (x DeviceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStatus.Descriptor instead.
func (DeviceStatus) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{2}
}

type LicenseStatus int32

const (
	LicenseStatus_OTHER    LicenseStatus = 0 // trial for bw
	LicenseStatus_ACTIVE   LicenseStatus = 1
	LicenseStatus_EXPIRED  LicenseStatus = 2
	LicenseStatus_DISABLED LicenseStatus = 3
)

// Enum value maps for LicenseStatus.
var (
	LicenseStatus_name = map[int32]string{
		0: "OTHER",
		1: "ACTIVE",
		2: "EXPIRED",
		3: "DISABLED",
	}
	LicenseStatus_value = map[string]int32{
		"OTHER":    0,
		"ACTIVE":   1,
		"EXPIRED":  2,
		"DISABLED": 3,
	}
)

func (x LicenseStatus) Enum() *LicenseStatus {
	p := new(LicenseStatus)
	*p = x
	return p
}

func (x LicenseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[3].Descriptor()
}

func (LicenseStatus) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[3]
}

func (x LicenseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseStatus.Descriptor instead.
func (LicenseStatus) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{3}
}

type AccountType int32

const (
	AccountType_CONSUMER   AccountType = 0
	AccountType_FAMILY     AccountType = 1
	AccountType_ENTERPRISE AccountType = 2
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "CONSUMER",
		1: "FAMILY",
		2: "ENTERPRISE",
	}
	AccountType_value = map[string]int32{
		"CONSUMER":   0,
		"FAMILY":     1,
		"ENTERPRISE": 2,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[4].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[4]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{4}
}

type SessionTokenType int32

const (
	SessionTokenType_NO_RESTRICTION              SessionTokenType = 0 // can do everything
	SessionTokenType_ACCOUNT_RECOVERY            SessionTokenType = 1 // can only change password
	SessionTokenType_SHARE_ACCOUNT               SessionTokenType = 2 // must first agree to share their account
	SessionTokenType_PURCHASE                    SessionTokenType = 3 // can only get sku's for purchase
	SessionTokenType_RESTRICT                    SessionTokenType = 4 // This is for a session token where the account is expired, but can still log in
	SessionTokenType_ACCEPT_INVITE               SessionTokenType = 5 // can only accept the enterprise invite
	SessionTokenType_SUPPORT_SERVER              SessionTokenType = 6 // from BI (Token object is created manually in Chat Server after decrypting BI's json token)
	SessionTokenType_ENTERPRISE_CREATION         SessionTokenType = 7 // user has tried to log into the console but no enterprise exists
	SessionTokenType_EXPIRED_BUT_ALLOWED_TO_SYNC SessionTokenType = 8 // for webapp
)

// Enum value maps for SessionTokenType.
var (
	SessionTokenType_name = map[int32]string{
		0: "NO_RESTRICTION",
		1: "ACCOUNT_RECOVERY",
		2: "SHARE_ACCOUNT",
		3: "PURCHASE",
		4: "RESTRICT",
		5: "ACCEPT_INVITE",
		6: "SUPPORT_SERVER",
		7: "ENTERPRISE_CREATION",
		8: "EXPIRED_BUT_ALLOWED_TO_SYNC",
	}
	SessionTokenType_value = map[string]int32{
		"NO_RESTRICTION":              0,
		"ACCOUNT_RECOVERY":            1,
		"SHARE_ACCOUNT":               2,
		"PURCHASE":                    3,
		"RESTRICT":                    4,
		"ACCEPT_INVITE":               5,
		"SUPPORT_SERVER":              6,
		"ENTERPRISE_CREATION":         7,
		"EXPIRED_BUT_ALLOWED_TO_SYNC": 8,
	}
)

func (x SessionTokenType) Enum() *SessionTokenType {
	p := new(SessionTokenType)
	*p = x
	return p
}

func (x SessionTokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionTokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[5].Descriptor()
}

func (SessionTokenType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[5]
}

func (x SessionTokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionTokenType.Descriptor instead.
func (SessionTokenType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{5}
}

type Version int32

const (
	Version_invalid_version Version = 0 //protobuf enum has to start with 0.
	Version_default_version Version = 1
	Version_second_version  Version = 2
)

// Enum value maps for Version.
var (
	Version_name = map[int32]string{
		0: "invalid_version",
		1: "default_version",
		2: "second_version",
	}
	Version_value = map[string]int32{
		"invalid_version": 0,
		"default_version": 1,
		"second_version":  2,
	}
)

func (x Version) Enum() *Version {
	p := new(Version)
	*p = x
	return p
}

func (x Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Version) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[6].Descriptor()
}

func (Version) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[6]
}

func (x Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Version.Descriptor instead.
func (Version) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{6}
}

type MasterPasswordReentryActionType int32

const (
	MasterPasswordReentryActionType_UNMASK MasterPasswordReentryActionType = 0
	MasterPasswordReentryActionType_COPY   MasterPasswordReentryActionType = 1
)

// Enum value maps for MasterPasswordReentryActionType.
var (
	MasterPasswordReentryActionType_name = map[int32]string{
		0: "UNMASK",
		1: "COPY",
	}
	MasterPasswordReentryActionType_value = map[string]int32{
		"UNMASK": 0,
		"COPY":   1,
	}
)

func (x MasterPasswordReentryActionType) Enum() *MasterPasswordReentryActionType {
	p := new(MasterPasswordReentryActionType)
	*p = x
	return p
}

func (x MasterPasswordReentryActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasterPasswordReentryActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[7].Descriptor()
}

func (MasterPasswordReentryActionType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[7]
}

func (x MasterPasswordReentryActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MasterPasswordReentryActionType.Descriptor instead.
func (MasterPasswordReentryActionType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{7}
}

// loginMethod is one of ( existing_account, sso_domain, after_sso )
type LoginMethod int32

const (
	LoginMethod_INVALID_LOGINMETHOD LoginMethod = 0
	LoginMethod_EXISTING_ACCOUNT    LoginMethod = 1
	LoginMethod_SSO_DOMAIN          LoginMethod = 2
	LoginMethod_AFTER_SSO           LoginMethod = 3
	LoginMethod_NEW_ACCOUNT         LoginMethod = 4
)

// Enum value maps for LoginMethod.
var (
	LoginMethod_name = map[int32]string{
		0: "INVALID_LOGINMETHOD",
		1: "EXISTING_ACCOUNT",
		2: "SSO_DOMAIN",
		3: "AFTER_SSO",
		4: "NEW_ACCOUNT",
	}
	LoginMethod_value = map[string]int32{
		"INVALID_LOGINMETHOD": 0,
		"EXISTING_ACCOUNT":    1,
		"SSO_DOMAIN":          2,
		"AFTER_SSO":           3,
		"NEW_ACCOUNT":         4,
	}
)

func (x LoginMethod) Enum() *LoginMethod {
	p := new(LoginMethod)
	*p = x
	return p
}

func (x LoginMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[8].Descriptor()
}

func (LoginMethod) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[8]
}

func (x LoginMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginMethod.Descriptor instead.
func (LoginMethod) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{8}
}

type LoginState int32

const (
	LoginState_INVALID_LOGINSTATE                 LoginState = 0 // something is wrong, should never be in this state
	LoginState_LOGGED_OUT                         LoginState = 1 // the client has been logged out
	LoginState_DEVICE_APPROVAL_REQUIRED           LoginState = 2 // device needs to be approved to use for this user
	LoginState_DEVICE_LOCKED                      LoginState = 3 // the device is locked for all accounts
	LoginState_ACCOUNT_LOCKED                     LoginState = 4 // the account is locked
	LoginState_DEVICE_ACCOUNT_LOCKED              LoginState = 5 // the account on this device is locked
	LoginState_UPGRADE                            LoginState = 6 // client version is disallowed
	LoginState_LICENSE_EXPIRED                    LoginState = 7 // enterprise account cannot log in
	LoginState_REGION_REDIRECT                    LoginState = 8 // account is in a different region, device should know that already
	LoginState_REDIRECT_CLOUD_SSO                 LoginState = 9
	LoginState_REDIRECT_ONSITE_SSO                LoginState = 10
	LoginState_REQUIRES_2FA                       LoginState = 12 // 2fa needs satisfying
	LoginState_REQUIRES_AUTH_HASH                 LoginState = 13 // the device is 2fa's and now we need the auth hash
	LoginState_REQUIRES_USERNAME                  LoginState = 14 // no username is supplied and we need one to continue
	LoginState_AFTER_CLOUD_SSO_LOGIN              LoginState = 15 // returned from saml/sso/finish_login
	LoginState_REQUIRES_ACCOUNT_CREATION          LoginState = 16 // for a cloud sso user that doesn't yet exist
	LoginState_REQUIRES_DEVICE_ENCRYPTED_DATA_KEY LoginState = 17 // device needs approval with a dedk
	LoginState_LOGIN_TOKEN_EXPIRED                LoginState = 18 // a login token is not valid forever, if you get this, start over
	LoginState_LOGGED_IN                          LoginState = 99
)

// Enum value maps for LoginState.
var (
	LoginState_name = map[int32]string{
		0:  "INVALID_LOGINSTATE",
		1:  "LOGGED_OUT",
		2:  "DEVICE_APPROVAL_REQUIRED",
		3:  "DEVICE_LOCKED",
		4:  "ACCOUNT_LOCKED",
		5:  "DEVICE_ACCOUNT_LOCKED",
		6:  "UPGRADE",
		7:  "LICENSE_EXPIRED",
		8:  "REGION_REDIRECT",
		9:  "REDIRECT_CLOUD_SSO",
		10: "REDIRECT_ONSITE_SSO",
		12: "REQUIRES_2FA",
		13: "REQUIRES_AUTH_HASH",
		14: "REQUIRES_USERNAME",
		15: "AFTER_CLOUD_SSO_LOGIN",
		16: "REQUIRES_ACCOUNT_CREATION",
		17: "REQUIRES_DEVICE_ENCRYPTED_DATA_KEY",
		18: "LOGIN_TOKEN_EXPIRED",
		99: "LOGGED_IN",
	}
	LoginState_value = map[string]int32{
		"INVALID_LOGINSTATE":                 0,
		"LOGGED_OUT":                         1,
		"DEVICE_APPROVAL_REQUIRED":           2,
		"DEVICE_LOCKED":                      3,
		"ACCOUNT_LOCKED":                     4,
		"DEVICE_ACCOUNT_LOCKED":              5,
		"UPGRADE":                            6,
		"LICENSE_EXPIRED":                    7,
		"REGION_REDIRECT":                    8,
		"REDIRECT_CLOUD_SSO":                 9,
		"REDIRECT_ONSITE_SSO":                10,
		"REQUIRES_2FA":                       12,
		"REQUIRES_AUTH_HASH":                 13,
		"REQUIRES_USERNAME":                  14,
		"AFTER_CLOUD_SSO_LOGIN":              15,
		"REQUIRES_ACCOUNT_CREATION":          16,
		"REQUIRES_DEVICE_ENCRYPTED_DATA_KEY": 17,
		"LOGIN_TOKEN_EXPIRED":                18,
		"LOGGED_IN":                          99,
	}
)

func (x LoginState) Enum() *LoginState {
	p := new(LoginState)
	*p = x
	return p
}

func (x LoginState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginState) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[9].Descriptor()
}

func (LoginState) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[9]
}

func (x LoginState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginState.Descriptor instead.
func (LoginState) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{9}
}

type EncryptedDataKeyType int32

const (
	EncryptedDataKeyType_NO_KEY               EncryptedDataKeyType = 0
	EncryptedDataKeyType_BY_DEVICE_PUBLIC_KEY EncryptedDataKeyType = 1
	EncryptedDataKeyType_BY_PASSWORD          EncryptedDataKeyType = 2
	EncryptedDataKeyType_BY_ALTERNATE         EncryptedDataKeyType = 3
	EncryptedDataKeyType_BY_BIO               EncryptedDataKeyType = 4
)

// Enum value maps for EncryptedDataKeyType.
var (
	EncryptedDataKeyType_name = map[int32]string{
		0: "NO_KEY",
		1: "BY_DEVICE_PUBLIC_KEY",
		2: "BY_PASSWORD",
		3: "BY_ALTERNATE",
		4: "BY_BIO",
	}
	EncryptedDataKeyType_value = map[string]int32{
		"NO_KEY":               0,
		"BY_DEVICE_PUBLIC_KEY": 1,
		"BY_PASSWORD":          2,
		"BY_ALTERNATE":         3,
		"BY_BIO":               4,
	}
)

func (x EncryptedDataKeyType) Enum() *EncryptedDataKeyType {
	p := new(EncryptedDataKeyType)
	*p = x
	return p
}

func (x EncryptedDataKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptedDataKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[10].Descriptor()
}

func (EncryptedDataKeyType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[10]
}

func (x EncryptedDataKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptedDataKeyType.Descriptor instead.
func (EncryptedDataKeyType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{10}
}

type PasswordMethod int32

const (
	PasswordMethod_ENTERED    PasswordMethod = 0
	PasswordMethod_BIOMETRICS PasswordMethod = 1
)

// Enum value maps for PasswordMethod.
var (
	PasswordMethod_name = map[int32]string{
		0: "ENTERED",
		1: "BIOMETRICS",
	}
	PasswordMethod_value = map[string]int32{
		"ENTERED":    0,
		"BIOMETRICS": 1,
	}
)

func (x PasswordMethod) Enum() *PasswordMethod {
	p := new(PasswordMethod)
	*p = x
	return p
}

func (x PasswordMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[11].Descriptor()
}

func (PasswordMethod) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[11]
}

func (x PasswordMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordMethod.Descriptor instead.
func (PasswordMethod) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{11}
}

// v3 and forward
type TwoFactorPushType int32

const (
	TwoFactorPushType_TWO_FA_PUSH_NONE     TwoFactorPushType = 0
	TwoFactorPushType_TWO_FA_PUSH_SMS      TwoFactorPushType = 1
	TwoFactorPushType_TWO_FA_PUSH_KEEPER   TwoFactorPushType = 2
	TwoFactorPushType_TWO_FA_PUSH_DUO_PUSH TwoFactorPushType = 3
	TwoFactorPushType_TWO_FA_PUSH_DUO_TEXT TwoFactorPushType = 4
	TwoFactorPushType_TWO_FA_PUSH_DUO_CALL TwoFactorPushType = 5
	TwoFactorPushType_TWO_FA_PUSH_DNA      TwoFactorPushType = 6
)

// Enum value maps for TwoFactorPushType.
var (
	TwoFactorPushType_name = map[int32]string{
		0: "TWO_FA_PUSH_NONE",
		1: "TWO_FA_PUSH_SMS",
		2: "TWO_FA_PUSH_KEEPER",
		3: "TWO_FA_PUSH_DUO_PUSH",
		4: "TWO_FA_PUSH_DUO_TEXT",
		5: "TWO_FA_PUSH_DUO_CALL",
		6: "TWO_FA_PUSH_DNA",
	}
	TwoFactorPushType_value = map[string]int32{
		"TWO_FA_PUSH_NONE":     0,
		"TWO_FA_PUSH_SMS":      1,
		"TWO_FA_PUSH_KEEPER":   2,
		"TWO_FA_PUSH_DUO_PUSH": 3,
		"TWO_FA_PUSH_DUO_TEXT": 4,
		"TWO_FA_PUSH_DUO_CALL": 5,
		"TWO_FA_PUSH_DNA":      6,
	}
)

func (x TwoFactorPushType) Enum() *TwoFactorPushType {
	p := new(TwoFactorPushType)
	*p = x
	return p
}

func (x TwoFactorPushType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TwoFactorPushType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[12].Descriptor()
}

func (TwoFactorPushType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[12]
}

func (x TwoFactorPushType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TwoFactorPushType.Descriptor instead.
func (TwoFactorPushType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{12}
}

type TwoFactorValueType int32

const (
	TwoFactorValueType_TWO_FA_CODE_NONE     TwoFactorValueType = 0
	TwoFactorValueType_TWO_FA_CODE_TOTP     TwoFactorValueType = 1 // Google authenticator etc.
	TwoFactorValueType_TWO_FA_CODE_SMS      TwoFactorValueType = 2
	TwoFactorValueType_TWO_FA_CODE_DUO      TwoFactorValueType = 3
	TwoFactorValueType_TWO_FA_CODE_RSA      TwoFactorValueType = 4
	TwoFactorValueType_TWO_FA_RESP_U2F      TwoFactorValueType = 5
	TwoFactorValueType_TWO_FA_RESP_WEBAUTHN TwoFactorValueType = 6
	TwoFactorValueType_TWO_FA_CODE_DNA      TwoFactorValueType = 7
)

// Enum value maps for TwoFactorValueType.
var (
	TwoFactorValueType_name = map[int32]string{
		0: "TWO_FA_CODE_NONE",
		1: "TWO_FA_CODE_TOTP",
		2: "TWO_FA_CODE_SMS",
		3: "TWO_FA_CODE_DUO",
		4: "TWO_FA_CODE_RSA",
		5: "TWO_FA_RESP_U2F",
		6: "TWO_FA_RESP_WEBAUTHN",
		7: "TWO_FA_CODE_DNA",
	}
	TwoFactorValueType_value = map[string]int32{
		"TWO_FA_CODE_NONE":     0,
		"TWO_FA_CODE_TOTP":     1,
		"TWO_FA_CODE_SMS":      2,
		"TWO_FA_CODE_DUO":      3,
		"TWO_FA_CODE_RSA":      4,
		"TWO_FA_RESP_U2F":      5,
		"TWO_FA_RESP_WEBAUTHN": 6,
		"TWO_FA_CODE_DNA":      7,
	}
)

func (x TwoFactorValueType) Enum() *TwoFactorValueType {
	p := new(TwoFactorValueType)
	*p = x
	return p
}

func (x TwoFactorValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TwoFactorValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[13].Descriptor()
}

func (TwoFactorValueType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[13]
}

func (x TwoFactorValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TwoFactorValueType.Descriptor instead.
func (TwoFactorValueType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{13}
}

type TwoFactorChannelType int32

const (
	TwoFactorChannelType_TWO_FA_CT_NONE     TwoFactorChannelType = 0
	TwoFactorChannelType_TWO_FA_CT_TOTP     TwoFactorChannelType = 1
	TwoFactorChannelType_TWO_FA_CT_SMS      TwoFactorChannelType = 2
	TwoFactorChannelType_TWO_FA_CT_DUO      TwoFactorChannelType = 3
	TwoFactorChannelType_TWO_FA_CT_RSA      TwoFactorChannelType = 4
	TwoFactorChannelType_TWO_FA_CT_BACKUP   TwoFactorChannelType = 5
	TwoFactorChannelType_TWO_FA_CT_U2F      TwoFactorChannelType = 6
	TwoFactorChannelType_TWO_FA_CT_WEBAUTHN TwoFactorChannelType = 7
	TwoFactorChannelType_TWO_FA_CT_KEEPER   TwoFactorChannelType = 8
	TwoFactorChannelType_TWO_FA_CT_DNA      TwoFactorChannelType = 9
)

// Enum value maps for TwoFactorChannelType.
var (
	TwoFactorChannelType_name = map[int32]string{
		0: "TWO_FA_CT_NONE",
		1: "TWO_FA_CT_TOTP",
		2: "TWO_FA_CT_SMS",
		3: "TWO_FA_CT_DUO",
		4: "TWO_FA_CT_RSA",
		5: "TWO_FA_CT_BACKUP",
		6: "TWO_FA_CT_U2F",
		7: "TWO_FA_CT_WEBAUTHN",
		8: "TWO_FA_CT_KEEPER",
		9: "TWO_FA_CT_DNA",
	}
	TwoFactorChannelType_value = map[string]int32{
		"TWO_FA_CT_NONE":     0,
		"TWO_FA_CT_TOTP":     1,
		"TWO_FA_CT_SMS":      2,
		"TWO_FA_CT_DUO":      3,
		"TWO_FA_CT_RSA":      4,
		"TWO_FA_CT_BACKUP":   5,
		"TWO_FA_CT_U2F":      6,
		"TWO_FA_CT_WEBAUTHN": 7,
		"TWO_FA_CT_KEEPER":   8,
		"TWO_FA_CT_DNA":      9,
	}
)

func (x TwoFactorChannelType) Enum() *TwoFactorChannelType {
	p := new(TwoFactorChannelType)
	*p = x
	return p
}

func (x TwoFactorChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TwoFactorChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[14].Descriptor()
}

func (TwoFactorChannelType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[14]
}

func (x TwoFactorChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TwoFactorChannelType.Descriptor instead.
func (TwoFactorChannelType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{14}
}

type TwoFactorExpiration int32

const (
	TwoFactorExpiration_TWO_FA_EXP_IMMEDIATELY TwoFactorExpiration = 0
	TwoFactorExpiration_TWO_FA_EXP_5_MINUTES   TwoFactorExpiration = 1
	TwoFactorExpiration_TWO_FA_EXP_12_HOURS    TwoFactorExpiration = 2
	TwoFactorExpiration_TWO_FA_EXP_24_HOURS    TwoFactorExpiration = 3
	TwoFactorExpiration_TWO_FA_EXP_30_DAYS     TwoFactorExpiration = 4
	TwoFactorExpiration_TWO_FA_EXP_NEVER       TwoFactorExpiration = 5
)

// Enum value maps for TwoFactorExpiration.
var (
	TwoFactorExpiration_name = map[int32]string{
		0: "TWO_FA_EXP_IMMEDIATELY",
		1: "TWO_FA_EXP_5_MINUTES",
		2: "TWO_FA_EXP_12_HOURS",
		3: "TWO_FA_EXP_24_HOURS",
		4: "TWO_FA_EXP_30_DAYS",
		5: "TWO_FA_EXP_NEVER",
	}
	TwoFactorExpiration_value = map[string]int32{
		"TWO_FA_EXP_IMMEDIATELY": 0,
		"TWO_FA_EXP_5_MINUTES":   1,
		"TWO_FA_EXP_12_HOURS":    2,
		"TWO_FA_EXP_24_HOURS":    3,
		"TWO_FA_EXP_30_DAYS":     4,
		"TWO_FA_EXP_NEVER":       5,
	}
)

func (x TwoFactorExpiration) Enum() *TwoFactorExpiration {
	p := new(TwoFactorExpiration)
	*p = x
	return p
}

func (x TwoFactorExpiration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TwoFactorExpiration) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[15].Descriptor()
}

func (TwoFactorExpiration) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[15]
}

func (x TwoFactorExpiration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TwoFactorExpiration.Descriptor instead.
func (TwoFactorExpiration) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{15}
}

type LicenseType int32

const (
	LicenseType_VAULT       LicenseType = 0
	LicenseType_CHAT        LicenseType = 1
	LicenseType_STORAGE     LicenseType = 2
	LicenseType_BREACHWATCH LicenseType = 3
)

// Enum value maps for LicenseType.
var (
	LicenseType_name = map[int32]string{
		0: "VAULT",
		1: "CHAT",
		2: "STORAGE",
		3: "BREACHWATCH",
	}
	LicenseType_value = map[string]int32{
		"VAULT":       0,
		"CHAT":        1,
		"STORAGE":     2,
		"BREACHWATCH": 3,
	}
)

func (x LicenseType) Enum() *LicenseType {
	p := new(LicenseType)
	*p = x
	return p
}

func (x LicenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[16].Descriptor()
}

func (LicenseType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[16]
}

func (x LicenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseType.Descriptor instead.
func (LicenseType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{16}
}

type ObjectTypes int32

const (
	ObjectTypes_RECORD             ObjectTypes = 0
	ObjectTypes_SHARED_FOLDER_USER ObjectTypes = 1
	ObjectTypes_SHARED_FOLDER_TEAM ObjectTypes = 2
	ObjectTypes_USER_FOLDER        ObjectTypes = 3
	ObjectTypes_TEAM_USER          ObjectTypes = 4
)

// Enum value maps for ObjectTypes.
var (
	ObjectTypes_name = map[int32]string{
		0: "RECORD",
		1: "SHARED_FOLDER_USER",
		2: "SHARED_FOLDER_TEAM",
		3: "USER_FOLDER",
		4: "TEAM_USER",
	}
	ObjectTypes_value = map[string]int32{
		"RECORD":             0,
		"SHARED_FOLDER_USER": 1,
		"SHARED_FOLDER_TEAM": 2,
		"USER_FOLDER":        3,
		"TEAM_USER":          4,
	}
)

func (x ObjectTypes) Enum() *ObjectTypes {
	p := new(ObjectTypes)
	*p = x
	return p
}

func (x ObjectTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[17].Descriptor()
}

func (ObjectTypes) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[17]
}

func (x ObjectTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectTypes.Descriptor instead.
func (ObjectTypes) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{17}
}

type MasterPasswordReentryStatus int32

const (
	MasterPasswordReentryStatus_MP_UNKNOWN MasterPasswordReentryStatus = 0
	MasterPasswordReentryStatus_MP_SUCCESS MasterPasswordReentryStatus = 1
	MasterPasswordReentryStatus_MP_FAILURE MasterPasswordReentryStatus = 2
)

// Enum value maps for MasterPasswordReentryStatus.
var (
	MasterPasswordReentryStatus_name = map[int32]string{
		0: "MP_UNKNOWN",
		1: "MP_SUCCESS",
		2: "MP_FAILURE",
	}
	MasterPasswordReentryStatus_value = map[string]int32{
		"MP_UNKNOWN": 0,
		"MP_SUCCESS": 1,
		"MP_FAILURE": 2,
	}
)

func (x MasterPasswordReentryStatus) Enum() *MasterPasswordReentryStatus {
	p := new(MasterPasswordReentryStatus)
	*p = x
	return p
}

func (x MasterPasswordReentryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasterPasswordReentryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[18].Descriptor()
}

func (MasterPasswordReentryStatus) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[18]
}

func (x MasterPasswordReentryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MasterPasswordReentryStatus.Descriptor instead.
func (MasterPasswordReentryStatus) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{18}
}

type AlternateAuthenticationType int32

const (
	AlternateAuthenticationType_ALTERNATE_MASTER_PASSWORD AlternateAuthenticationType = 0
	AlternateAuthenticationType_BIOMETRIC                 AlternateAuthenticationType = 1
	AlternateAuthenticationType_ACCOUNT_RECOVER           AlternateAuthenticationType = 2
)

// Enum value maps for AlternateAuthenticationType.
var (
	AlternateAuthenticationType_name = map[int32]string{
		0: "ALTERNATE_MASTER_PASSWORD",
		1: "BIOMETRIC",
		2: "ACCOUNT_RECOVER",
	}
	AlternateAuthenticationType_value = map[string]int32{
		"ALTERNATE_MASTER_PASSWORD": 0,
		"BIOMETRIC":                 1,
		"ACCOUNT_RECOVER":           2,
	}
)

func (x AlternateAuthenticationType) Enum() *AlternateAuthenticationType {
	p := new(AlternateAuthenticationType)
	*p = x
	return p
}

func (x AlternateAuthenticationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlternateAuthenticationType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[19].Descriptor()
}

func (AlternateAuthenticationType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[19]
}

func (x AlternateAuthenticationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlternateAuthenticationType.Descriptor instead.
func (AlternateAuthenticationType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{19}
}

type ThrottleType int32

const (
	ThrottleType_PASSWORD_RETRY_THROTTLE                         ThrottleType = 0
	ThrottleType_PASSWORD_RETRY_LEGACY_THROTTLE                  ThrottleType = 1
	ThrottleType_TWO_FA_THROTTLE                                 ThrottleType = 2
	ThrottleType_TWO_FA_LEGACY_THROTTLE                          ThrottleType = 3
	ThrottleType_QA_RETRY_THROTTLE                               ThrottleType = 4
	ThrottleType_ACCOUNT_RECOVER_THROTTLE                        ThrottleType = 5
	ThrottleType_VALIDATE_DEVICE_VERIFICATION_CODE_THROTTLE      ThrottleType = 6
	ThrottleType_VALIDATE_CREATE_USER_VERIFICATION_CODE_THROTTLE ThrottleType = 7
)

// Enum value maps for ThrottleType.
var (
	ThrottleType_name = map[int32]string{
		0: "PASSWORD_RETRY_THROTTLE",
		1: "PASSWORD_RETRY_LEGACY_THROTTLE",
		2: "TWO_FA_THROTTLE",
		3: "TWO_FA_LEGACY_THROTTLE",
		4: "QA_RETRY_THROTTLE",
		5: "ACCOUNT_RECOVER_THROTTLE",
		6: "VALIDATE_DEVICE_VERIFICATION_CODE_THROTTLE",
		7: "VALIDATE_CREATE_USER_VERIFICATION_CODE_THROTTLE",
	}
	ThrottleType_value = map[string]int32{
		"PASSWORD_RETRY_THROTTLE":                         0,
		"PASSWORD_RETRY_LEGACY_THROTTLE":                  1,
		"TWO_FA_THROTTLE":                                 2,
		"TWO_FA_LEGACY_THROTTLE":                          3,
		"QA_RETRY_THROTTLE":                               4,
		"ACCOUNT_RECOVER_THROTTLE":                        5,
		"VALIDATE_DEVICE_VERIFICATION_CODE_THROTTLE":      6,
		"VALIDATE_CREATE_USER_VERIFICATION_CODE_THROTTLE": 7,
	}
)

func (x ThrottleType) Enum() *ThrottleType {
	p := new(ThrottleType)
	*p = x
	return p
}

func (x ThrottleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThrottleType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[20].Descriptor()
}

func (ThrottleType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[20]
}

func (x ThrottleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThrottleType.Descriptor instead.
func (ThrottleType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{20}
}

// *
// The names and IDs in this class correspond to the Kinfo database entries and to the Region class in Keeperpap.
type Region int32

const (
	Region_UNKNOWN Region = 0 // Our region numbers start at 1
	Region_eu      Region = 1 // Europe
	Region_us      Region = 2 // North America
	Region_usgov   Region = 3 // US Government
	Region_au      Region = 4 // Australia
	Region_jp      Region = 5 //Japan
	Region_ca      Region = 6 //Canada
)

// Enum value maps for Region.
var (
	Region_name = map[int32]string{
		0: "UNKNOWN",
		1: "eu",
		2: "us",
		3: "usgov",
		4: "au",
		5: "jp",
		6: "ca",
	}
	Region_value = map[string]int32{
		"UNKNOWN": 0,
		"eu":      1,
		"us":      2,
		"usgov":   3,
		"au":      4,
		"jp":      5,
		"ca":      6,
	}
)

func (x Region) Enum() *Region {
	p := new(Region)
	*p = x
	return p
}

func (x Region) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Region) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[21].Descriptor()
}

func (Region) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[21]
}

func (x Region) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Region.Descriptor instead.
func (Region) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{21}
}

type ApplicationShareType int32

const (
	ApplicationShareType_SHARE_TYPE_RECORD ApplicationShareType = 0
	ApplicationShareType_SHARE_TYPE_FOLDER ApplicationShareType = 1
)

// Enum value maps for ApplicationShareType.
var (
	ApplicationShareType_name = map[int32]string{
		0: "SHARE_TYPE_RECORD",
		1: "SHARE_TYPE_FOLDER",
	}
	ApplicationShareType_value = map[string]int32{
		"SHARE_TYPE_RECORD": 0,
		"SHARE_TYPE_FOLDER": 1,
	}
)

func (x ApplicationShareType) Enum() *ApplicationShareType {
	p := new(ApplicationShareType)
	*p = x
	return p
}

func (x ApplicationShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[22].Descriptor()
}

func (ApplicationShareType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[22]
}

func (x ApplicationShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationShareType.Descriptor instead.
func (ApplicationShareType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{22}
}

type BackupKeyType int32

const (
	BackupKeyType_BKT_SEC_ANSWER      BackupKeyType = 0
	BackupKeyType_BKT_PASSPHRASE_HASH BackupKeyType = 1
)

// Enum value maps for BackupKeyType.
var (
	BackupKeyType_name = map[int32]string{
		0: "BKT_SEC_ANSWER",
		1: "BKT_PASSPHRASE_HASH",
	}
	BackupKeyType_value = map[string]int32{
		"BKT_SEC_ANSWER":      0,
		"BKT_PASSPHRASE_HASH": 1,
	}
)

func (x BackupKeyType) Enum() *BackupKeyType {
	p := new(BackupKeyType)
	*p = x
	return p
}

func (x BackupKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[23].Descriptor()
}

func (BackupKeyType) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[23]
}

func (x BackupKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupKeyType.Descriptor instead.
func (BackupKeyType) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{23}
}

type GenericStatus int32

const (
	GenericStatus_SUCCESS        GenericStatus = 0
	GenericStatus_INVALID_OBJECT GenericStatus = 1
	GenericStatus_ALREADY_EXISTS GenericStatus = 2
	GenericStatus_ACCESS_DENIED  GenericStatus = 3
)

// Enum value maps for GenericStatus.
var (
	GenericStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "INVALID_OBJECT",
		2: "ALREADY_EXISTS",
		3: "ACCESS_DENIED",
	}
	GenericStatus_value = map[string]int32{
		"SUCCESS":        0,
		"INVALID_OBJECT": 1,
		"ALREADY_EXISTS": 2,
		"ACCESS_DENIED":  3,
	}
)

func (x GenericStatus) Enum() *GenericStatus {
	p := new(GenericStatus)
	*p = x
	return p
}

func (x GenericStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenericStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_APIRequest_proto_enumTypes[24].Descriptor()
}

func (GenericStatus) Type() protoreflect.EnumType {
	return &file_APIRequest_proto_enumTypes[24]
}

func (x GenericStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenericStatus.Descriptor instead.
func (GenericStatus) EnumDescriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{24}
}

type ApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedTransmissionKey []byte `protobuf:"bytes,1,opt,name=encryptedTransmissionKey,proto3" json:"encryptedTransmissionKey,omitempty"`
	PublicKeyId              int32  `protobuf:"varint,2,opt,name=publicKeyId,proto3" json:"publicKeyId,omitempty"`
	Locale                   string `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`
	EncryptedPayload         []byte `protobuf:"bytes,4,opt,name=encryptedPayload,proto3" json:"encryptedPayload,omitempty"`
	EncryptionType           int32  `protobuf:"varint,5,opt,name=encryptionType,proto3" json:"encryptionType,omitempty"`
	Recaptcha                string `protobuf:"bytes,6,opt,name=recaptcha,proto3" json:"recaptcha,omitempty"`
	SubEnvironment           string `protobuf:"bytes,7,opt,name=subEnvironment,proto3" json:"subEnvironment,omitempty"` //possible values are 'beta', 'v2', etc.
}

func (x *ApiRequest) Reset() {
	*x = ApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiRequest) ProtoMessage() {}

func (x *ApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiRequest.ProtoReflect.Descriptor instead.
func (*ApiRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{0}
}

func (x *ApiRequest) GetEncryptedTransmissionKey() []byte {
	if x != nil {
		return x.EncryptedTransmissionKey
	}
	return nil
}

func (x *ApiRequest) GetPublicKeyId() int32 {
	if x != nil {
		return x.PublicKeyId
	}
	return 0
}

func (x *ApiRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *ApiRequest) GetEncryptedPayload() []byte {
	if x != nil {
		return x.EncryptedPayload
	}
	return nil
}

func (x *ApiRequest) GetEncryptionType() int32 {
	if x != nil {
		return x.EncryptionType
	}
	return 0
}

func (x *ApiRequest) GetRecaptcha() string {
	if x != nil {
		return x.Recaptcha
	}
	return ""
}

func (x *ApiRequest) GetSubEnvironment() string {
	if x != nil {
		return x.SubEnvironment
	}
	return ""
}

type ApiRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload               []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	EncryptedSessionToken []byte `protobuf:"bytes,2,opt,name=encryptedSessionToken,proto3" json:"encryptedSessionToken,omitempty"`
	TimeToken             []byte `protobuf:"bytes,3,opt,name=timeToken,proto3" json:"timeToken,omitempty"`
	ApiVersion            int32  `protobuf:"varint,4,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
}

func (x *ApiRequestPayload) Reset() {
	*x = ApiRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiRequestPayload) ProtoMessage() {}

func (x *ApiRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiRequestPayload.ProtoReflect.Descriptor instead.
func (*ApiRequestPayload) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{1}
}

func (x *ApiRequestPayload) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ApiRequestPayload) GetEncryptedSessionToken() []byte {
	if x != nil {
		return x.EncryptedSessionToken
	}
	return nil
}

func (x *ApiRequestPayload) GetTimeToken() []byte {
	if x != nil {
		return x.TimeToken
	}
	return nil
}

func (x *ApiRequestPayload) GetApiVersion() int32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

type Transform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                  []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	EncryptedDeviceToken []byte `protobuf:"bytes,2,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
}

func (x *Transform) Reset() {
	*x = Transform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transform) ProtoMessage() {}

func (x *Transform) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transform.ProtoReflect.Descriptor instead.
func (*Transform) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{2}
}

func (x *Transform) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Transform) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

type DeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion string `protobuf:"bytes,1,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	DeviceName    string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *DeviceRequest) Reset() {
	*x = DeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRequest) ProtoMessage() {}

func (x *DeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRequest.ProtoReflect.Descriptor instead.
func (*DeviceRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion        string `protobuf:"bytes,1,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	Username             string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	EncryptedDeviceToken []byte `protobuf:"bytes,3,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{4}
}

func (x *AuthRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *AuthRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

type NewUserMinimumParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinimumIterations        int32    `protobuf:"varint,1,opt,name=minimumIterations,proto3" json:"minimumIterations,omitempty"`
	PasswordMatchRegex       []string `protobuf:"bytes,2,rep,name=passwordMatchRegex,proto3" json:"passwordMatchRegex,omitempty"`
	PasswordMatchDescription []string `protobuf:"bytes,3,rep,name=passwordMatchDescription,proto3" json:"passwordMatchDescription,omitempty"`
	IsEnterpriseDomain       bool     `protobuf:"varint,4,opt,name=isEnterpriseDomain,proto3" json:"isEnterpriseDomain,omitempty"`
}

func (x *NewUserMinimumParams) Reset() {
	*x = NewUserMinimumParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserMinimumParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserMinimumParams) ProtoMessage() {}

func (x *NewUserMinimumParams) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserMinimumParams.ProtoReflect.Descriptor instead.
func (*NewUserMinimumParams) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{5}
}

func (x *NewUserMinimumParams) GetMinimumIterations() int32 {
	if x != nil {
		return x.MinimumIterations
	}
	return 0
}

func (x *NewUserMinimumParams) GetPasswordMatchRegex() []string {
	if x != nil {
		return x.PasswordMatchRegex
	}
	return nil
}

func (x *NewUserMinimumParams) GetPasswordMatchDescription() []string {
	if x != nil {
		return x.PasswordMatchDescription
	}
	return nil
}

func (x *NewUserMinimumParams) GetIsEnterpriseDomain() bool {
	if x != nil {
		return x.IsEnterpriseDomain
	}
	return false
}

type PreLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthRequest    *AuthRequest `protobuf:"bytes,1,opt,name=authRequest,proto3" json:"authRequest,omitempty"`
	LoginType      LoginType    `protobuf:"varint,2,opt,name=loginType,proto3,enum=Authentication.LoginType" json:"loginType,omitempty"`
	TwoFactorToken []byte       `protobuf:"bytes,3,opt,name=twoFactorToken,proto3" json:"twoFactorToken,omitempty"` // optional - if supplied, it will be validated if it needs refreshing
}

func (x *PreLoginRequest) Reset() {
	*x = PreLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreLoginRequest) ProtoMessage() {}

func (x *PreLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreLoginRequest.ProtoReflect.Descriptor instead.
func (*PreLoginRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{6}
}

func (x *PreLoginRequest) GetAuthRequest() *AuthRequest {
	if x != nil {
		return x.AuthRequest
	}
	return nil
}

func (x *PreLoginRequest) GetLoginType() LoginType {
	if x != nil {
		return x.LoginType
	}
	return LoginType_NORMAL
}

func (x *PreLoginRequest) GetTwoFactorToken() []byte {
	if x != nil {
		return x.TwoFactorToken
	}
	return nil
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthRequest             *AuthRequest `protobuf:"bytes,1,opt,name=authRequest,proto3" json:"authRequest,omitempty"`
	LoginType               LoginType    `protobuf:"varint,2,opt,name=loginType,proto3,enum=Authentication.LoginType" json:"loginType,omitempty"`
	AuthenticationHashPrime []byte       `protobuf:"bytes,3,opt,name=authenticationHashPrime,proto3" json:"authenticationHashPrime,omitempty"`
	EncryptedLoginToken     []byte       `protobuf:"bytes,4,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
	AuthResponse            []byte       `protobuf:"bytes,5,opt,name=authResponse,proto3" json:"authResponse,omitempty"`
	McEnterpriseId          int32        `protobuf:"varint,6,opt,name=mcEnterpriseId,proto3" json:"mcEnterpriseId,omitempty"`       //input.getInt("enterprise_id")
	PushToken               string       `protobuf:"bytes,7,opt,name=push_token,json=pushToken,proto3" json:"push_token,omitempty"` //needed to receive DNA notifications per login Command wiki page
	Platform                string       `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`                    //needed to receive DNA notifications per login Command wiki page
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{7}
}

func (x *LoginRequest) GetAuthRequest() *AuthRequest {
	if x != nil {
		return x.AuthRequest
	}
	return nil
}

func (x *LoginRequest) GetLoginType() LoginType {
	if x != nil {
		return x.LoginType
	}
	return LoginType_NORMAL
}

func (x *LoginRequest) GetAuthenticationHashPrime() []byte {
	if x != nil {
		return x.AuthenticationHashPrime
	}
	return nil
}

func (x *LoginRequest) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

func (x *LoginRequest) GetAuthResponse() []byte {
	if x != nil {
		return x.AuthResponse
	}
	return nil
}

func (x *LoginRequest) GetMcEnterpriseId() int32 {
	if x != nil {
		return x.McEnterpriseId
	}
	return 0
}

func (x *LoginRequest) GetPushToken() string {
	if x != nil {
		return x.PushToken
	}
	return ""
}

func (x *LoginRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type DeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken []byte       `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	Status               DeviceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=Authentication.DeviceStatus" json:"status,omitempty"`
}

func (x *DeviceResponse) Reset() {
	*x = DeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceResponse) ProtoMessage() {}

func (x *DeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceResponse.ProtoReflect.Descriptor instead.
func (*DeviceResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceResponse) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *DeviceResponse) GetStatus() DeviceStatus {
	if x != nil {
		return x.Status
	}
	return DeviceStatus_DEVICE_NEEDS_APPROVAL
}

type Salt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iterations int32  `protobuf:"varint,1,opt,name=iterations,proto3" json:"iterations,omitempty"`
	Salt       []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Algorithm  int32  `protobuf:"varint,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Uid        []byte `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Salt) Reset() {
	*x = Salt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Salt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Salt) ProtoMessage() {}

func (x *Salt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Salt.ProtoReflect.Descriptor instead.
func (*Salt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{9}
}

func (x *Salt) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *Salt) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *Salt) GetAlgorithm() int32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *Salt) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *Salt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TwoFactorChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *TwoFactorChannel) Reset() {
	*x = TwoFactorChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorChannel) ProtoMessage() {}

func (x *TwoFactorChannel) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorChannel.ProtoReflect.Descriptor instead.
func (*TwoFactorChannel) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{10}
}

func (x *TwoFactorChannel) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type StartLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken []byte      `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	Username             string      `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ClientVersion        string      `protobuf:"bytes,3,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	MessageSessionUid    []byte      `protobuf:"bytes,4,opt,name=messageSessionUid,proto3" json:"messageSessionUid,omitempty"`
	EncryptedLoginToken  []byte      `protobuf:"bytes,5,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
	LoginType            LoginType   `protobuf:"varint,6,opt,name=loginType,proto3,enum=Authentication.LoginType" json:"loginType,omitempty"`
	McEnterpriseId       int32       `protobuf:"varint,7,opt,name=mcEnterpriseId,proto3" json:"mcEnterpriseId,omitempty"`
	LoginMethod          LoginMethod `protobuf:"varint,8,opt,name=loginMethod,proto3,enum=Authentication.LoginMethod" json:"loginMethod,omitempty"`
	ForceNewLogin        bool        `protobuf:"varint,9,opt,name=forceNewLogin,proto3" json:"forceNewLogin,omitempty"`
	CloneCode            []byte      `protobuf:"bytes,10,opt,name=cloneCode,proto3" json:"cloneCode,omitempty"`
	V2TwoFactorToken     string      `protobuf:"bytes,11,opt,name=v2TwoFactorToken,proto3" json:"v2TwoFactorToken,omitempty"`
	AccountUid           []byte      `protobuf:"bytes,12,opt,name=accountUid,proto3" json:"accountUid,omitempty"` //for think clients, if supplied and accountUid != user's accountUid return error reset_cache_invalid_account_uid
}

func (x *StartLoginRequest) Reset() {
	*x = StartLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartLoginRequest) ProtoMessage() {}

func (x *StartLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartLoginRequest.ProtoReflect.Descriptor instead.
func (*StartLoginRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{11}
}

func (x *StartLoginRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *StartLoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *StartLoginRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *StartLoginRequest) GetMessageSessionUid() []byte {
	if x != nil {
		return x.MessageSessionUid
	}
	return nil
}

func (x *StartLoginRequest) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

func (x *StartLoginRequest) GetLoginType() LoginType {
	if x != nil {
		return x.LoginType
	}
	return LoginType_NORMAL
}

func (x *StartLoginRequest) GetMcEnterpriseId() int32 {
	if x != nil {
		return x.McEnterpriseId
	}
	return 0
}

func (x *StartLoginRequest) GetLoginMethod() LoginMethod {
	if x != nil {
		return x.LoginMethod
	}
	return LoginMethod_INVALID_LOGINMETHOD
}

func (x *StartLoginRequest) GetForceNewLogin() bool {
	if x != nil {
		return x.ForceNewLogin
	}
	return false
}

func (x *StartLoginRequest) GetCloneCode() []byte {
	if x != nil {
		return x.CloneCode
	}
	return nil
}

func (x *StartLoginRequest) GetV2TwoFactorToken() string {
	if x != nil {
		return x.V2TwoFactorToken
	}
	return ""
}

func (x *StartLoginRequest) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginState               LoginState              `protobuf:"varint,1,opt,name=loginState,proto3,enum=Authentication.LoginState" json:"loginState,omitempty"`
	AccountUid               []byte                  `protobuf:"bytes,2,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
	PrimaryUsername          string                  `protobuf:"bytes,3,opt,name=primaryUsername,proto3" json:"primaryUsername,omitempty"`
	EncryptedDataKey         []byte                  `protobuf:"bytes,4,opt,name=encryptedDataKey,proto3" json:"encryptedDataKey,omitempty"`
	EncryptedDataKeyType     EncryptedDataKeyType    `protobuf:"varint,5,opt,name=encryptedDataKeyType,proto3,enum=Authentication.EncryptedDataKeyType" json:"encryptedDataKeyType,omitempty"`
	EncryptedLoginToken      []byte                  `protobuf:"bytes,6,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
	EncryptedSessionToken    []byte                  `protobuf:"bytes,7,opt,name=encryptedSessionToken,proto3" json:"encryptedSessionToken,omitempty"`
	SessionTokenType         SessionTokenType        `protobuf:"varint,8,opt,name=sessionTokenType,proto3,enum=Authentication.SessionTokenType" json:"sessionTokenType,omitempty"`
	Message                  string                  `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	Url                      string                  `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	Channels                 []*TwoFactorChannelInfo `protobuf:"bytes,11,rep,name=channels,proto3" json:"channels,omitempty"`
	Salt                     []*Salt                 `protobuf:"bytes,12,rep,name=salt,proto3" json:"salt,omitempty"`
	CloneCode                []byte                  `protobuf:"bytes,13,opt,name=cloneCode,proto3" json:"cloneCode,omitempty"`
	StateSpecificValue       string                  `protobuf:"bytes,14,opt,name=stateSpecificValue,proto3" json:"stateSpecificValue,omitempty"`
	SsoClientVersion         string                  `protobuf:"bytes,15,opt,name=ssoClientVersion,proto3" json:"ssoClientVersion,omitempty"`
	SessionTokenTypeModifier string                  `protobuf:"bytes,16,opt,name=sessionTokenTypeModifier,proto3" json:"sessionTokenTypeModifier,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{12}
}

func (x *LoginResponse) GetLoginState() LoginState {
	if x != nil {
		return x.LoginState
	}
	return LoginState_INVALID_LOGINSTATE
}

func (x *LoginResponse) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

func (x *LoginResponse) GetPrimaryUsername() string {
	if x != nil {
		return x.PrimaryUsername
	}
	return ""
}

func (x *LoginResponse) GetEncryptedDataKey() []byte {
	if x != nil {
		return x.EncryptedDataKey
	}
	return nil
}

func (x *LoginResponse) GetEncryptedDataKeyType() EncryptedDataKeyType {
	if x != nil {
		return x.EncryptedDataKeyType
	}
	return EncryptedDataKeyType_NO_KEY
}

func (x *LoginResponse) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

func (x *LoginResponse) GetEncryptedSessionToken() []byte {
	if x != nil {
		return x.EncryptedSessionToken
	}
	return nil
}

func (x *LoginResponse) GetSessionTokenType() SessionTokenType {
	if x != nil {
		return x.SessionTokenType
	}
	return SessionTokenType_NO_RESTRICTION
}

func (x *LoginResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoginResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LoginResponse) GetChannels() []*TwoFactorChannelInfo {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *LoginResponse) GetSalt() []*Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *LoginResponse) GetCloneCode() []byte {
	if x != nil {
		return x.CloneCode
	}
	return nil
}

func (x *LoginResponse) GetStateSpecificValue() string {
	if x != nil {
		return x.StateSpecificValue
	}
	return ""
}

func (x *LoginResponse) GetSsoClientVersion() string {
	if x != nil {
		return x.SsoClientVersion
	}
	return ""
}

func (x *LoginResponse) GetSessionTokenTypeModifier() string {
	if x != nil {
		return x.SessionTokenTypeModifier
	}
	return ""
}

type SsoUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName     string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName,omitempty"`
	SamlRequest     string `protobuf:"bytes,2,opt,name=samlRequest,proto3" json:"samlRequest,omitempty"`
	SamlRequestType string `protobuf:"bytes,3,opt,name=samlRequestType,proto3" json:"samlRequestType,omitempty"`
	SsoDomainName   string `protobuf:"bytes,4,opt,name=ssoDomainName,proto3" json:"ssoDomainName,omitempty"`
	LoginUrl        string `protobuf:"bytes,5,opt,name=loginUrl,proto3" json:"loginUrl,omitempty"`
	LogoutUrl       string `protobuf:"bytes,6,opt,name=logoutUrl,proto3" json:"logoutUrl,omitempty"`
}

func (x *SsoUserInfo) Reset() {
	*x = SsoUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsoUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsoUserInfo) ProtoMessage() {}

func (x *SsoUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsoUserInfo.ProtoReflect.Descriptor instead.
func (*SsoUserInfo) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{13}
}

func (x *SsoUserInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *SsoUserInfo) GetSamlRequest() string {
	if x != nil {
		return x.SamlRequest
	}
	return ""
}

func (x *SsoUserInfo) GetSamlRequestType() string {
	if x != nil {
		return x.SamlRequestType
	}
	return ""
}

func (x *SsoUserInfo) GetSsoDomainName() string {
	if x != nil {
		return x.SsoDomainName
	}
	return ""
}

func (x *SsoUserInfo) GetLoginUrl() string {
	if x != nil {
		return x.LoginUrl
	}
	return ""
}

func (x *SsoUserInfo) GetLogoutUrl() string {
	if x != nil {
		return x.LogoutUrl
	}
	return ""
}

type PreLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceStatus   DeviceStatus        `protobuf:"varint,1,opt,name=deviceStatus,proto3,enum=Authentication.DeviceStatus" json:"deviceStatus,omitempty"`
	Salt           []*Salt             `protobuf:"bytes,2,rep,name=salt,proto3" json:"salt,omitempty"`
	OBSOLETE_FIELD []*TwoFactorChannel `protobuf:"bytes,3,rep,name=OBSOLETE_FIELD,json=OBSOLETEFIELD,proto3" json:"OBSOLETE_FIELD,omitempty"` //DO NOT RE-USE. placeholder for backwards compatability
	SsoUserInfo    *SsoUserInfo        `protobuf:"bytes,4,opt,name=ssoUserInfo,proto3" json:"ssoUserInfo,omitempty"`
}

func (x *PreLoginResponse) Reset() {
	*x = PreLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreLoginResponse) ProtoMessage() {}

func (x *PreLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreLoginResponse.ProtoReflect.Descriptor instead.
func (*PreLoginResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{14}
}

func (x *PreLoginResponse) GetDeviceStatus() DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return DeviceStatus_DEVICE_NEEDS_APPROVAL
}

func (x *PreLoginResponse) GetSalt() []*Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *PreLoginResponse) GetOBSOLETE_FIELD() []*TwoFactorChannel {
	if x != nil {
		return x.OBSOLETE_FIELD
	}
	return nil
}

func (x *PreLoginResponse) GetSsoUserInfo() *SsoUserInfo {
	if x != nil {
		return x.SsoUserInfo
	}
	return nil
}

type LoginAsUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *LoginAsUserRequest) Reset() {
	*x = LoginAsUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAsUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAsUserRequest) ProtoMessage() {}

func (x *LoginAsUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAsUserRequest.ProtoReflect.Descriptor instead.
func (*LoginAsUserRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{15}
}

func (x *LoginAsUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type LoginAsUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedSessionToken     []byte `protobuf:"bytes,1,opt,name=encryptedSessionToken,proto3" json:"encryptedSessionToken,omitempty"`
	EncryptedSharedAccountKey []byte `protobuf:"bytes,2,opt,name=encryptedSharedAccountKey,proto3" json:"encryptedSharedAccountKey,omitempty"`
}

func (x *LoginAsUserResponse) Reset() {
	*x = LoginAsUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAsUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAsUserResponse) ProtoMessage() {}

func (x *LoginAsUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAsUserResponse.ProtoReflect.Descriptor instead.
func (*LoginAsUserResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{16}
}

func (x *LoginAsUserResponse) GetEncryptedSessionToken() []byte {
	if x != nil {
		return x.EncryptedSessionToken
	}
	return nil
}

func (x *LoginAsUserResponse) GetEncryptedSharedAccountKey() []byte {
	if x != nil {
		return x.EncryptedSharedAccountKey
	}
	return nil
}

type ValidateAuthHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PasswordMethod      PasswordMethod `protobuf:"varint,1,opt,name=passwordMethod,proto3,enum=Authentication.PasswordMethod" json:"passwordMethod,omitempty"`
	AuthResponse        []byte         `protobuf:"bytes,2,opt,name=authResponse,proto3" json:"authResponse,omitempty"`
	EncryptedLoginToken []byte         `protobuf:"bytes,3,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
}

func (x *ValidateAuthHashRequest) Reset() {
	*x = ValidateAuthHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAuthHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAuthHashRequest) ProtoMessage() {}

func (x *ValidateAuthHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAuthHashRequest.ProtoReflect.Descriptor instead.
func (*ValidateAuthHashRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{17}
}

func (x *ValidateAuthHashRequest) GetPasswordMethod() PasswordMethod {
	if x != nil {
		return x.PasswordMethod
	}
	return PasswordMethod_ENTERED
}

func (x *ValidateAuthHashRequest) GetAuthResponse() []byte {
	if x != nil {
		return x.AuthResponse
	}
	return nil
}

func (x *ValidateAuthHashRequest) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

type TwoFactorChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType   TwoFactorChannelType `protobuf:"varint,1,opt,name=channelType,proto3,enum=Authentication.TwoFactorChannelType" json:"channelType,omitempty"`
	ChannelUid    []byte               `protobuf:"bytes,2,opt,name=channel_uid,json=channelUid,proto3" json:"channel_uid,omitempty"`
	ChannelName   string               `protobuf:"bytes,3,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Challenge     string               `protobuf:"bytes,4,opt,name=challenge,proto3" json:"challenge,omitempty"`                                                  // for security keys
	Capabilities  []string             `protobuf:"bytes,5,rep,name=capabilities,proto3" json:"capabilities,omitempty"`                                            // for DUO
	PhoneNumber   string               `protobuf:"bytes,6,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`                                              // for SMS and DUO
	MaxExpiration TwoFactorExpiration  `protobuf:"varint,7,opt,name=maxExpiration,proto3,enum=Authentication.TwoFactorExpiration" json:"maxExpiration,omitempty"` // maximum allowed expiration
	CreatedOn     int64                `protobuf:"varint,8,opt,name=createdOn,proto3" json:"createdOn,omitempty"`
	LastFrequency TwoFactorExpiration  `protobuf:"varint,9,opt,name=lastFrequency,proto3,enum=Authentication.TwoFactorExpiration" json:"lastFrequency,omitempty"` // for login and 2fa list response
}

func (x *TwoFactorChannelInfo) Reset() {
	*x = TwoFactorChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorChannelInfo) ProtoMessage() {}

func (x *TwoFactorChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorChannelInfo.ProtoReflect.Descriptor instead.
func (*TwoFactorChannelInfo) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{18}
}

func (x *TwoFactorChannelInfo) GetChannelType() TwoFactorChannelType {
	if x != nil {
		return x.ChannelType
	}
	return TwoFactorChannelType_TWO_FA_CT_NONE
}

func (x *TwoFactorChannelInfo) GetChannelUid() []byte {
	if x != nil {
		return x.ChannelUid
	}
	return nil
}

func (x *TwoFactorChannelInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *TwoFactorChannelInfo) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *TwoFactorChannelInfo) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *TwoFactorChannelInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TwoFactorChannelInfo) GetMaxExpiration() TwoFactorExpiration {
	if x != nil {
		return x.MaxExpiration
	}
	return TwoFactorExpiration_TWO_FA_EXP_IMMEDIATELY
}

func (x *TwoFactorChannelInfo) GetCreatedOn() int64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

func (x *TwoFactorChannelInfo) GetLastFrequency() TwoFactorExpiration {
	if x != nil {
		return x.LastFrequency
	}
	return TwoFactorExpiration_TWO_FA_EXP_IMMEDIATELY
}

type TwoFactorDuoStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []string `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	PhoneNumber  string   `protobuf:"bytes,2,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	EnrollUrl    string   `protobuf:"bytes,3,opt,name=enroll_url,json=enrollUrl,proto3" json:"enroll_url,omitempty"`
	Message      string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TwoFactorDuoStatus) Reset() {
	*x = TwoFactorDuoStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorDuoStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorDuoStatus) ProtoMessage() {}

func (x *TwoFactorDuoStatus) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorDuoStatus.ProtoReflect.Descriptor instead.
func (*TwoFactorDuoStatus) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{19}
}

func (x *TwoFactorDuoStatus) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *TwoFactorDuoStatus) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TwoFactorDuoStatus) GetEnrollUrl() string {
	if x != nil {
		return x.EnrollUrl
	}
	return ""
}

func (x *TwoFactorDuoStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TwoFactorAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType TwoFactorChannelType `protobuf:"varint,1,opt,name=channelType,proto3,enum=Authentication.TwoFactorChannelType" json:"channelType,omitempty"`
	ChannelUid  []byte               `protobuf:"bytes,2,opt,name=channel_uid,json=channelUid,proto3" json:"channel_uid,omitempty"`
	ChannelName string               `protobuf:"bytes,3,opt,name=channelName,proto3" json:"channelName,omitempty"`
	PhoneNumber string               `protobuf:"bytes,4,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	DuoPushType TwoFactorPushType    `protobuf:"varint,5,opt,name=duoPushType,proto3,enum=Authentication.TwoFactorPushType" json:"duoPushType,omitempty"`
}

func (x *TwoFactorAddRequest) Reset() {
	*x = TwoFactorAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorAddRequest) ProtoMessage() {}

func (x *TwoFactorAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorAddRequest.ProtoReflect.Descriptor instead.
func (*TwoFactorAddRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{20}
}

func (x *TwoFactorAddRequest) GetChannelType() TwoFactorChannelType {
	if x != nil {
		return x.ChannelType
	}
	return TwoFactorChannelType_TWO_FA_CT_NONE
}

func (x *TwoFactorAddRequest) GetChannelUid() []byte {
	if x != nil {
		return x.ChannelUid
	}
	return nil
}

func (x *TwoFactorAddRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *TwoFactorAddRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TwoFactorAddRequest) GetDuoPushType() TwoFactorPushType {
	if x != nil {
		return x.DuoPushType
	}
	return TwoFactorPushType_TWO_FA_PUSH_NONE
}

type TwoFactorRenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelUid  []byte `protobuf:"bytes,1,opt,name=channel_uid,json=channelUid,proto3" json:"channel_uid,omitempty"`
	ChannelName string `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
}

func (x *TwoFactorRenameRequest) Reset() {
	*x = TwoFactorRenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorRenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorRenameRequest) ProtoMessage() {}

func (x *TwoFactorRenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorRenameRequest.ProtoReflect.Descriptor instead.
func (*TwoFactorRenameRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{21}
}

func (x *TwoFactorRenameRequest) GetChannelUid() []byte {
	if x != nil {
		return x.ChannelUid
	}
	return nil
}

func (x *TwoFactorRenameRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

type TwoFactorAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge  string   `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`   // for totp and security keys
	BackupKeys []string `protobuf:"bytes,2,rep,name=backupKeys,proto3" json:"backupKeys,omitempty"` // for backup keys
}

func (x *TwoFactorAddResponse) Reset() {
	*x = TwoFactorAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorAddResponse) ProtoMessage() {}

func (x *TwoFactorAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorAddResponse.ProtoReflect.Descriptor instead.
func (*TwoFactorAddResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{22}
}

func (x *TwoFactorAddResponse) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *TwoFactorAddResponse) GetBackupKeys() []string {
	if x != nil {
		return x.BackupKeys
	}
	return nil
}

type TwoFactorDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelUid []byte `protobuf:"bytes,1,opt,name=channel_uid,json=channelUid,proto3" json:"channel_uid,omitempty"`
}

func (x *TwoFactorDeleteRequest) Reset() {
	*x = TwoFactorDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorDeleteRequest) ProtoMessage() {}

func (x *TwoFactorDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorDeleteRequest.ProtoReflect.Descriptor instead.
func (*TwoFactorDeleteRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{23}
}

func (x *TwoFactorDeleteRequest) GetChannelUid() []byte {
	if x != nil {
		return x.ChannelUid
	}
	return nil
}

type TwoFactorListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []*TwoFactorChannelInfo `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	ExpireOn int64                   `protobuf:"varint,2,opt,name=expireOn,proto3" json:"expireOn,omitempty"`
}

func (x *TwoFactorListResponse) Reset() {
	*x = TwoFactorListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorListResponse) ProtoMessage() {}

func (x *TwoFactorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorListResponse.ProtoReflect.Descriptor instead.
func (*TwoFactorListResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{24}
}

func (x *TwoFactorListResponse) GetChannels() []*TwoFactorChannelInfo {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *TwoFactorListResponse) GetExpireOn() int64 {
	if x != nil {
		return x.ExpireOn
	}
	return 0
}

type TwoFactorUpdateExpirationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireIn TwoFactorExpiration `protobuf:"varint,1,opt,name=expireIn,proto3,enum=Authentication.TwoFactorExpiration" json:"expireIn,omitempty"`
}

func (x *TwoFactorUpdateExpirationRequest) Reset() {
	*x = TwoFactorUpdateExpirationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorUpdateExpirationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorUpdateExpirationRequest) ProtoMessage() {}

func (x *TwoFactorUpdateExpirationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorUpdateExpirationRequest.ProtoReflect.Descriptor instead.
func (*TwoFactorUpdateExpirationRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{25}
}

func (x *TwoFactorUpdateExpirationRequest) GetExpireIn() TwoFactorExpiration {
	if x != nil {
		return x.ExpireIn
	}
	return TwoFactorExpiration_TWO_FA_EXP_IMMEDIATELY
}

type TwoFactorValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedLoginToken []byte              `protobuf:"bytes,1,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
	ValueType           TwoFactorValueType  `protobuf:"varint,2,opt,name=valueType,proto3,enum=Authentication.TwoFactorValueType" json:"valueType,omitempty"`
	Value               string              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ChannelUid          []byte              `protobuf:"bytes,4,opt,name=channel_uid,json=channelUid,proto3" json:"channel_uid,omitempty"`
	ExpireIn            TwoFactorExpiration `protobuf:"varint,5,opt,name=expireIn,proto3,enum=Authentication.TwoFactorExpiration" json:"expireIn,omitempty"`
}

func (x *TwoFactorValidateRequest) Reset() {
	*x = TwoFactorValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorValidateRequest) ProtoMessage() {}

func (x *TwoFactorValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorValidateRequest.ProtoReflect.Descriptor instead.
func (*TwoFactorValidateRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{26}
}

func (x *TwoFactorValidateRequest) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

func (x *TwoFactorValidateRequest) GetValueType() TwoFactorValueType {
	if x != nil {
		return x.ValueType
	}
	return TwoFactorValueType_TWO_FA_CODE_NONE
}

func (x *TwoFactorValidateRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TwoFactorValidateRequest) GetChannelUid() []byte {
	if x != nil {
		return x.ChannelUid
	}
	return nil
}

func (x *TwoFactorValidateRequest) GetExpireIn() TwoFactorExpiration {
	if x != nil {
		return x.ExpireIn
	}
	return TwoFactorExpiration_TWO_FA_EXP_IMMEDIATELY
}

type TwoFactorValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedLoginToken []byte `protobuf:"bytes,1,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
}

func (x *TwoFactorValidateResponse) Reset() {
	*x = TwoFactorValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorValidateResponse) ProtoMessage() {}

func (x *TwoFactorValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorValidateResponse.ProtoReflect.Descriptor instead.
func (*TwoFactorValidateResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{27}
}

func (x *TwoFactorValidateResponse) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

type TwoFactorSendPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedLoginToken []byte              `protobuf:"bytes,1,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
	PushType            TwoFactorPushType   `protobuf:"varint,2,opt,name=pushType,proto3,enum=Authentication.TwoFactorPushType" json:"pushType,omitempty"`
	ChannelUid          []byte              `protobuf:"bytes,3,opt,name=channel_uid,json=channelUid,proto3" json:"channel_uid,omitempty"`
	ExpireIn            TwoFactorExpiration `protobuf:"varint,4,opt,name=expireIn,proto3,enum=Authentication.TwoFactorExpiration" json:"expireIn,omitempty"` // for TWO_FA_PUSH_KEEPER and TWO_FA_PUSH_DUO_PUSH
}

func (x *TwoFactorSendPushRequest) Reset() {
	*x = TwoFactorSendPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoFactorSendPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoFactorSendPushRequest) ProtoMessage() {}

func (x *TwoFactorSendPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoFactorSendPushRequest.ProtoReflect.Descriptor instead.
func (*TwoFactorSendPushRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{28}
}

func (x *TwoFactorSendPushRequest) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

func (x *TwoFactorSendPushRequest) GetPushType() TwoFactorPushType {
	if x != nil {
		return x.PushType
	}
	return TwoFactorPushType_TWO_FA_PUSH_NONE
}

func (x *TwoFactorSendPushRequest) GetChannelUid() []byte {
	if x != nil {
		return x.ChannelUid
	}
	return nil
}

func (x *TwoFactorSendPushRequest) GetExpireIn() TwoFactorExpiration {
	if x != nil {
		return x.ExpireIn
	}
	return TwoFactorExpiration_TWO_FA_EXP_IMMEDIATELY
}

type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created       int64         `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	Expiration    int64         `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	LicenseStatus LicenseStatus `protobuf:"varint,3,opt,name=licenseStatus,proto3,enum=Authentication.LicenseStatus" json:"licenseStatus,omitempty"`
	Paid          bool          `protobuf:"varint,4,opt,name=paid,proto3" json:"paid,omitempty"`
	Message       string        `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{29}
}

func (x *License) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *License) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *License) GetLicenseStatus() LicenseStatus {
	if x != nil {
		return x.LicenseStatus
	}
	return LicenseStatus_OTHER
}

func (x *License) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *License) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type OwnerlessRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"` // used in get request, set request, set response
	RecordKey []byte `protobuf:"bytes,2,opt,name=recordKey,proto3" json:"recordKey,omitempty"` // used in set request
	Status    int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`      // used in set response
}

func (x *OwnerlessRecord) Reset() {
	*x = OwnerlessRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerlessRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerlessRecord) ProtoMessage() {}

func (x *OwnerlessRecord) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerlessRecord.ProtoReflect.Descriptor instead.
func (*OwnerlessRecord) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{30}
}

func (x *OwnerlessRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *OwnerlessRecord) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *OwnerlessRecord) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type OwnerlessRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerlessRecord []*OwnerlessRecord `protobuf:"bytes,1,rep,name=ownerlessRecord,proto3" json:"ownerlessRecord,omitempty"`
}

func (x *OwnerlessRecords) Reset() {
	*x = OwnerlessRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerlessRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerlessRecords) ProtoMessage() {}

func (x *OwnerlessRecords) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerlessRecords.ProtoReflect.Descriptor instead.
func (*OwnerlessRecords) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{31}
}

func (x *OwnerlessRecords) GetOwnerlessRecord() []*OwnerlessRecord {
	if x != nil {
		return x.OwnerlessRecord
	}
	return nil
}

type UserAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                []byte    `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Salt               []byte    `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Iterations         int32     `protobuf:"varint,3,opt,name=iterations,proto3" json:"iterations,omitempty"`
	EncryptedClientKey []byte    `protobuf:"bytes,4,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`
	AuthHash           []byte    `protobuf:"bytes,5,opt,name=authHash,proto3" json:"authHash,omitempty"`
	EncryptedDataKey   []byte    `protobuf:"bytes,6,opt,name=encryptedDataKey,proto3" json:"encryptedDataKey,omitempty"`
	LoginType          LoginType `protobuf:"varint,7,opt,name=loginType,proto3,enum=Authentication.LoginType" json:"loginType,omitempty"`
	Name               string    `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Algorithm          int32     `protobuf:"varint,9,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
}

func (x *UserAuthRequest) Reset() {
	*x = UserAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthRequest) ProtoMessage() {}

func (x *UserAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthRequest.ProtoReflect.Descriptor instead.
func (*UserAuthRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{32}
}

func (x *UserAuthRequest) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *UserAuthRequest) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *UserAuthRequest) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *UserAuthRequest) GetEncryptedClientKey() []byte {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *UserAuthRequest) GetAuthHash() []byte {
	if x != nil {
		return x.AuthHash
	}
	return nil
}

func (x *UserAuthRequest) GetEncryptedDataKey() []byte {
	if x != nil {
		return x.EncryptedDataKey
	}
	return nil
}

func (x *UserAuthRequest) GetLoginType() LoginType {
	if x != nil {
		return x.LoginType
	}
	return LoginType_NORMAL
}

func (x *UserAuthRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserAuthRequest) GetAlgorithm() int32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

type UidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid [][]byte `protobuf:"bytes,1,rep,name=uid,proto3" json:"uid,omitempty"`
}

func (x *UidRequest) Reset() {
	*x = UidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidRequest) ProtoMessage() {}

func (x *UidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidRequest.ProtoReflect.Descriptor instead.
func (*UidRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{33}
}

func (x *UidRequest) GetUid() [][]byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

type DeviceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken []byte       `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	ClientVersion        string       `protobuf:"bytes,2,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	DeviceName           string       `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DevicePublicKey      []byte       `protobuf:"bytes,4,opt,name=devicePublicKey,proto3" json:"devicePublicKey,omitempty"`
	DeviceStatus         DeviceStatus `protobuf:"varint,5,opt,name=deviceStatus,proto3,enum=Authentication.DeviceStatus" json:"deviceStatus,omitempty"`
}

func (x *DeviceUpdateRequest) Reset() {
	*x = DeviceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUpdateRequest) ProtoMessage() {}

func (x *DeviceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUpdateRequest.ProtoReflect.Descriptor instead.
func (*DeviceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{34}
}

func (x *DeviceUpdateRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *DeviceUpdateRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceUpdateRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceUpdateRequest) GetDevicePublicKey() []byte {
	if x != nil {
		return x.DevicePublicKey
	}
	return nil
}

func (x *DeviceUpdateRequest) GetDeviceStatus() DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return DeviceStatus_DEVICE_NEEDS_APPROVAL
}

type RegisterDeviceInRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken []byte `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	ClientVersion        string `protobuf:"bytes,2,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	DeviceName           string `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DevicePublicKey      []byte `protobuf:"bytes,4,opt,name=devicePublicKey,proto3" json:"devicePublicKey,omitempty"`
}

func (x *RegisterDeviceInRegionRequest) Reset() {
	*x = RegisterDeviceInRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDeviceInRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceInRegionRequest) ProtoMessage() {}

func (x *RegisterDeviceInRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceInRegionRequest.ProtoReflect.Descriptor instead.
func (*RegisterDeviceInRegionRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{35}
}

func (x *RegisterDeviceInRegionRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *RegisterDeviceInRegionRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *RegisterDeviceInRegionRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *RegisterDeviceInRegionRequest) GetDevicePublicKey() []byte {
	if x != nil {
		return x.DevicePublicKey
	}
	return nil
}

type RegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthRequest                   *AuthRequest     `protobuf:"bytes,1,opt,name=authRequest,proto3" json:"authRequest,omitempty"`
	UserAuthRequest               *UserAuthRequest `protobuf:"bytes,2,opt,name=userAuthRequest,proto3" json:"userAuthRequest,omitempty"`
	EncryptedClientKey            []byte           `protobuf:"bytes,3,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`   // encrypted with the data key
	EncryptedPrivateKey           []byte           `protobuf:"bytes,4,opt,name=encryptedPrivateKey,proto3" json:"encryptedPrivateKey,omitempty"` // encrypted with the data key
	PublicKey                     []byte           `protobuf:"bytes,5,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	VerificationCode              string           `protobuf:"bytes,6,opt,name=verificationCode,proto3" json:"verificationCode,omitempty"`
	DeprecatedAuthHashHash        []byte           `protobuf:"bytes,7,opt,name=deprecatedAuthHashHash,proto3" json:"deprecatedAuthHashHash,omitempty"` // these will be ignored once the v2 clients are obsolete
	DeprecatedEncryptedClientKey  []byte           `protobuf:"bytes,8,opt,name=deprecatedEncryptedClientKey,proto3" json:"deprecatedEncryptedClientKey,omitempty"`
	DeprecatedEncryptedPrivateKey []byte           `protobuf:"bytes,9,opt,name=deprecatedEncryptedPrivateKey,proto3" json:"deprecatedEncryptedPrivateKey,omitempty"`
	DeprecatedEncryptionParams    []byte           `protobuf:"bytes,10,opt,name=deprecatedEncryptionParams,proto3" json:"deprecatedEncryptionParams,omitempty"`
}

func (x *RegistrationRequest) Reset() {
	*x = RegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationRequest) ProtoMessage() {}

func (x *RegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationRequest.ProtoReflect.Descriptor instead.
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{36}
}

func (x *RegistrationRequest) GetAuthRequest() *AuthRequest {
	if x != nil {
		return x.AuthRequest
	}
	return nil
}

func (x *RegistrationRequest) GetUserAuthRequest() *UserAuthRequest {
	if x != nil {
		return x.UserAuthRequest
	}
	return nil
}

func (x *RegistrationRequest) GetEncryptedClientKey() []byte {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *RegistrationRequest) GetEncryptedPrivateKey() []byte {
	if x != nil {
		return x.EncryptedPrivateKey
	}
	return nil
}

func (x *RegistrationRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RegistrationRequest) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *RegistrationRequest) GetDeprecatedAuthHashHash() []byte {
	if x != nil {
		return x.DeprecatedAuthHashHash
	}
	return nil
}

func (x *RegistrationRequest) GetDeprecatedEncryptedClientKey() []byte {
	if x != nil {
		return x.DeprecatedEncryptedClientKey
	}
	return nil
}

func (x *RegistrationRequest) GetDeprecatedEncryptedPrivateKey() []byte {
	if x != nil {
		return x.DeprecatedEncryptedPrivateKey
	}
	return nil
}

func (x *RegistrationRequest) GetDeprecatedEncryptionParams() []byte {
	if x != nil {
		return x.DeprecatedEncryptionParams
	}
	return nil
}

type ConvertUserToV3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthRequest         *AuthRequest     `protobuf:"bytes,1,opt,name=authRequest,proto3" json:"authRequest,omitempty"`
	UserAuthRequest     *UserAuthRequest `protobuf:"bytes,2,opt,name=userAuthRequest,proto3" json:"userAuthRequest,omitempty"`
	EncryptedClientKey  []byte           `protobuf:"bytes,3,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`   // gcm encrypted with the data key
	EncryptedPrivateKey []byte           `protobuf:"bytes,4,opt,name=encryptedPrivateKey,proto3" json:"encryptedPrivateKey,omitempty"` // gcm encrypted with the data key
	PublicKey           []byte           `protobuf:"bytes,5,opt,name=publicKey,proto3" json:"publicKey,omitempty"`                     // TODO add alternate passwords
}

func (x *ConvertUserToV3Request) Reset() {
	*x = ConvertUserToV3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertUserToV3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertUserToV3Request) ProtoMessage() {}

func (x *ConvertUserToV3Request) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertUserToV3Request.ProtoReflect.Descriptor instead.
func (*ConvertUserToV3Request) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{37}
}

func (x *ConvertUserToV3Request) GetAuthRequest() *AuthRequest {
	if x != nil {
		return x.AuthRequest
	}
	return nil
}

func (x *ConvertUserToV3Request) GetUserAuthRequest() *UserAuthRequest {
	if x != nil {
		return x.UserAuthRequest
	}
	return nil
}

func (x *ConvertUserToV3Request) GetEncryptedClientKey() []byte {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *ConvertUserToV3Request) GetEncryptedPrivateKey() []byte {
	if x != nil {
		return x.EncryptedPrivateKey
	}
	return nil
}

func (x *ConvertUserToV3Request) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type RevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision int64 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *RevisionResponse) Reset() {
	*x = RevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionResponse) ProtoMessage() {}

func (x *RevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionResponse.ProtoReflect.Descriptor instead.
func (*RevisionResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{38}
}

func (x *RevisionResponse) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type ChangeEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewEmail string `protobuf:"bytes,1,opt,name=newEmail,proto3" json:"newEmail,omitempty"`
}

func (x *ChangeEmailRequest) Reset() {
	*x = ChangeEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEmailRequest) ProtoMessage() {}

func (x *ChangeEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEmailRequest.ProtoReflect.Descriptor instead.
func (*ChangeEmailRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{39}
}

func (x *ChangeEmailRequest) GetNewEmail() string {
	if x != nil {
		return x.NewEmail
	}
	return ""
}

type ChangeEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedChangeEmailToken []byte `protobuf:"bytes,1,opt,name=encryptedChangeEmailToken,proto3" json:"encryptedChangeEmailToken,omitempty"`
}

func (x *ChangeEmailResponse) Reset() {
	*x = ChangeEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEmailResponse) ProtoMessage() {}

func (x *ChangeEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEmailResponse.ProtoReflect.Descriptor instead.
func (*ChangeEmailResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{40}
}

func (x *ChangeEmailResponse) GetEncryptedChangeEmailToken() []byte {
	if x != nil {
		return x.EncryptedChangeEmailToken
	}
	return nil
}

type EmailVerificationLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailVerified bool `protobuf:"varint,1,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
}

func (x *EmailVerificationLinkResponse) Reset() {
	*x = EmailVerificationLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailVerificationLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailVerificationLinkResponse) ProtoMessage() {}

func (x *EmailVerificationLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailVerificationLinkResponse.ProtoReflect.Descriptor instead.
func (*EmailVerificationLinkResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{41}
}

func (x *EmailVerificationLinkResponse) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

type SecurityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  []byte `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SecurityData) Reset() {
	*x = SecurityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityData) ProtoMessage() {}

func (x *SecurityData) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityData.ProtoReflect.Descriptor instead.
func (*SecurityData) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{42}
}

func (x *SecurityData) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *SecurityData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SecurityDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordSecurityData         []*SecurityData `protobuf:"bytes,1,rep,name=recordSecurityData,proto3" json:"recordSecurityData,omitempty"`
	MasterPasswordSecurityData []*SecurityData `protobuf:"bytes,2,rep,name=masterPasswordSecurityData,proto3" json:"masterPasswordSecurityData,omitempty"`
}

func (x *SecurityDataRequest) Reset() {
	*x = SecurityDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityDataRequest) ProtoMessage() {}

func (x *SecurityDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityDataRequest.ProtoReflect.Descriptor instead.
func (*SecurityDataRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{43}
}

func (x *SecurityDataRequest) GetRecordSecurityData() []*SecurityData {
	if x != nil {
		return x.RecordSecurityData
	}
	return nil
}

func (x *SecurityDataRequest) GetMasterPasswordSecurityData() []*SecurityData {
	if x != nil {
		return x.MasterPasswordSecurityData
	}
	return nil
}

// if mp or not, by user, include reused passwords
type SecurityReportIncrementalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId            int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	CurrentSecurityData         []byte `protobuf:"bytes,2,opt,name=currentSecurityData,proto3" json:"currentSecurityData,omitempty"`
	CurrentSecurityDataRevision int64  `protobuf:"varint,3,opt,name=currentSecurityDataRevision,proto3" json:"currentSecurityDataRevision,omitempty"`
	OldSecurityData             []byte `protobuf:"bytes,4,opt,name=oldSecurityData,proto3" json:"oldSecurityData,omitempty"`
	OldSecurityDataRevision     int64  `protobuf:"varint,5,opt,name=oldSecurityDataRevision,proto3" json:"oldSecurityDataRevision,omitempty"`
}

func (x *SecurityReportIncrementalData) Reset() {
	*x = SecurityReportIncrementalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityReportIncrementalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityReportIncrementalData) ProtoMessage() {}

func (x *SecurityReportIncrementalData) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityReportIncrementalData.ProtoReflect.Descriptor instead.
func (*SecurityReportIncrementalData) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{44}
}

func (x *SecurityReportIncrementalData) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *SecurityReportIncrementalData) GetCurrentSecurityData() []byte {
	if x != nil {
		return x.CurrentSecurityData
	}
	return nil
}

func (x *SecurityReportIncrementalData) GetCurrentSecurityDataRevision() int64 {
	if x != nil {
		return x.CurrentSecurityDataRevision
	}
	return 0
}

func (x *SecurityReportIncrementalData) GetOldSecurityData() []byte {
	if x != nil {
		return x.OldSecurityData
	}
	return nil
}

func (x *SecurityReportIncrementalData) GetOldSecurityDataRevision() int64 {
	if x != nil {
		return x.OldSecurityDataRevision
	}
	return 0
}

type SecurityReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId              int64                            `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	EncryptedReportData           []byte                           `protobuf:"bytes,2,opt,name=encryptedReportData,proto3" json:"encryptedReportData,omitempty"`
	Revision                      int64                            `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`   // for save this was returned in get, for get this is the saved revision
	TwoFactor                     string                           `protobuf:"bytes,4,opt,name=twoFactor,proto3" json:"twoFactor,omitempty"`  // for get not save
	LastLogin                     int64                            `protobuf:"varint,5,opt,name=lastLogin,proto3" json:"lastLogin,omitempty"` // for get not save
	NumberOfReusedPassword        int32                            `protobuf:"varint,6,opt,name=numberOfReusedPassword,proto3" json:"numberOfReusedPassword,omitempty"`
	SecurityReportIncrementalData []*SecurityReportIncrementalData `protobuf:"bytes,7,rep,name=securityReportIncrementalData,proto3" json:"securityReportIncrementalData,omitempty"`
	UserId                        int32                            `protobuf:"varint,8,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *SecurityReport) Reset() {
	*x = SecurityReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityReport) ProtoMessage() {}

func (x *SecurityReport) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityReport.ProtoReflect.Descriptor instead.
func (*SecurityReport) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{45}
}

func (x *SecurityReport) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *SecurityReport) GetEncryptedReportData() []byte {
	if x != nil {
		return x.EncryptedReportData
	}
	return nil
}

func (x *SecurityReport) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *SecurityReport) GetTwoFactor() string {
	if x != nil {
		return x.TwoFactor
	}
	return ""
}

func (x *SecurityReport) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *SecurityReport) GetNumberOfReusedPassword() int32 {
	if x != nil {
		return x.NumberOfReusedPassword
	}
	return 0
}

func (x *SecurityReport) GetSecurityReportIncrementalData() []*SecurityReportIncrementalData {
	if x != nil {
		return x.SecurityReportIncrementalData
	}
	return nil
}

func (x *SecurityReport) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SecurityReportSaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityReport []*SecurityReport `protobuf:"bytes,1,rep,name=securityReport,proto3" json:"securityReport,omitempty"`
}

func (x *SecurityReportSaveRequest) Reset() {
	*x = SecurityReportSaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityReportSaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityReportSaveRequest) ProtoMessage() {}

func (x *SecurityReportSaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityReportSaveRequest.ProtoReflect.Descriptor instead.
func (*SecurityReportSaveRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{46}
}

func (x *SecurityReportSaveRequest) GetSecurityReport() []*SecurityReport {
	if x != nil {
		return x.SecurityReport
	}
	return nil
}

type SecurityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPage int64 `protobuf:"varint,1,opt,name=fromPage,proto3" json:"fromPage,omitempty"`
}

func (x *SecurityReportRequest) Reset() {
	*x = SecurityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityReportRequest) ProtoMessage() {}

func (x *SecurityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityReportRequest.ProtoReflect.Descriptor instead.
func (*SecurityReportRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{47}
}

func (x *SecurityReportRequest) GetFromPage() int64 {
	if x != nil {
		return x.FromPage
	}
	return 0
}

type SecurityReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterprisePrivateKey []byte            `protobuf:"bytes,1,opt,name=enterprisePrivateKey,proto3" json:"enterprisePrivateKey,omitempty"`
	SecurityReport       []*SecurityReport `protobuf:"bytes,2,rep,name=securityReport,proto3" json:"securityReport,omitempty"`
	AsOfRevision         int64             `protobuf:"varint,3,opt,name=asOfRevision,proto3" json:"asOfRevision,omitempty"` // the revision the data was retrieved for
	FromPage             int64             `protobuf:"varint,4,opt,name=fromPage,proto3" json:"fromPage,omitempty"`
	ToPage               int64             `protobuf:"varint,5,opt,name=toPage,proto3" json:"toPage,omitempty"`
	Complete             bool              `protobuf:"varint,6,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (x *SecurityReportResponse) Reset() {
	*x = SecurityReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityReportResponse) ProtoMessage() {}

func (x *SecurityReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityReportResponse.ProtoReflect.Descriptor instead.
func (*SecurityReportResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{48}
}

func (x *SecurityReportResponse) GetEnterprisePrivateKey() []byte {
	if x != nil {
		return x.EnterprisePrivateKey
	}
	return nil
}

func (x *SecurityReportResponse) GetSecurityReport() []*SecurityReport {
	if x != nil {
		return x.SecurityReport
	}
	return nil
}

func (x *SecurityReportResponse) GetAsOfRevision() int64 {
	if x != nil {
		return x.AsOfRevision
	}
	return 0
}

func (x *SecurityReportResponse) GetFromPage() int64 {
	if x != nil {
		return x.FromPage
	}
	return 0
}

func (x *SecurityReportResponse) GetToPage() int64 {
	if x != nil {
		return x.ToPage
	}
	return 0
}

func (x *SecurityReportResponse) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

type ReusedPasswordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ReusedPasswordsRequest) Reset() {
	*x = ReusedPasswordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReusedPasswordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReusedPasswordsRequest) ProtoMessage() {}

func (x *ReusedPasswordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReusedPasswordsRequest.ProtoReflect.Descriptor instead.
func (*ReusedPasswordsRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{49}
}

func (x *ReusedPasswordsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SummaryConsoleReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportType int32  `protobuf:"varint,1,opt,name=reportType,proto3" json:"reportType,omitempty"`
	ReportData []byte `protobuf:"bytes,2,opt,name=reportData,proto3" json:"reportData,omitempty"`
}

func (x *SummaryConsoleReport) Reset() {
	*x = SummaryConsoleReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryConsoleReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryConsoleReport) ProtoMessage() {}

func (x *SummaryConsoleReport) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryConsoleReport.ProtoReflect.Descriptor instead.
func (*SummaryConsoleReport) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{50}
}

func (x *SummaryConsoleReport) GetReportType() int32 {
	if x != nil {
		return x.ReportType
	}
	return 0
}

func (x *SummaryConsoleReport) GetReportData() []byte {
	if x != nil {
		return x.ReportData
	}
	return nil
}

type ChangeToKeyTypeOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectType   ObjectTypes `protobuf:"varint,1,opt,name=objectType,proto3,enum=Authentication.ObjectTypes" json:"objectType,omitempty"`
	PrimaryUid   []byte      `protobuf:"bytes,2,opt,name=primaryUid,proto3" json:"primaryUid,omitempty"`
	SecondaryUid []byte      `protobuf:"bytes,3,opt,name=secondaryUid,proto3" json:"secondaryUid,omitempty"`
	Key          []byte      `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ChangeToKeyTypeOne) Reset() {
	*x = ChangeToKeyTypeOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeToKeyTypeOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeToKeyTypeOne) ProtoMessage() {}

func (x *ChangeToKeyTypeOne) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeToKeyTypeOne.ProtoReflect.Descriptor instead.
func (*ChangeToKeyTypeOne) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{51}
}

func (x *ChangeToKeyTypeOne) GetObjectType() ObjectTypes {
	if x != nil {
		return x.ObjectType
	}
	return ObjectTypes_RECORD
}

func (x *ChangeToKeyTypeOne) GetPrimaryUid() []byte {
	if x != nil {
		return x.PrimaryUid
	}
	return nil
}

func (x *ChangeToKeyTypeOne) GetSecondaryUid() []byte {
	if x != nil {
		return x.SecondaryUid
	}
	return nil
}

func (x *ChangeToKeyTypeOne) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type ChangeToKeyTypeOneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeToKeyTypeOne []*ChangeToKeyTypeOne `protobuf:"bytes,1,rep,name=changeToKeyTypeOne,proto3" json:"changeToKeyTypeOne,omitempty"`
}

func (x *ChangeToKeyTypeOneRequest) Reset() {
	*x = ChangeToKeyTypeOneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeToKeyTypeOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeToKeyTypeOneRequest) ProtoMessage() {}

func (x *ChangeToKeyTypeOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeToKeyTypeOneRequest.ProtoReflect.Descriptor instead.
func (*ChangeToKeyTypeOneRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{52}
}

func (x *ChangeToKeyTypeOneRequest) GetChangeToKeyTypeOne() []*ChangeToKeyTypeOne {
	if x != nil {
		return x.ChangeToKeyTypeOne
	}
	return nil
}

type ChangeToKeyTypeOneStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    []byte `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ChangeToKeyTypeOneStatus) Reset() {
	*x = ChangeToKeyTypeOneStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeToKeyTypeOneStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeToKeyTypeOneStatus) ProtoMessage() {}

func (x *ChangeToKeyTypeOneStatus) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeToKeyTypeOneStatus.ProtoReflect.Descriptor instead.
func (*ChangeToKeyTypeOneStatus) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{53}
}

func (x *ChangeToKeyTypeOneStatus) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ChangeToKeyTypeOneStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChangeToKeyTypeOneStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChangeToKeyTypeOneStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ChangeToKeyTypeOneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeToKeyTypeOneStatus []*ChangeToKeyTypeOneStatus `protobuf:"bytes,1,rep,name=changeToKeyTypeOneStatus,proto3" json:"changeToKeyTypeOneStatus,omitempty"`
}

func (x *ChangeToKeyTypeOneResponse) Reset() {
	*x = ChangeToKeyTypeOneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeToKeyTypeOneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeToKeyTypeOneResponse) ProtoMessage() {}

func (x *ChangeToKeyTypeOneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeToKeyTypeOneResponse.ProtoReflect.Descriptor instead.
func (*ChangeToKeyTypeOneResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{54}
}

func (x *ChangeToKeyTypeOneResponse) GetChangeToKeyTypeOneStatus() []*ChangeToKeyTypeOneStatus {
	if x != nil {
		return x.ChangeToKeyTypeOneStatus
	}
	return nil
}

type SetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`  // role_id
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"` // role key GCM encrypted with the tree key
}

func (x *SetKey) Reset() {
	*x = SetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKey) ProtoMessage() {}

func (x *SetKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKey.ProtoReflect.Descriptor instead.
func (*SetKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{55}
}

func (x *SetKey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type SetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*SetKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SetKeyRequest) Reset() {
	*x = SetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyRequest) ProtoMessage() {}

func (x *SetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyRequest.ProtoReflect.Descriptor instead.
func (*SetKeyRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{56}
}

func (x *SetKeyRequest) GetKeys() []*SetKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username                   string                                   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`                             // must be valid email
	AuthVerifier               []byte                                   `protobuf:"bytes,2,opt,name=authVerifier,proto3" json:"authVerifier,omitempty"`                     //new Field("auth_verifier", new AuthVerifierFieldValidator(), true); size=(70, 70)?
	EncryptionParams           []byte                                   `protobuf:"bytes,3,opt,name=encryptionParams,proto3" json:"encryptionParams,omitempty"`             //new Field("encryption_params", new EncryptionParamsFieldValidator(), true); size=(134, 134)?
	RsaPublicKey               []byte                                   `protobuf:"bytes,4,opt,name=rsaPublicKey,proto3" json:"rsaPublicKey,omitempty"`                     //new Field("public_key", new PublicKeyFieldValidator(), true); size=(10, 2000)?
	RsaEncryptedPrivateKey     []byte                                   `protobuf:"bytes,5,opt,name=rsaEncryptedPrivateKey,proto3" json:"rsaEncryptedPrivateKey,omitempty"` //new Field("encrypted_private_key", new DataKeyEncPrivateKeyFieldValidator(), true); size=(10, 2000)?
	EccPublicKey               []byte                                   `protobuf:"bytes,6,opt,name=eccPublicKey,proto3" json:"eccPublicKey,omitempty"`                     // 65 bytes, on curve
	EccEncryptedPrivateKey     []byte                                   `protobuf:"bytes,7,opt,name=eccEncryptedPrivateKey,proto3" json:"eccEncryptedPrivateKey,omitempty"` // 60 bytes
	EncryptedDeviceToken       []byte                                   `protobuf:"bytes,8,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`     // 65 bytes
	EncryptedClientKey         []byte                                   `protobuf:"bytes,9,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`         // switch to gcm? old clients can't be used 60 bytes, otherwise 64 bytes; new Field("client_key", new DataKeyEncDataKeyFieldValidator(), false);
	ClientVersion              string                                   `protobuf:"bytes,10,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	EncryptedDeviceDataKey     []byte                                   `protobuf:"bytes,11,opt,name=encryptedDeviceDataKey,proto3" json:"encryptedDeviceDataKey,omitempty"` // have to check
	EncryptedLoginToken        []byte                                   `protobuf:"bytes,12,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`       // this is from cloud sso
	MessageSessionUid          []byte                                   `protobuf:"bytes,13,opt,name=messageSessionUid,proto3" json:"messageSessionUid,omitempty"`
	InstallReferrer            string                                   `protobuf:"bytes,14,opt,name=installReferrer,proto3" json:"installReferrer,omitempty"` //new Field("install_referrer", new StringFieldValidator(0, 1024), false); size=(0, 1024)?
	MccMNC                     int32                                    `protobuf:"varint,15,opt,name=mccMNC,proto3" json:"mccMNC,omitempty"`                  //input.optString("mcc_mnc") in verifyDevice(); carrier_sim_codes.mcc_mnc int(6)
	Mfg                        string                                   `protobuf:"bytes,16,opt,name=mfg,proto3" json:"mfg,omitempty"`                         //input.optString("mfg") in verifyDevice(); appstore_device_history.mfg char(64)
	Model                      string                                   `protobuf:"bytes,17,opt,name=model,proto3" json:"model,omitempty"`                     //input.optString("model") in verifyDevice(); appstore_device_history.model char(64)
	Brand                      string                                   `protobuf:"bytes,18,opt,name=brand,proto3" json:"brand,omitempty"`                     //input.optString("brand") in verifyDevice(); appstore_device_history.brand char(64)
	Product                    string                                   `protobuf:"bytes,19,opt,name=product,proto3" json:"product,omitempty"`                 //input.optString("product") in verifyDevice(); appstore_device_history.product char(64)
	Device                     string                                   `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`                   //input.optString("device"); used in PromotionMatcher; appstore_device_history.device char(64)?
	Carrier                    string                                   `protobuf:"bytes,21,opt,name=carrier,proto3" json:"carrier,omitempty"`                 //input.optString("carrier"); used in PromotionMatcher; appstore_device_history.carrier char(64)?
	VerificationCode           string                                   `protobuf:"bytes,22,opt,name=verificationCode,proto3" json:"verificationCode,omitempty"`
	EnterpriseRegistration     *proto_enterprise.EnterpriseRegistration `protobuf:"bytes,23,opt,name=enterpriseRegistration,proto3" json:"enterpriseRegistration,omitempty"` // optinal for creating an account when creating an enterprise
	EncryptedVerificationToken []byte                                   `protobuf:"bytes,24,opt,name=encryptedVerificationToken,proto3" json:"encryptedVerificationToken,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{57}
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetAuthVerifier() []byte {
	if x != nil {
		return x.AuthVerifier
	}
	return nil
}

func (x *CreateUserRequest) GetEncryptionParams() []byte {
	if x != nil {
		return x.EncryptionParams
	}
	return nil
}

func (x *CreateUserRequest) GetRsaPublicKey() []byte {
	if x != nil {
		return x.RsaPublicKey
	}
	return nil
}

func (x *CreateUserRequest) GetRsaEncryptedPrivateKey() []byte {
	if x != nil {
		return x.RsaEncryptedPrivateKey
	}
	return nil
}

func (x *CreateUserRequest) GetEccPublicKey() []byte {
	if x != nil {
		return x.EccPublicKey
	}
	return nil
}

func (x *CreateUserRequest) GetEccEncryptedPrivateKey() []byte {
	if x != nil {
		return x.EccEncryptedPrivateKey
	}
	return nil
}

func (x *CreateUserRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *CreateUserRequest) GetEncryptedClientKey() []byte {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *CreateUserRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *CreateUserRequest) GetEncryptedDeviceDataKey() []byte {
	if x != nil {
		return x.EncryptedDeviceDataKey
	}
	return nil
}

func (x *CreateUserRequest) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

func (x *CreateUserRequest) GetMessageSessionUid() []byte {
	if x != nil {
		return x.MessageSessionUid
	}
	return nil
}

func (x *CreateUserRequest) GetInstallReferrer() string {
	if x != nil {
		return x.InstallReferrer
	}
	return ""
}

func (x *CreateUserRequest) GetMccMNC() int32 {
	if x != nil {
		return x.MccMNC
	}
	return 0
}

func (x *CreateUserRequest) GetMfg() string {
	if x != nil {
		return x.Mfg
	}
	return ""
}

func (x *CreateUserRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateUserRequest) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *CreateUserRequest) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CreateUserRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *CreateUserRequest) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *CreateUserRequest) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *CreateUserRequest) GetEnterpriseRegistration() *proto_enterprise.EnterpriseRegistration {
	if x != nil {
		return x.EnterpriseRegistration
	}
	return nil
}

func (x *CreateUserRequest) GetEncryptedVerificationToken() []byte {
	if x != nil {
		return x.EncryptedVerificationToken
	}
	return nil
}

type NodeEnforcementAddOrUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Enforcement string `protobuf:"bytes,2,opt,name=enforcement,proto3" json:"enforcement,omitempty"`
	Value       string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NodeEnforcementAddOrUpdateRequest) Reset() {
	*x = NodeEnforcementAddOrUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeEnforcementAddOrUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeEnforcementAddOrUpdateRequest) ProtoMessage() {}

func (x *NodeEnforcementAddOrUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeEnforcementAddOrUpdateRequest.ProtoReflect.Descriptor instead.
func (*NodeEnforcementAddOrUpdateRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{58}
}

func (x *NodeEnforcementAddOrUpdateRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeEnforcementAddOrUpdateRequest) GetEnforcement() string {
	if x != nil {
		return x.Enforcement
	}
	return ""
}

func (x *NodeEnforcementAddOrUpdateRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NodeEnforcementRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Enforcement string `protobuf:"bytes,2,opt,name=enforcement,proto3" json:"enforcement,omitempty"`
}

func (x *NodeEnforcementRemoveRequest) Reset() {
	*x = NodeEnforcementRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeEnforcementRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeEnforcementRemoveRequest) ProtoMessage() {}

func (x *NodeEnforcementRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeEnforcementRemoveRequest.ProtoReflect.Descriptor instead.
func (*NodeEnforcementRemoveRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{59}
}

func (x *NodeEnforcementRemoveRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeEnforcementRemoveRequest) GetEnforcement() string {
	if x != nil {
		return x.Enforcement
	}
	return ""
}

type ApiRequestByKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId             int32             `protobuf:"varint,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Payload           []byte            `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Username          string            `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Locale            string            `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	SupportedLanguage SupportedLanguage `protobuf:"varint,5,opt,name=supportedLanguage,proto3,enum=Authentication.SupportedLanguage" json:"supportedLanguage,omitempty"`
	Type              int32             `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ApiRequestByKey) Reset() {
	*x = ApiRequestByKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiRequestByKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiRequestByKey) ProtoMessage() {}

func (x *ApiRequestByKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiRequestByKey.ProtoReflect.Descriptor instead.
func (*ApiRequestByKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{60}
}

func (x *ApiRequestByKey) GetKeyId() int32 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ApiRequestByKey) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ApiRequestByKey) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ApiRequestByKey) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *ApiRequestByKey) GetSupportedLanguage() SupportedLanguage {
	if x != nil {
		return x.SupportedLanguage
	}
	return SupportedLanguage_ENGLISH
}

func (x *ApiRequestByKey) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ApiRequestByKAtoKAKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceRegion      Region            `protobuf:"varint,1,opt,name=sourceRegion,proto3,enum=Authentication.Region" json:"sourceRegion,omitempty"`
	Payload           []byte            `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	SupportedLanguage SupportedLanguage `protobuf:"varint,3,opt,name=supportedLanguage,proto3,enum=Authentication.SupportedLanguage" json:"supportedLanguage,omitempty"`
	DestinationRegion Region            `protobuf:"varint,4,opt,name=destinationRegion,proto3,enum=Authentication.Region" json:"destinationRegion,omitempty"`
}

func (x *ApiRequestByKAtoKAKey) Reset() {
	*x = ApiRequestByKAtoKAKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiRequestByKAtoKAKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiRequestByKAtoKAKey) ProtoMessage() {}

func (x *ApiRequestByKAtoKAKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiRequestByKAtoKAKey.ProtoReflect.Descriptor instead.
func (*ApiRequestByKAtoKAKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{61}
}

func (x *ApiRequestByKAtoKAKey) GetSourceRegion() Region {
	if x != nil {
		return x.SourceRegion
	}
	return Region_UNKNOWN
}

func (x *ApiRequestByKAtoKAKey) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ApiRequestByKAtoKAKey) GetSupportedLanguage() SupportedLanguage {
	if x != nil {
		return x.SupportedLanguage
	}
	return SupportedLanguage_ENGLISH
}

func (x *ApiRequestByKAtoKAKey) GetDestinationRegion() Region {
	if x != nil {
		return x.DestinationRegion
	}
	return Region_UNKNOWN
}

type MemcacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	UserId int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *MemcacheRequest) Reset() {
	*x = MemcacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemcacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemcacheRequest) ProtoMessage() {}

func (x *MemcacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemcacheRequest.ProtoReflect.Descriptor instead.
func (*MemcacheRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{62}
}

func (x *MemcacheRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MemcacheRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type MemcacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MemcacheResponse) Reset() {
	*x = MemcacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemcacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemcacheResponse) ProtoMessage() {}

func (x *MemcacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemcacheResponse.ProtoReflect.Descriptor instead.
func (*MemcacheResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{63}
}

func (x *MemcacheResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MemcacheResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type MasterPasswordReentryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pbkdf2Password string                          `protobuf:"bytes,1,opt,name=pbkdf2Password,proto3" json:"pbkdf2Password,omitempty"`
	Action         MasterPasswordReentryActionType `protobuf:"varint,2,opt,name=action,proto3,enum=Authentication.MasterPasswordReentryActionType" json:"action,omitempty"`
}

func (x *MasterPasswordReentryRequest) Reset() {
	*x = MasterPasswordReentryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterPasswordReentryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterPasswordReentryRequest) ProtoMessage() {}

func (x *MasterPasswordReentryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterPasswordReentryRequest.ProtoReflect.Descriptor instead.
func (*MasterPasswordReentryRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{64}
}

func (x *MasterPasswordReentryRequest) GetPbkdf2Password() string {
	if x != nil {
		return x.Pbkdf2Password
	}
	return ""
}

func (x *MasterPasswordReentryRequest) GetAction() MasterPasswordReentryActionType {
	if x != nil {
		return x.Action
	}
	return MasterPasswordReentryActionType_UNMASK
}

type MasterPasswordReentryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status MasterPasswordReentryStatus `protobuf:"varint,1,opt,name=status,proto3,enum=Authentication.MasterPasswordReentryStatus" json:"status,omitempty"`
}

func (x *MasterPasswordReentryResponse) Reset() {
	*x = MasterPasswordReentryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterPasswordReentryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterPasswordReentryResponse) ProtoMessage() {}

func (x *MasterPasswordReentryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterPasswordReentryResponse.ProtoReflect.Descriptor instead.
func (*MasterPasswordReentryResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{65}
}

func (x *MasterPasswordReentryResponse) GetStatus() MasterPasswordReentryStatus {
	if x != nil {
		return x.Status
	}
	return MasterPasswordReentryStatus_MP_UNKNOWN
}

type DeviceRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion   string `protobuf:"bytes,1,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	DeviceName      string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DevicePublicKey []byte `protobuf:"bytes,3,opt,name=devicePublicKey,proto3" json:"devicePublicKey,omitempty"`
}

func (x *DeviceRegistrationRequest) Reset() {
	*x = DeviceRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRegistrationRequest) ProtoMessage() {}

func (x *DeviceRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRegistrationRequest.ProtoReflect.Descriptor instead.
func (*DeviceRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{66}
}

func (x *DeviceRegistrationRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceRegistrationRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceRegistrationRequest) GetDevicePublicKey() []byte {
	if x != nil {
		return x.DevicePublicKey
	}
	return nil
}

type DeviceVerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken []byte `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	Username             string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	VerificationChannel  string `protobuf:"bytes,3,opt,name=verificationChannel,proto3" json:"verificationChannel,omitempty"` // email for now, could be "sms" if we allow username as cell number in the future.
	MessageSessionUid    []byte `protobuf:"bytes,4,opt,name=messageSessionUid,proto3" json:"messageSessionUid,omitempty"`
	ClientVersion        string `protobuf:"bytes,5,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
}

func (x *DeviceVerificationRequest) Reset() {
	*x = DeviceVerificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceVerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceVerificationRequest) ProtoMessage() {}

func (x *DeviceVerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceVerificationRequest.ProtoReflect.Descriptor instead.
func (*DeviceVerificationRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{67}
}

func (x *DeviceVerificationRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *DeviceVerificationRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceVerificationRequest) GetVerificationChannel() string {
	if x != nil {
		return x.VerificationChannel
	}
	return ""
}

func (x *DeviceVerificationRequest) GetMessageSessionUid() []byte {
	if x != nil {
		return x.MessageSessionUid
	}
	return nil
}

func (x *DeviceVerificationRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type DeviceVerificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken []byte       `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	Username             string       `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	MessageSessionUid    []byte       `protobuf:"bytes,3,opt,name=messageSessionUid,proto3" json:"messageSessionUid,omitempty"`
	ClientVersion        string       `protobuf:"bytes,4,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	DeviceStatus         DeviceStatus `protobuf:"varint,5,opt,name=deviceStatus,proto3,enum=Authentication.DeviceStatus" json:"deviceStatus,omitempty"`
}

func (x *DeviceVerificationResponse) Reset() {
	*x = DeviceVerificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceVerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceVerificationResponse) ProtoMessage() {}

func (x *DeviceVerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceVerificationResponse.ProtoReflect.Descriptor instead.
func (*DeviceVerificationResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{68}
}

func (x *DeviceVerificationResponse) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *DeviceVerificationResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceVerificationResponse) GetMessageSessionUid() []byte {
	if x != nil {
		return x.MessageSessionUid
	}
	return nil
}

func (x *DeviceVerificationResponse) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceVerificationResponse) GetDeviceStatus() DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return DeviceStatus_DEVICE_NEEDS_APPROVAL
}

type DeviceApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email                 string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	TwoFactorChannel      string `protobuf:"bytes,2,opt,name=twoFactorChannel,proto3" json:"twoFactorChannel,omitempty"` // TwoFactorChannel, only "sms", "duo", "on_device" or "on_approved_device"; default to email verification
	ClientVersion         string `protobuf:"bytes,3,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	Locale                string `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	EncryptedDeviceToken  []byte `protobuf:"bytes,5,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	TotpCode              string `protobuf:"bytes,6,opt,name=totpCode,proto3" json:"totpCode,omitempty"`
	DeviceIp              string `protobuf:"bytes,7,opt,name=deviceIp,proto3" json:"deviceIp,omitempty"`                           //This is the ip address of the original device that needs to be approved, which will be included in the TwoFactorToken.
	DeviceTokenExpireDays string `protobuf:"bytes,8,opt,name=deviceTokenExpireDays,proto3" json:"deviceTokenExpireDays,omitempty"` //equivalent to the device_token_expire_days that is used in the Login command
}

func (x *DeviceApprovalRequest) Reset() {
	*x = DeviceApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceApprovalRequest) ProtoMessage() {}

func (x *DeviceApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceApprovalRequest.ProtoReflect.Descriptor instead.
func (*DeviceApprovalRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{69}
}

func (x *DeviceApprovalRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DeviceApprovalRequest) GetTwoFactorChannel() string {
	if x != nil {
		return x.TwoFactorChannel
	}
	return ""
}

func (x *DeviceApprovalRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceApprovalRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *DeviceApprovalRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *DeviceApprovalRequest) GetTotpCode() string {
	if x != nil {
		return x.TotpCode
	}
	return ""
}

func (x *DeviceApprovalRequest) GetDeviceIp() string {
	if x != nil {
		return x.DeviceIp
	}
	return ""
}

func (x *DeviceApprovalRequest) GetDeviceTokenExpireDays() string {
	if x != nil {
		return x.DeviceTokenExpireDays
	}
	return ""
}

type DeviceApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedTwoFactorToken []byte `protobuf:"bytes,1,opt,name=encryptedTwoFactorToken,proto3" json:"encryptedTwoFactorToken,omitempty"`
}

func (x *DeviceApprovalResponse) Reset() {
	*x = DeviceApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceApprovalResponse) ProtoMessage() {}

func (x *DeviceApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceApprovalResponse.ProtoReflect.Descriptor instead.
func (*DeviceApprovalResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{70}
}

func (x *DeviceApprovalResponse) GetEncryptedTwoFactorToken() []byte {
	if x != nil {
		return x.EncryptedTwoFactorToken
	}
	return nil
}

type ApproveDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken   []byte `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	EncryptedDeviceDataKey []byte `protobuf:"bytes,2,opt,name=encryptedDeviceDataKey,proto3" json:"encryptedDeviceDataKey,omitempty"` // required for cloud sso and link
	DenyApproval           bool   `protobuf:"varint,3,opt,name=denyApproval,proto3" json:"denyApproval,omitempty"`
	LinkDevice             bool   `protobuf:"varint,4,opt,name=linkDevice,proto3" json:"linkDevice,omitempty"`
}

func (x *ApproveDeviceRequest) Reset() {
	*x = ApproveDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveDeviceRequest) ProtoMessage() {}

func (x *ApproveDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveDeviceRequest.ProtoReflect.Descriptor instead.
func (*ApproveDeviceRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{71}
}

func (x *ApproveDeviceRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *ApproveDeviceRequest) GetEncryptedDeviceDataKey() []byte {
	if x != nil {
		return x.EncryptedDeviceDataKey
	}
	return nil
}

func (x *ApproveDeviceRequest) GetDenyApproval() bool {
	if x != nil {
		return x.DenyApproval
	}
	return false
}

func (x *ApproveDeviceRequest) GetLinkDevice() bool {
	if x != nil {
		return x.LinkDevice
	}
	return false
}

type EnterpriseUserAliasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Alias            string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *EnterpriseUserAliasRequest) Reset() {
	*x = EnterpriseUserAliasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUserAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUserAliasRequest) ProtoMessage() {}

func (x *EnterpriseUserAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUserAliasRequest.ProtoReflect.Descriptor instead.
func (*EnterpriseUserAliasRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{72}
}

func (x *EnterpriseUserAliasRequest) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUserAliasRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type EnterpriseUserAddAliasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Alias            string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Primary          bool   `protobuf:"varint,3,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *EnterpriseUserAddAliasRequest) Reset() {
	*x = EnterpriseUserAddAliasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUserAddAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUserAddAliasRequest) ProtoMessage() {}

func (x *EnterpriseUserAddAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUserAddAliasRequest.ProtoReflect.Descriptor instead.
func (*EnterpriseUserAddAliasRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{73}
}

func (x *EnterpriseUserAddAliasRequest) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUserAddAliasRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *EnterpriseUserAddAliasRequest) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

type EnterpriseUserAddAliasRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserAddAliasRequest []*EnterpriseUserAddAliasRequest `protobuf:"bytes,1,rep,name=enterpriseUserAddAliasRequest,proto3" json:"enterpriseUserAddAliasRequest,omitempty"`
}

func (x *EnterpriseUserAddAliasRequestV2) Reset() {
	*x = EnterpriseUserAddAliasRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUserAddAliasRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUserAddAliasRequestV2) ProtoMessage() {}

func (x *EnterpriseUserAddAliasRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUserAddAliasRequestV2.ProtoReflect.Descriptor instead.
func (*EnterpriseUserAddAliasRequestV2) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{74}
}

func (x *EnterpriseUserAddAliasRequestV2) GetEnterpriseUserAddAliasRequest() []*EnterpriseUserAddAliasRequest {
	if x != nil {
		return x.EnterpriseUserAddAliasRequest
	}
	return nil
}

type EnterpriseUserAddAliasStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	Status           string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EnterpriseUserAddAliasStatus) Reset() {
	*x = EnterpriseUserAddAliasStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUserAddAliasStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUserAddAliasStatus) ProtoMessage() {}

func (x *EnterpriseUserAddAliasStatus) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUserAddAliasStatus.ProtoReflect.Descriptor instead.
func (*EnterpriseUserAddAliasStatus) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{75}
}

func (x *EnterpriseUserAddAliasStatus) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUserAddAliasStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type EnterpriseUserAddAliasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status []*EnterpriseUserAddAliasStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *EnterpriseUserAddAliasResponse) Reset() {
	*x = EnterpriseUserAddAliasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUserAddAliasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUserAddAliasResponse) ProtoMessage() {}

func (x *EnterpriseUserAddAliasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUserAddAliasResponse.ProtoReflect.Descriptor instead.
func (*EnterpriseUserAddAliasResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{76}
}

func (x *EnterpriseUserAddAliasResponse) GetStatus() []*EnterpriseUserAddAliasStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken []byte `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{77}
}

func (x *Device) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

type RegisterDeviceDataKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken   []byte `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	EncryptedDeviceDataKey []byte `protobuf:"bytes,2,opt,name=encryptedDeviceDataKey,proto3" json:"encryptedDeviceDataKey,omitempty"`
}

func (x *RegisterDeviceDataKeyRequest) Reset() {
	*x = RegisterDeviceDataKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDeviceDataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceDataKeyRequest) ProtoMessage() {}

func (x *RegisterDeviceDataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceDataKeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterDeviceDataKeyRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{78}
}

func (x *RegisterDeviceDataKeyRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *RegisterDeviceDataKeyRequest) GetEncryptedDeviceDataKey() []byte {
	if x != nil {
		return x.EncryptedDeviceDataKey
	}
	return nil
}

type ValidateCreateUserVerificationCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username         string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	ClientVersion    string `protobuf:"bytes,2,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	VerificationCode string `protobuf:"bytes,3,opt,name=verificationCode,proto3" json:"verificationCode,omitempty"`
}

func (x *ValidateCreateUserVerificationCodeRequest) Reset() {
	*x = ValidateCreateUserVerificationCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCreateUserVerificationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCreateUserVerificationCodeRequest) ProtoMessage() {}

func (x *ValidateCreateUserVerificationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCreateUserVerificationCodeRequest.ProtoReflect.Descriptor instead.
func (*ValidateCreateUserVerificationCodeRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{79}
}

func (x *ValidateCreateUserVerificationCodeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ValidateCreateUserVerificationCodeRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *ValidateCreateUserVerificationCodeRequest) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

type ValidateDeviceVerificationCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username             string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	ClientVersion        string `protobuf:"bytes,2,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	VerificationCode     string `protobuf:"bytes,3,opt,name=verificationCode,proto3" json:"verificationCode,omitempty"`
	MessageSessionUid    []byte `protobuf:"bytes,4,opt,name=messageSessionUid,proto3" json:"messageSessionUid,omitempty"`
	EncryptedDeviceToken []byte `protobuf:"bytes,5,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
}

func (x *ValidateDeviceVerificationCodeRequest) Reset() {
	*x = ValidateDeviceVerificationCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateDeviceVerificationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDeviceVerificationCodeRequest) ProtoMessage() {}

func (x *ValidateDeviceVerificationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDeviceVerificationCodeRequest.ProtoReflect.Descriptor instead.
func (*ValidateDeviceVerificationCodeRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{80}
}

func (x *ValidateDeviceVerificationCodeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ValidateDeviceVerificationCodeRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *ValidateDeviceVerificationCodeRequest) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *ValidateDeviceVerificationCodeRequest) GetMessageSessionUid() []byte {
	if x != nil {
		return x.MessageSessionUid
	}
	return nil
}

func (x *ValidateDeviceVerificationCodeRequest) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

type SendSessionMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageSessionUid []byte `protobuf:"bytes,1,opt,name=messageSessionUid,proto3" json:"messageSessionUid,omitempty"`
	Command           string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Username          string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SendSessionMessageRequest) Reset() {
	*x = SendSessionMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSessionMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSessionMessageRequest) ProtoMessage() {}

func (x *SendSessionMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSessionMessageRequest.ProtoReflect.Descriptor instead.
func (*SendSessionMessageRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{81}
}

func (x *SendSessionMessageRequest) GetMessageSessionUid() []byte {
	if x != nil {
		return x.MessageSessionUid
	}
	return nil
}

func (x *SendSessionMessageRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SendSessionMessageRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GlobalUserAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AccountUid []byte `protobuf:"bytes,2,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
	RegionName string `protobuf:"bytes,3,opt,name=regionName,proto3" json:"regionName,omitempty"`
}

func (x *GlobalUserAccount) Reset() {
	*x = GlobalUserAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalUserAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalUserAccount) ProtoMessage() {}

func (x *GlobalUserAccount) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalUserAccount.ProtoReflect.Descriptor instead.
func (*GlobalUserAccount) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{82}
}

func (x *GlobalUserAccount) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GlobalUserAccount) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

func (x *GlobalUserAccount) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

type AccountUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	DateActive string `protobuf:"bytes,2,opt,name=dateActive,proto3" json:"dateActive,omitempty"`
}

func (x *AccountUsername) Reset() {
	*x = AccountUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUsername) ProtoMessage() {}

func (x *AccountUsername) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUsername.ProtoReflect.Descriptor instead.
func (*AccountUsername) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{83}
}

func (x *AccountUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccountUsername) GetDateActive() string {
	if x != nil {
		return x.DateActive
	}
	return ""
}

// *
// This is the input to the get_sso_service_provider command.
type SsoServiceProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // the name entered by the user
	ClientVersion string `protobuf:"bytes,2,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	Locale        string `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"` // such as "en_US"
}

func (x *SsoServiceProviderRequest) Reset() {
	*x = SsoServiceProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsoServiceProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsoServiceProviderRequest) ProtoMessage() {}

func (x *SsoServiceProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsoServiceProviderRequest.ProtoReflect.Descriptor instead.
func (*SsoServiceProviderRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{84}
}

func (x *SsoServiceProviderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SsoServiceProviderRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *SsoServiceProviderRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

// *
// This is the response from the get_sso_service_provider command.
type SsoServiceProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // the official name
	SpUrl         string `protobuf:"bytes,2,opt,name=spUrl,proto3" json:"spUrl,omitempty"`
	IsCloud       bool   `protobuf:"varint,3,opt,name=isCloud,proto3" json:"isCloud,omitempty"`
	ClientVersion string `protobuf:"bytes,4,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
}

func (x *SsoServiceProviderResponse) Reset() {
	*x = SsoServiceProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsoServiceProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsoServiceProviderResponse) ProtoMessage() {}

func (x *SsoServiceProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsoServiceProviderResponse.ProtoReflect.Descriptor instead.
func (*SsoServiceProviderResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{85}
}

func (x *SsoServiceProviderResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SsoServiceProviderResponse) GetSpUrl() string {
	if x != nil {
		return x.SpUrl
	}
	return ""
}

func (x *SsoServiceProviderResponse) GetIsCloud() bool {
	if x != nil {
		return x.IsCloud
	}
	return false
}

func (x *SsoServiceProviderResponse) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type UserSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting string `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UserSettingRequest) Reset() {
	*x = UserSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettingRequest) ProtoMessage() {}

func (x *UserSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettingRequest.ProtoReflect.Descriptor instead.
func (*UserSettingRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{86}
}

func (x *UserSettingRequest) GetSetting() string {
	if x != nil {
		return x.Setting
	}
	return ""
}

func (x *UserSettingRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ThrottleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  ThrottleType `protobuf:"varint,1,opt,name=type,proto3,enum=Authentication.ThrottleType" json:"type,omitempty"`
	Key   string       `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value string       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	State bool         `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ThrottleState) Reset() {
	*x = ThrottleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottleState) ProtoMessage() {}

func (x *ThrottleState) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottleState.ProtoReflect.Descriptor instead.
func (*ThrottleState) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{87}
}

func (x *ThrottleState) GetType() ThrottleType {
	if x != nil {
		return x.Type
	}
	return ThrottleType_PASSWORD_RETRY_THROTTLE
}

func (x *ThrottleState) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ThrottleState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ThrottleState) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type ThrottleState2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KeyDescription     string `protobuf:"bytes,2,opt,name=keyDescription,proto3" json:"keyDescription,omitempty"`
	Value              string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ValueDescription   string `protobuf:"bytes,4,opt,name=valueDescription,proto3" json:"valueDescription,omitempty"`
	Identifier         string `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Locked             bool   `protobuf:"varint,6,opt,name=locked,proto3" json:"locked,omitempty"`
	IncludedInAllClear bool   `protobuf:"varint,7,opt,name=includedInAllClear,proto3" json:"includedInAllClear,omitempty"`
	ExpireSeconds      int32  `protobuf:"varint,8,opt,name=expireSeconds,proto3" json:"expireSeconds,omitempty"`
}

func (x *ThrottleState2) Reset() {
	*x = ThrottleState2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottleState2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottleState2) ProtoMessage() {}

func (x *ThrottleState2) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottleState2.ProtoReflect.Descriptor instead.
func (*ThrottleState2) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{88}
}

func (x *ThrottleState2) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ThrottleState2) GetKeyDescription() string {
	if x != nil {
		return x.KeyDescription
	}
	return ""
}

func (x *ThrottleState2) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ThrottleState2) GetValueDescription() string {
	if x != nil {
		return x.ValueDescription
	}
	return ""
}

func (x *ThrottleState2) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ThrottleState2) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *ThrottleState2) GetIncludedInAllClear() bool {
	if x != nil {
		return x.IncludedInAllClear
	}
	return false
}

func (x *ThrottleState2) GetExpireSeconds() int32 {
	if x != nil {
		return x.ExpireSeconds
	}
	return 0
}

type DeviceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId      int64        `protobuf:"varint,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceName    string       `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ClientVersion string       `protobuf:"bytes,3,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	LastLogin     int64        `protobuf:"varint,4,opt,name=lastLogin,proto3" json:"lastLogin,omitempty"` // for get not save
	DeviceStatus  DeviceStatus `protobuf:"varint,5,opt,name=deviceStatus,proto3,enum=Authentication.DeviceStatus" json:"deviceStatus,omitempty"`
}

func (x *DeviceInformation) Reset() {
	*x = DeviceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInformation) ProtoMessage() {}

func (x *DeviceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInformation.ProtoReflect.Descriptor instead.
func (*DeviceInformation) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{89}
}

func (x *DeviceInformation) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceInformation) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInformation) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceInformation) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *DeviceInformation) GetDeviceStatus() DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return DeviceStatus_DEVICE_NEEDS_APPROVAL
}

type UserSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UserSetting) Reset() {
	*x = UserSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetting) ProtoMessage() {}

func (x *UserSetting) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetting.ProtoReflect.Descriptor instead.
func (*UserSetting) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{90}
}

func (x *UserSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserSetting) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type UserDataKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId []int64 `protobuf:"varint,1,rep,packed,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
}

func (x *UserDataKeyRequest) Reset() {
	*x = UserDataKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataKeyRequest) ProtoMessage() {}

func (x *UserDataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataKeyRequest.ProtoReflect.Descriptor instead.
func (*UserDataKeyRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{91}
}

func (x *UserDataKeyRequest) GetEnterpriseUserId() []int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return nil
}

type EnterpriseUserIdDataKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64  `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	EncryptedDataKey []byte `protobuf:"bytes,2,opt,name=encryptedDataKey,proto3" json:"encryptedDataKey,omitempty"`
}

func (x *EnterpriseUserIdDataKeyPair) Reset() {
	*x = EnterpriseUserIdDataKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseUserIdDataKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseUserIdDataKeyPair) ProtoMessage() {}

func (x *EnterpriseUserIdDataKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseUserIdDataKeyPair.ProtoReflect.Descriptor instead.
func (*EnterpriseUserIdDataKeyPair) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{92}
}

func (x *EnterpriseUserIdDataKeyPair) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *EnterpriseUserIdDataKeyPair) GetEncryptedDataKey() []byte {
	if x != nil {
		return x.EncryptedDataKey
	}
	return nil
}

type UserDataKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId                       int64                          `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
	RoleKey                      []byte                         `protobuf:"bytes,2,opt,name=roleKey,proto3" json:"roleKey,omitempty"`
	PrivateKey                   string                         `protobuf:"bytes,3,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	EnterpriseUserIdDataKeyPairs []*EnterpriseUserIdDataKeyPair `protobuf:"bytes,4,rep,name=enterpriseUserIdDataKeyPairs,proto3" json:"enterpriseUserIdDataKeyPairs,omitempty"`
}

func (x *UserDataKey) Reset() {
	*x = UserDataKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDataKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataKey) ProtoMessage() {}

func (x *UserDataKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataKey.ProtoReflect.Descriptor instead.
func (*UserDataKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{93}
}

func (x *UserDataKey) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UserDataKey) GetRoleKey() []byte {
	if x != nil {
		return x.RoleKey
	}
	return nil
}

func (x *UserDataKey) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *UserDataKey) GetEnterpriseUserIdDataKeyPairs() []*EnterpriseUserIdDataKeyPair {
	if x != nil {
		return x.EnterpriseUserIdDataKeyPairs
	}
	return nil
}

type UserDataKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDataKeys       []*UserDataKey `protobuf:"bytes,1,rep,name=userDataKeys,proto3" json:"userDataKeys,omitempty"`
	AccessDenied       []int64        `protobuf:"varint,2,rep,packed,name=accessDenied,proto3" json:"accessDenied,omitempty"`
	NoEncryptedDataKey []int64        `protobuf:"varint,3,rep,packed,name=noEncryptedDataKey,proto3" json:"noEncryptedDataKey,omitempty"`
}

func (x *UserDataKeyResponse) Reset() {
	*x = UserDataKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDataKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataKeyResponse) ProtoMessage() {}

func (x *UserDataKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataKeyResponse.ProtoReflect.Descriptor instead.
func (*UserDataKeyResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{94}
}

func (x *UserDataKeyResponse) GetUserDataKeys() []*UserDataKey {
	if x != nil {
		return x.UserDataKeys
	}
	return nil
}

func (x *UserDataKeyResponse) GetAccessDenied() []int64 {
	if x != nil {
		return x.AccessDenied
	}
	return nil
}

func (x *UserDataKeyResponse) GetNoEncryptedDataKey() []int64 {
	if x != nil {
		return x.NoEncryptedDataKey
	}
	return nil
}

type MasterPasswordRecoveryVerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedLoginToken []byte `protobuf:"bytes,1,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
}

func (x *MasterPasswordRecoveryVerificationRequest) Reset() {
	*x = MasterPasswordRecoveryVerificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterPasswordRecoveryVerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterPasswordRecoveryVerificationRequest) ProtoMessage() {}

func (x *MasterPasswordRecoveryVerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterPasswordRecoveryVerificationRequest.ProtoReflect.Descriptor instead.
func (*MasterPasswordRecoveryVerificationRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{95}
}

func (x *MasterPasswordRecoveryVerificationRequest) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

type GetSecurityQuestionV3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedLoginToken []byte `protobuf:"bytes,1,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
	VerificationCode    string `protobuf:"bytes,2,opt,name=verificationCode,proto3" json:"verificationCode,omitempty"`
}

func (x *GetSecurityQuestionV3Request) Reset() {
	*x = GetSecurityQuestionV3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityQuestionV3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityQuestionV3Request) ProtoMessage() {}

func (x *GetSecurityQuestionV3Request) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityQuestionV3Request.ProtoReflect.Descriptor instead.
func (*GetSecurityQuestionV3Request) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{96}
}

func (x *GetSecurityQuestionV3Request) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

func (x *GetSecurityQuestionV3Request) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

type GetSecurityQuestionV3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityQuestion string `protobuf:"bytes,1,opt,name=securityQuestion,proto3" json:"securityQuestion,omitempty"`
	BackupKeyDate    int64  `protobuf:"varint,2,opt,name=backupKeyDate,proto3" json:"backupKeyDate,omitempty"`
	Salt             []byte `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	Iterations       int32  `protobuf:"varint,4,opt,name=iterations,proto3" json:"iterations,omitempty"`
}

func (x *GetSecurityQuestionV3Response) Reset() {
	*x = GetSecurityQuestionV3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityQuestionV3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityQuestionV3Response) ProtoMessage() {}

func (x *GetSecurityQuestionV3Response) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityQuestionV3Response.ProtoReflect.Descriptor instead.
func (*GetSecurityQuestionV3Response) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{97}
}

func (x *GetSecurityQuestionV3Response) GetSecurityQuestion() string {
	if x != nil {
		return x.SecurityQuestion
	}
	return ""
}

func (x *GetSecurityQuestionV3Response) GetBackupKeyDate() int64 {
	if x != nil {
		return x.BackupKeyDate
	}
	return 0
}

func (x *GetSecurityQuestionV3Response) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *GetSecurityQuestionV3Response) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

type GetDataKeyBackupV3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedLoginToken []byte `protobuf:"bytes,1,opt,name=encryptedLoginToken,proto3" json:"encryptedLoginToken,omitempty"`
	VerificationCode    string `protobuf:"bytes,2,opt,name=verificationCode,proto3" json:"verificationCode,omitempty"`
	SecurityAnswerHash  []byte `protobuf:"bytes,3,opt,name=securityAnswerHash,proto3" json:"securityAnswerHash,omitempty"`
}

func (x *GetDataKeyBackupV3Request) Reset() {
	*x = GetDataKeyBackupV3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataKeyBackupV3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataKeyBackupV3Request) ProtoMessage() {}

func (x *GetDataKeyBackupV3Request) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataKeyBackupV3Request.ProtoReflect.Descriptor instead.
func (*GetDataKeyBackupV3Request) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{98}
}

func (x *GetDataKeyBackupV3Request) GetEncryptedLoginToken() []byte {
	if x != nil {
		return x.EncryptedLoginToken
	}
	return nil
}

func (x *GetDataKeyBackupV3Request) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *GetDataKeyBackupV3Request) GetSecurityAnswerHash() []byte {
	if x != nil {
		return x.SecurityAnswerHash
	}
	return nil
}

type PasswordRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleType    string `protobuf:"bytes,1,opt,name=ruleType,proto3" json:"ruleType,omitempty"`
	Match       bool   `protobuf:"varint,2,opt,name=match,proto3" json:"match,omitempty"`
	Pattern     string `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Minimum     int32  `protobuf:"varint,5,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Value       string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PasswordRules) Reset() {
	*x = PasswordRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRules) ProtoMessage() {}

func (x *PasswordRules) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRules.ProtoReflect.Descriptor instead.
func (*PasswordRules) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{99}
}

func (x *PasswordRules) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *PasswordRules) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

func (x *PasswordRules) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *PasswordRules) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordRules) GetMinimum() int32 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *PasswordRules) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetDataKeyBackupV3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataKeyBackup           []byte           `protobuf:"bytes,1,opt,name=dataKeyBackup,proto3" json:"dataKeyBackup,omitempty"`
	DataKeyBackupDate       int64            `protobuf:"varint,2,opt,name=dataKeyBackupDate,proto3" json:"dataKeyBackupDate,omitempty"`
	PublicKey               []byte           `protobuf:"bytes,3,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	EncryptedPrivateKey     []byte           `protobuf:"bytes,4,opt,name=encryptedPrivateKey,proto3" json:"encryptedPrivateKey,omitempty"`
	ClientKey               []byte           `protobuf:"bytes,5,opt,name=clientKey,proto3" json:"clientKey,omitempty"`
	EncryptedSessionToken   []byte           `protobuf:"bytes,6,opt,name=encryptedSessionToken,proto3" json:"encryptedSessionToken,omitempty"`
	PasswordRules           []*PasswordRules `protobuf:"bytes,7,rep,name=passwordRules,proto3" json:"passwordRules,omitempty"`
	PasswordRulesIntro      string           `protobuf:"bytes,8,opt,name=passwordRulesIntro,proto3" json:"passwordRulesIntro,omitempty"`
	MinimumPbkdf2Iterations int32            `protobuf:"varint,9,opt,name=minimumPbkdf2Iterations,proto3" json:"minimumPbkdf2Iterations,omitempty"` //when EnforcementType.MINIMUM_PBKDF2_ITERATIONS exists
}

func (x *GetDataKeyBackupV3Response) Reset() {
	*x = GetDataKeyBackupV3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataKeyBackupV3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataKeyBackupV3Response) ProtoMessage() {}

func (x *GetDataKeyBackupV3Response) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataKeyBackupV3Response.ProtoReflect.Descriptor instead.
func (*GetDataKeyBackupV3Response) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{100}
}

func (x *GetDataKeyBackupV3Response) GetDataKeyBackup() []byte {
	if x != nil {
		return x.DataKeyBackup
	}
	return nil
}

func (x *GetDataKeyBackupV3Response) GetDataKeyBackupDate() int64 {
	if x != nil {
		return x.DataKeyBackupDate
	}
	return 0
}

func (x *GetDataKeyBackupV3Response) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *GetDataKeyBackupV3Response) GetEncryptedPrivateKey() []byte {
	if x != nil {
		return x.EncryptedPrivateKey
	}
	return nil
}

func (x *GetDataKeyBackupV3Response) GetClientKey() []byte {
	if x != nil {
		return x.ClientKey
	}
	return nil
}

func (x *GetDataKeyBackupV3Response) GetEncryptedSessionToken() []byte {
	if x != nil {
		return x.EncryptedSessionToken
	}
	return nil
}

func (x *GetDataKeyBackupV3Response) GetPasswordRules() []*PasswordRules {
	if x != nil {
		return x.PasswordRules
	}
	return nil
}

func (x *GetDataKeyBackupV3Response) GetPasswordRulesIntro() string {
	if x != nil {
		return x.PasswordRulesIntro
	}
	return ""
}

func (x *GetDataKeyBackupV3Response) GetMinimumPbkdf2Iterations() int32 {
	if x != nil {
		return x.MinimumPbkdf2Iterations
	}
	return 0
}

type GetPublicKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usernames []string `protobuf:"bytes,1,rep,name=usernames,proto3" json:"usernames,omitempty"`
}

func (x *GetPublicKeysRequest) Reset() {
	*x = GetPublicKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicKeysRequest) ProtoMessage() {}

func (x *GetPublicKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicKeysRequest.ProtoReflect.Descriptor instead.
func (*GetPublicKeysRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{101}
}

func (x *GetPublicKeysRequest) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

type PublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	PublicKey    []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	PublicEccKey []byte `protobuf:"bytes,3,opt,name=publicEccKey,proto3" json:"publicEccKey,omitempty"`
	Message      string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode    string `protobuf:"bytes,5,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
}

func (x *PublicKeyResponse) Reset() {
	*x = PublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyResponse) ProtoMessage() {}

func (x *PublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyResponse.ProtoReflect.Descriptor instead.
func (*PublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{102}
}

func (x *PublicKeyResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PublicKeyResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PublicKeyResponse) GetPublicEccKey() []byte {
	if x != nil {
		return x.PublicEccKey
	}
	return nil
}

func (x *PublicKeyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PublicKeyResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

type GetPublicKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyResponses []*PublicKeyResponse `protobuf:"bytes,1,rep,name=keyResponses,proto3" json:"keyResponses,omitempty"`
}

func (x *GetPublicKeysResponse) Reset() {
	*x = GetPublicKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicKeysResponse) ProtoMessage() {}

func (x *GetPublicKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicKeysResponse.ProtoReflect.Descriptor instead.
func (*GetPublicKeysResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{103}
}

func (x *GetPublicKeysResponse) GetKeyResponses() []*PublicKeyResponse {
	if x != nil {
		return x.KeyResponses
	}
	return nil
}

type SetEccKeyPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey           []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	EncryptedPrivateKey []byte `protobuf:"bytes,2,opt,name=encryptedPrivateKey,proto3" json:"encryptedPrivateKey,omitempty"`
}

func (x *SetEccKeyPairRequest) Reset() {
	*x = SetEccKeyPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEccKeyPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEccKeyPairRequest) ProtoMessage() {}

func (x *SetEccKeyPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEccKeyPairRequest.ProtoReflect.Descriptor instead.
func (*SetEccKeyPairRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{104}
}

func (x *SetEccKeyPairRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SetEccKeyPairRequest) GetEncryptedPrivateKey() []byte {
	if x != nil {
		return x.EncryptedPrivateKey
	}
	return nil
}

type GetKsmPublicKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIds      [][]byte `protobuf:"bytes,1,rep,name=clientIds,proto3" json:"clientIds,omitempty"`
	ControllerUids [][]byte `protobuf:"bytes,2,rep,name=controllerUids,proto3" json:"controllerUids,omitempty"`
}

func (x *GetKsmPublicKeysRequest) Reset() {
	*x = GetKsmPublicKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKsmPublicKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKsmPublicKeysRequest) ProtoMessage() {}

func (x *GetKsmPublicKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKsmPublicKeysRequest.ProtoReflect.Descriptor instead.
func (*GetKsmPublicKeysRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{105}
}

func (x *GetKsmPublicKeysRequest) GetClientIds() [][]byte {
	if x != nil {
		return x.ClientIds
	}
	return nil
}

func (x *GetKsmPublicKeysRequest) GetControllerUids() [][]byte {
	if x != nil {
		return x.ControllerUids
	}
	return nil
}

type DevicePublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId      []byte `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	PublicKey     []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	ControllerUid []byte `protobuf:"bytes,3,opt,name=controllerUid,proto3" json:"controllerUid,omitempty"`
}

func (x *DevicePublicKeyResponse) Reset() {
	*x = DevicePublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePublicKeyResponse) ProtoMessage() {}

func (x *DevicePublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePublicKeyResponse.ProtoReflect.Descriptor instead.
func (*DevicePublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{106}
}

func (x *DevicePublicKeyResponse) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *DevicePublicKeyResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *DevicePublicKeyResponse) GetControllerUid() []byte {
	if x != nil {
		return x.ControllerUid
	}
	return nil
}

type GetKsmPublicKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyResponses []*DevicePublicKeyResponse `protobuf:"bytes,1,rep,name=keyResponses,proto3" json:"keyResponses,omitempty"`
}

func (x *GetKsmPublicKeysResponse) Reset() {
	*x = GetKsmPublicKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKsmPublicKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKsmPublicKeysResponse) ProtoMessage() {}

func (x *GetKsmPublicKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKsmPublicKeysResponse.ProtoReflect.Descriptor instead.
func (*GetKsmPublicKeysResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{107}
}

func (x *GetKsmPublicKeysResponse) GetKeyResponses() []*DevicePublicKeyResponse {
	if x != nil {
		return x.KeyResponses
	}
	return nil
}

type AddAppSharesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRecordUid []byte         `protobuf:"bytes,1,opt,name=appRecordUid,proto3" json:"appRecordUid,omitempty"`
	Shares       []*AppShareAdd `protobuf:"bytes,2,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (x *AddAppSharesRequest) Reset() {
	*x = AddAppSharesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAppSharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAppSharesRequest) ProtoMessage() {}

func (x *AddAppSharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAppSharesRequest.ProtoReflect.Descriptor instead.
func (*AddAppSharesRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{108}
}

func (x *AddAppSharesRequest) GetAppRecordUid() []byte {
	if x != nil {
		return x.AppRecordUid
	}
	return nil
}

func (x *AddAppSharesRequest) GetShares() []*AppShareAdd {
	if x != nil {
		return x.Shares
	}
	return nil
}

type RemoveAppSharesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRecordUid []byte   `protobuf:"bytes,1,opt,name=appRecordUid,proto3" json:"appRecordUid,omitempty"`
	Shares       [][]byte `protobuf:"bytes,2,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (x *RemoveAppSharesRequest) Reset() {
	*x = RemoveAppSharesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAppSharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAppSharesRequest) ProtoMessage() {}

func (x *RemoveAppSharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAppSharesRequest.ProtoReflect.Descriptor instead.
func (*RemoveAppSharesRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{109}
}

func (x *RemoveAppSharesRequest) GetAppRecordUid() []byte {
	if x != nil {
		return x.AppRecordUid
	}
	return nil
}

func (x *RemoveAppSharesRequest) GetShares() [][]byte {
	if x != nil {
		return x.Shares
	}
	return nil
}

type AppShareAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretUid          []byte               `protobuf:"bytes,2,opt,name=secretUid,proto3" json:"secretUid,omitempty"`
	ShareType          ApplicationShareType `protobuf:"varint,3,opt,name=shareType,proto3,enum=Authentication.ApplicationShareType" json:"shareType,omitempty"`
	EncryptedSecretKey []byte               `protobuf:"bytes,4,opt,name=encryptedSecretKey,proto3" json:"encryptedSecretKey,omitempty"`
	Editable           bool                 `protobuf:"varint,5,opt,name=editable,proto3" json:"editable,omitempty"`
}

func (x *AppShareAdd) Reset() {
	*x = AppShareAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppShareAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppShareAdd) ProtoMessage() {}

func (x *AppShareAdd) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppShareAdd.ProtoReflect.Descriptor instead.
func (*AppShareAdd) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{110}
}

func (x *AppShareAdd) GetSecretUid() []byte {
	if x != nil {
		return x.SecretUid
	}
	return nil
}

func (x *AppShareAdd) GetShareType() ApplicationShareType {
	if x != nil {
		return x.ShareType
	}
	return ApplicationShareType_SHARE_TYPE_RECORD
}

func (x *AppShareAdd) GetEncryptedSecretKey() []byte {
	if x != nil {
		return x.EncryptedSecretKey
	}
	return nil
}

func (x *AppShareAdd) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

type AppShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretUid []byte               `protobuf:"bytes,1,opt,name=secretUid,proto3" json:"secretUid,omitempty"`
	ShareType ApplicationShareType `protobuf:"varint,2,opt,name=shareType,proto3,enum=Authentication.ApplicationShareType" json:"shareType,omitempty"`
	Editable  bool                 `protobuf:"varint,3,opt,name=editable,proto3" json:"editable,omitempty"`
	CreatedOn int64                `protobuf:"varint,4,opt,name=createdOn,proto3" json:"createdOn,omitempty"`
}

func (x *AppShare) Reset() {
	*x = AppShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppShare) ProtoMessage() {}

func (x *AppShare) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppShare.ProtoReflect.Descriptor instead.
func (*AppShare) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{111}
}

func (x *AppShare) GetSecretUid() []byte {
	if x != nil {
		return x.SecretUid
	}
	return nil
}

func (x *AppShare) GetShareType() ApplicationShareType {
	if x != nil {
		return x.ShareType
	}
	return ApplicationShareType_SHARE_TYPE_RECORD
}

func (x *AppShare) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *AppShare) GetCreatedOn() int64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type AddAppClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRecordUid        []byte                         `protobuf:"bytes,1,opt,name=appRecordUid,proto3" json:"appRecordUid,omitempty"`
	EncryptedAppKey     []byte                         `protobuf:"bytes,2,opt,name=encryptedAppKey,proto3" json:"encryptedAppKey,omitempty"`
	ClientId            []byte                         `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId,omitempty"`
	LockIp              bool                           `protobuf:"varint,4,opt,name=lockIp,proto3" json:"lockIp,omitempty"`
	FirstAccessExpireOn int64                          `protobuf:"varint,5,opt,name=firstAccessExpireOn,proto3" json:"firstAccessExpireOn,omitempty"`
	AccessExpireOn      int64                          `protobuf:"varint,6,opt,name=accessExpireOn,proto3" json:"accessExpireOn,omitempty"`
	Id                  string                         `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"` // optional, defaults to obfuscated device id
	AppClientType       proto_enterprise.AppClientType `protobuf:"varint,8,opt,name=appClientType,proto3,enum=Enterprise.AppClientType" json:"appClientType,omitempty"`
}

func (x *AddAppClientRequest) Reset() {
	*x = AddAppClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAppClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAppClientRequest) ProtoMessage() {}

func (x *AddAppClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAppClientRequest.ProtoReflect.Descriptor instead.
func (*AddAppClientRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{112}
}

func (x *AddAppClientRequest) GetAppRecordUid() []byte {
	if x != nil {
		return x.AppRecordUid
	}
	return nil
}

func (x *AddAppClientRequest) GetEncryptedAppKey() []byte {
	if x != nil {
		return x.EncryptedAppKey
	}
	return nil
}

func (x *AddAppClientRequest) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *AddAppClientRequest) GetLockIp() bool {
	if x != nil {
		return x.LockIp
	}
	return false
}

func (x *AddAppClientRequest) GetFirstAccessExpireOn() int64 {
	if x != nil {
		return x.FirstAccessExpireOn
	}
	return 0
}

func (x *AddAppClientRequest) GetAccessExpireOn() int64 {
	if x != nil {
		return x.AccessExpireOn
	}
	return 0
}

func (x *AddAppClientRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddAppClientRequest) GetAppClientType() proto_enterprise.AppClientType {
	if x != nil {
		return x.AppClientType
	}
	return proto_enterprise.AppClientType(0)
}

type RemoveAppClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRecordUid []byte   `protobuf:"bytes,1,opt,name=appRecordUid,proto3" json:"appRecordUid,omitempty"`
	Clients      [][]byte `protobuf:"bytes,2,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *RemoveAppClientsRequest) Reset() {
	*x = RemoveAppClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAppClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAppClientsRequest) ProtoMessage() {}

func (x *RemoveAppClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAppClientsRequest.ProtoReflect.Descriptor instead.
func (*RemoveAppClientsRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{113}
}

func (x *RemoveAppClientsRequest) GetAppRecordUid() []byte {
	if x != nil {
		return x.AppRecordUid
	}
	return nil
}

func (x *RemoveAppClientsRequest) GetClients() [][]byte {
	if x != nil {
		return x.Clients
	}
	return nil
}

type AddExternalShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid          []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	EncryptedRecordKey []byte `protobuf:"bytes,2,opt,name=encryptedRecordKey,proto3" json:"encryptedRecordKey,omitempty"`
	ClientId           []byte `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId,omitempty"`
	AccessExpireOn     int64  `protobuf:"varint,4,opt,name=accessExpireOn,proto3" json:"accessExpireOn,omitempty"`
	Id                 string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"` // optional, defaults to obfuscated device id
}

func (x *AddExternalShareRequest) Reset() {
	*x = AddExternalShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExternalShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExternalShareRequest) ProtoMessage() {}

func (x *AddExternalShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExternalShareRequest.ProtoReflect.Descriptor instead.
func (*AddExternalShareRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{114}
}

func (x *AddExternalShareRequest) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *AddExternalShareRequest) GetEncryptedRecordKey() []byte {
	if x != nil {
		return x.EncryptedRecordKey
	}
	return nil
}

func (x *AddExternalShareRequest) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *AddExternalShareRequest) GetAccessExpireOn() int64 {
	if x != nil {
		return x.AccessExpireOn
	}
	return 0
}

func (x *AddExternalShareRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AppClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId            []byte                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	CreatedOn           int64                          `protobuf:"varint,3,opt,name=createdOn,proto3" json:"createdOn,omitempty"`
	FirstAccess         int64                          `protobuf:"varint,4,opt,name=firstAccess,proto3" json:"firstAccess,omitempty"`
	LastAccess          int64                          `protobuf:"varint,5,opt,name=lastAccess,proto3" json:"lastAccess,omitempty"`
	PublicKey           []byte                         `protobuf:"bytes,6,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	LockIp              bool                           `protobuf:"varint,7,opt,name=lockIp,proto3" json:"lockIp,omitempty"`
	IpAddress           string                         `protobuf:"bytes,8,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	FirstAccessExpireOn int64                          `protobuf:"varint,9,opt,name=firstAccessExpireOn,proto3" json:"firstAccessExpireOn,omitempty"`
	AccessExpireOn      int64                          `protobuf:"varint,10,opt,name=accessExpireOn,proto3" json:"accessExpireOn,omitempty"`
	AppClientType       proto_enterprise.AppClientType `protobuf:"varint,11,opt,name=appClientType,proto3,enum=Enterprise.AppClientType" json:"appClientType,omitempty"`
}

func (x *AppClient) Reset() {
	*x = AppClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppClient) ProtoMessage() {}

func (x *AppClient) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppClient.ProtoReflect.Descriptor instead.
func (*AppClient) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{115}
}

func (x *AppClient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppClient) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *AppClient) GetCreatedOn() int64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

func (x *AppClient) GetFirstAccess() int64 {
	if x != nil {
		return x.FirstAccess
	}
	return 0
}

func (x *AppClient) GetLastAccess() int64 {
	if x != nil {
		return x.LastAccess
	}
	return 0
}

func (x *AppClient) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *AppClient) GetLockIp() bool {
	if x != nil {
		return x.LockIp
	}
	return false
}

func (x *AppClient) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *AppClient) GetFirstAccessExpireOn() int64 {
	if x != nil {
		return x.FirstAccessExpireOn
	}
	return 0
}

func (x *AppClient) GetAccessExpireOn() int64 {
	if x != nil {
		return x.AccessExpireOn
	}
	return 0
}

func (x *AppClient) GetAppClientType() proto_enterprise.AppClientType {
	if x != nil {
		return x.AppClientType
	}
	return proto_enterprise.AppClientType(0)
}

type GetAppInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRecordUid [][]byte `protobuf:"bytes,1,rep,name=appRecordUid,proto3" json:"appRecordUid,omitempty"`
}

func (x *GetAppInfoRequest) Reset() {
	*x = GetAppInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppInfoRequest) ProtoMessage() {}

func (x *GetAppInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAppInfoRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{116}
}

func (x *GetAppInfoRequest) GetAppRecordUid() [][]byte {
	if x != nil {
		return x.AppRecordUid
	}
	return nil
}

type AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRecordUid    []byte       `protobuf:"bytes,1,opt,name=appRecordUid,proto3" json:"appRecordUid,omitempty"`
	Shares          []*AppShare  `protobuf:"bytes,2,rep,name=shares,proto3" json:"shares,omitempty"`
	Clients         []*AppClient `protobuf:"bytes,3,rep,name=clients,proto3" json:"clients,omitempty"`
	IsExternalShare bool         `protobuf:"varint,4,opt,name=isExternalShare,proto3" json:"isExternalShare,omitempty"`
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{117}
}

func (x *AppInfo) GetAppRecordUid() []byte {
	if x != nil {
		return x.AppRecordUid
	}
	return nil
}

func (x *AppInfo) GetShares() []*AppShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *AppInfo) GetClients() []*AppClient {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *AppInfo) GetIsExternalShare() bool {
	if x != nil {
		return x.IsExternalShare
	}
	return false
}

type GetAppInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppInfo []*AppInfo `protobuf:"bytes,1,rep,name=appInfo,proto3" json:"appInfo,omitempty"`
}

func (x *GetAppInfoResponse) Reset() {
	*x = GetAppInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppInfoResponse) ProtoMessage() {}

func (x *GetAppInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAppInfoResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{118}
}

func (x *GetAppInfoResponse) GetAppInfo() []*AppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

type ApplicationSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRecordUid       []byte `protobuf:"bytes,1,opt,name=appRecordUid,proto3" json:"appRecordUid,omitempty"`
	LastAccess         int64  `protobuf:"varint,2,opt,name=lastAccess,proto3" json:"lastAccess,omitempty"`                 // last access time across all clients
	RecordShares       int32  `protobuf:"varint,3,opt,name=recordShares,proto3" json:"recordShares,omitempty"`             // number of records shared to the application
	FolderShares       int32  `protobuf:"varint,4,opt,name=folderShares,proto3" json:"folderShares,omitempty"`             // number of folders shared to the application
	FolderRecords      int32  `protobuf:"varint,5,opt,name=folderRecords,proto3" json:"folderRecords,omitempty"`           // number of records in the folders shared to the application
	ClientCount        int32  `protobuf:"varint,6,opt,name=clientCount,proto3" json:"clientCount,omitempty"`               // total number of clients
	ExpiredClientCount int32  `protobuf:"varint,7,opt,name=expiredClientCount,proto3" json:"expiredClientCount,omitempty"` // number of clients that no longert can have access
}

func (x *ApplicationSummary) Reset() {
	*x = ApplicationSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSummary) ProtoMessage() {}

func (x *ApplicationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSummary.ProtoReflect.Descriptor instead.
func (*ApplicationSummary) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{119}
}

func (x *ApplicationSummary) GetAppRecordUid() []byte {
	if x != nil {
		return x.AppRecordUid
	}
	return nil
}

func (x *ApplicationSummary) GetLastAccess() int64 {
	if x != nil {
		return x.LastAccess
	}
	return 0
}

func (x *ApplicationSummary) GetRecordShares() int32 {
	if x != nil {
		return x.RecordShares
	}
	return 0
}

func (x *ApplicationSummary) GetFolderShares() int32 {
	if x != nil {
		return x.FolderShares
	}
	return 0
}

func (x *ApplicationSummary) GetFolderRecords() int32 {
	if x != nil {
		return x.FolderRecords
	}
	return 0
}

func (x *ApplicationSummary) GetClientCount() int32 {
	if x != nil {
		return x.ClientCount
	}
	return 0
}

func (x *ApplicationSummary) GetExpiredClientCount() int32 {
	if x != nil {
		return x.ExpiredClientCount
	}
	return 0
}

type GetApplicationsSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationSummary []*ApplicationSummary `protobuf:"bytes,1,rep,name=applicationSummary,proto3" json:"applicationSummary,omitempty"`
}

func (x *GetApplicationsSummaryResponse) Reset() {
	*x = GetApplicationsSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationsSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationsSummaryResponse) ProtoMessage() {}

func (x *GetApplicationsSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationsSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetApplicationsSummaryResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{120}
}

func (x *GetApplicationsSummaryResponse) GetApplicationSummary() []*ApplicationSummary {
	if x != nil {
		return x.ApplicationSummary
	}
	return nil
}

type GetVerificationTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetVerificationTokenRequest) Reset() {
	*x = GetVerificationTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVerificationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVerificationTokenRequest) ProtoMessage() {}

func (x *GetVerificationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVerificationTokenRequest.ProtoReflect.Descriptor instead.
func (*GetVerificationTokenRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{121}
}

func (x *GetVerificationTokenRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetVerificationTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedVerificationToken []byte `protobuf:"bytes,1,opt,name=encryptedVerificationToken,proto3" json:"encryptedVerificationToken,omitempty"`
}

func (x *GetVerificationTokenResponse) Reset() {
	*x = GetVerificationTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVerificationTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVerificationTokenResponse) ProtoMessage() {}

func (x *GetVerificationTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVerificationTokenResponse.ProtoReflect.Descriptor instead.
func (*GetVerificationTokenResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{122}
}

func (x *GetVerificationTokenResponse) GetEncryptedVerificationToken() []byte {
	if x != nil {
		return x.EncryptedVerificationToken
	}
	return nil
}

type SendShareInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *SendShareInviteRequest) Reset() {
	*x = SendShareInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendShareInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendShareInviteRequest) ProtoMessage() {}

func (x *SendShareInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendShareInviteRequest.ProtoReflect.Descriptor instead.
func (*SendShareInviteRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{123}
}

func (x *SendShareInviteRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type RequestDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNames []string `protobuf:"bytes,1,rep,name=fileNames,proto3" json:"fileNames,omitempty"`
}

func (x *RequestDownloadRequest) Reset() {
	*x = RequestDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDownloadRequest) ProtoMessage() {}

func (x *RequestDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDownloadRequest.ProtoReflect.Descriptor instead.
func (*RequestDownloadRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{124}
}

func (x *RequestDownloadRequest) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

type RequestDownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    string      `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Message   string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Downloads []*Download `protobuf:"bytes,3,rep,name=downloads,proto3" json:"downloads,omitempty"`
}

func (x *RequestDownloadResponse) Reset() {
	*x = RequestDownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDownloadResponse) ProtoMessage() {}

func (x *RequestDownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDownloadResponse.ProtoReflect.Descriptor instead.
func (*RequestDownloadResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{125}
}

func (x *RequestDownloadResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *RequestDownloadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RequestDownloadResponse) GetDownloads() []*Download {
	if x != nil {
		return x.Downloads
	}
	return nil
}

type Download struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName          string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Url               string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	SuccessStatusCode int32  `protobuf:"varint,3,opt,name=successStatusCode,proto3" json:"successStatusCode,omitempty"`
}

func (x *Download) Reset() {
	*x = Download{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Download) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Download) ProtoMessage() {}

func (x *Download) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Download.ProtoReflect.Descriptor instead.
func (*Download) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{126}
}

func (x *Download) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Download) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Download) GetSuccessStatusCode() int32 {
	if x != nil {
		return x.SuccessStatusCode
	}
	return 0
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"` //reason to delete
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{127}
}

func (x *DeleteUserRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ChangeMasterPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthVerifier        []byte `protobuf:"bytes,1,opt,name=authVerifier,proto3" json:"authVerifier,omitempty"`
	EncryptionParams    []byte `protobuf:"bytes,2,opt,name=encryptionParams,proto3" json:"encryptionParams,omitempty"`
	FromServiceProvider bool   `protobuf:"varint,3,opt,name=fromServiceProvider,proto3" json:"fromServiceProvider,omitempty"`
	IterationsChange    bool   `protobuf:"varint,4,opt,name=iterationsChange,proto3" json:"iterationsChange,omitempty"`
}

func (x *ChangeMasterPasswordRequest) Reset() {
	*x = ChangeMasterPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMasterPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMasterPasswordRequest) ProtoMessage() {}

func (x *ChangeMasterPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMasterPasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangeMasterPasswordRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{128}
}

func (x *ChangeMasterPasswordRequest) GetAuthVerifier() []byte {
	if x != nil {
		return x.AuthVerifier
	}
	return nil
}

func (x *ChangeMasterPasswordRequest) GetEncryptionParams() []byte {
	if x != nil {
		return x.EncryptionParams
	}
	return nil
}

func (x *ChangeMasterPasswordRequest) GetFromServiceProvider() bool {
	if x != nil {
		return x.FromServiceProvider
	}
	return false
}

func (x *ChangeMasterPasswordRequest) GetIterationsChange() bool {
	if x != nil {
		return x.IterationsChange
	}
	return false
}

type ChangeMasterPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedSessionToken []byte `protobuf:"bytes,1,opt,name=encryptedSessionToken,proto3" json:"encryptedSessionToken,omitempty"`
}

func (x *ChangeMasterPasswordResponse) Reset() {
	*x = ChangeMasterPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMasterPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMasterPasswordResponse) ProtoMessage() {}

func (x *ChangeMasterPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMasterPasswordResponse.ProtoReflect.Descriptor instead.
func (*ChangeMasterPasswordResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{129}
}

func (x *ChangeMasterPasswordResponse) GetEncryptedSessionToken() []byte {
	if x != nil {
		return x.EncryptedSessionToken
	}
	return nil
}

type AccountRecoverySetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryEncryptedDataKey []byte `protobuf:"bytes,1,opt,name=recoveryEncryptedDataKey,proto3" json:"recoveryEncryptedDataKey,omitempty"`
	RecoveryAuthHash         []byte `protobuf:"bytes,2,opt,name=recoveryAuthHash,proto3" json:"recoveryAuthHash,omitempty"`
}

func (x *AccountRecoverySetupRequest) Reset() {
	*x = AccountRecoverySetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRecoverySetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRecoverySetupRequest) ProtoMessage() {}

func (x *AccountRecoverySetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRecoverySetupRequest.ProtoReflect.Descriptor instead.
func (*AccountRecoverySetupRequest) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{130}
}

func (x *AccountRecoverySetupRequest) GetRecoveryEncryptedDataKey() []byte {
	if x != nil {
		return x.RecoveryEncryptedDataKey
	}
	return nil
}

func (x *AccountRecoverySetupRequest) GetRecoveryAuthHash() []byte {
	if x != nil {
		return x.RecoveryAuthHash
	}
	return nil
}

type AccountRecoveryVerifyCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupKeyType    BackupKeyType `protobuf:"varint,1,opt,name=backupKeyType,proto3,enum=Authentication.BackupKeyType" json:"backupKeyType,omitempty"`
	BackupKeyDate    int64         `protobuf:"varint,2,opt,name=backupKeyDate,proto3" json:"backupKeyDate,omitempty"`
	SecurityQuestion string        `protobuf:"bytes,3,opt,name=securityQuestion,proto3" json:"securityQuestion,omitempty"`
	Salt             []byte        `protobuf:"bytes,4,opt,name=salt,proto3" json:"salt,omitempty"`
	Iterations       int32         `protobuf:"varint,5,opt,name=iterations,proto3" json:"iterations,omitempty"`
}

func (x *AccountRecoveryVerifyCodeResponse) Reset() {
	*x = AccountRecoveryVerifyCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRecoveryVerifyCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRecoveryVerifyCodeResponse) ProtoMessage() {}

func (x *AccountRecoveryVerifyCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRecoveryVerifyCodeResponse.ProtoReflect.Descriptor instead.
func (*AccountRecoveryVerifyCodeResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{131}
}

func (x *AccountRecoveryVerifyCodeResponse) GetBackupKeyType() BackupKeyType {
	if x != nil {
		return x.BackupKeyType
	}
	return BackupKeyType_BKT_SEC_ANSWER
}

func (x *AccountRecoveryVerifyCodeResponse) GetBackupKeyDate() int64 {
	if x != nil {
		return x.BackupKeyDate
	}
	return 0
}

func (x *AccountRecoveryVerifyCodeResponse) GetSecurityQuestion() string {
	if x != nil {
		return x.SecurityQuestion
	}
	return ""
}

func (x *AccountRecoveryVerifyCodeResponse) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *AccountRecoveryVerifyCodeResponse) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

type UserTeamKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid             []byte        `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Username            string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                // this is if the client has a username not an enterpriseUserId
	EnterpriseUserId    int64         `protobuf:"varint,3,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`               // note: this is because new sync down is sending enterpriseUserIds not usernames for queued team members
	EncryptedTeamKeyRSA []byte        `protobuf:"bytes,4,opt,name=encryptedTeamKeyRSA,proto3" json:"encryptedTeamKeyRSA,omitempty"`          // team key shared to the user via user's RSA public key
	EncryptedTeamKeyEC  []byte        `protobuf:"bytes,5,opt,name=encryptedTeamKeyEC,proto3" json:"encryptedTeamKeyEC,omitempty"`            // team key shared to the user via user's EC public key
	Status              GenericStatus `protobuf:"varint,6,opt,name=status,proto3,enum=Authentication.GenericStatus" json:"status,omitempty"` // used in the response to state success or failure, blank means success
}

func (x *UserTeamKey) Reset() {
	*x = UserTeamKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTeamKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTeamKey) ProtoMessage() {}

func (x *UserTeamKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTeamKey.ProtoReflect.Descriptor instead.
func (*UserTeamKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{132}
}

func (x *UserTeamKey) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *UserTeamKey) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserTeamKey) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *UserTeamKey) GetEncryptedTeamKeyRSA() []byte {
	if x != nil {
		return x.EncryptedTeamKeyRSA
	}
	return nil
}

func (x *UserTeamKey) GetEncryptedTeamKeyEC() []byte {
	if x != nil {
		return x.EncryptedTeamKeyEC
	}
	return nil
}

func (x *UserTeamKey) GetStatus() GenericStatus {
	if x != nil {
		return x.Status
	}
	return GenericStatus_SUCCESS
}

type GenericRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request [][]byte `protobuf:"bytes,1,rep,name=request,proto3" json:"request,omitempty"` // this is just a repeated list of whatever request message the api called for as a bytestring
}

func (x *GenericRequestResponse) Reset() {
	*x = GenericRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericRequestResponse) ProtoMessage() {}

func (x *GenericRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericRequestResponse.ProtoReflect.Descriptor instead.
func (*GenericRequestResponse) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{133}
}

func (x *GenericRequestResponse) GetRequest() [][]byte {
	if x != nil {
		return x.Request
	}
	return nil
}

var File_APIRequest_proto protoreflect.FileDescriptor

var file_APIRequest_proto_rawDesc = []byte{
	0x0a, 0x10, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x02, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x55, 0x0a, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x3a,
	0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x50,
	0x72, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf9,
	0x02, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x50, 0x72, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x50, 0x72, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x63, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x7a, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7e, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x99,
	0x04, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x63, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x76, 0x32, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x32, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0x9f, 0x06, 0x0a, 0x0d, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x58,
	0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x4c, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6c, 0x74,
	0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x73, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x73, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xdb, 0x01, 0x0a,
	0x0b, 0x53, 0x73, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x73,
	0x6f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x73, 0x6f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x86, 0x02, 0x0a, 0x10, 0x50,
	0x72, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x4f,
	0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0d, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x73, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x73, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x73, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb9, 0x03, 0x0a, 0x14,
	0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x49, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x75, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x02,
	0x0a, 0x13, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x75, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x75, 0x6f, 0x50,
	0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x16, 0x54, 0x77, 0x6f, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x14, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x39, 0x0a, 0x16, 0x54, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x15, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x22, 0x63, 0x0a, 0x20,
	0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49,
	0x6e, 0x22, 0x86, 0x02, 0x0a, 0x18, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x40, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x49, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x22, 0x4d, 0x0a, 0x19, 0x54, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xed, 0x01, 0x0a, 0x18, 0x54, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70,
	0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x07, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x65, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x0a, 0x10, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x49, 0x0a,
	0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x6c, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xba, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x1e, 0x0a, 0x0a, 0x55, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xcd, 0x04, 0x0a, 0x13, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x49, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x42, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x1d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x56, 0x33, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x2e,
	0x0a, 0x10, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x30,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x53, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x45, 0x0a, 0x1d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x0c,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x1a, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1a, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x02, 0x0a, 0x1d, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x17, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x03, 0x0a,
	0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x52, 0x65, 0x75, 0x73, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52,
	0x65, 0x75, 0x73, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x73, 0x0a,
	0x1d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x19, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x33, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x73, 0x4f, 0x66, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x61, 0x73, 0x4f, 0x66, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x50, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x2e, 0x0a, 0x16, 0x52, 0x65, 0x75, 0x73, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x56, 0x0a, 0x14, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x6f, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x12,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4f,
	0x6e, 0x65, 0x22, 0x70, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x6f, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x4f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x22, 0xed, 0x07, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x73, 0x61, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x73, 0x61, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x72, 0x73, 0x61, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x63, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x63, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x63, 0x63, 0x4d,
	0x4e, 0x43, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x63, 0x63, 0x4d, 0x4e, 0x43,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x66, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x66, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x73, 0x0a, 0x21, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x1c, 0x4e, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x84,
	0x02, 0x0a, 0x15, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4b,
	0x41, 0x74, 0x6f, 0x4b, 0x41, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f,
	0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x11, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f,
	0x01, 0x0a, 0x1c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x62, 0x6b, 0x64, 0x66, 0x32, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x62, 0x6b, 0x64, 0x66, 0x32, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x64, 0x0a, 0x1d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x22, 0xf1, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb9, 0x02,
	0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x79, 0x73, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54,
	0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc6, 0x01,
	0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6e, 0x79, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x1a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x7b, 0x0a, 0x1d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x1f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x73, 0x0a, 0x1d, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1c,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x66, 0x0a, 0x1e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x29, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xf7, 0x01, 0x0a, 0x25, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7f, 0x0a, 0x19, 0x53, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x11, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x6d, 0x0a, 0x19, 0x53, 0x73,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x53, 0x73,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x55,
	0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x0e, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x41, 0x6c,
	0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x41, 0x6c, 0x6c, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1b, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x22, 0xd0, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x6f, 0x0a, 0x1c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x6f,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x22, 0x5d, 0x0a, 0x29, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x7c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xc3, 0x03, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0d,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x38, 0x0a,
	0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x62, 0x6b, 0x64, 0x66, 0x32, 0x49, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x62, 0x6b, 0x64, 0x66, 0x32, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xa9, 0x01,
	0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x45, 0x63, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x45, 0x63, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x6b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x45, 0x63, 0x63, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x22, 0x5f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x73, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x67, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4b, 0x73, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x6b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x52, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a,
	0x0b, 0x41, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x08, 0x41,
	0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x22, 0xc2, 0x02, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x12, 0x30, 0x0a,
	0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x4f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x86, 0x03, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x4f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69,
	0x64, 0x22, 0xbe, 0x01, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x12,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x39, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2e, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x83, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2b, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x1b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x54, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x85,
	0x01, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x22, 0xee, 0x01, 0x0a, 0x21, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x53, 0x41,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x53, 0x41, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x45,
	0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x45, 0x43, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x32, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0xb9, 0x02, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x41,
	0x42, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x52, 0x49, 0x54, 0x49, 0x53, 0x48,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x53, 0x45, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x53, 0x45, 0x5f, 0x48, 0x4f, 0x4e, 0x47, 0x5f,
	0x4b, 0x4f, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x53,
	0x45, 0x5f, 0x54, 0x41, 0x49, 0x57, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x55,
	0x54, 0x43, 0x48, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x45, 0x4e, 0x43, 0x48, 0x10,
	0x07, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x47, 0x52, 0x45, 0x45, 0x4b, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x42, 0x52,
	0x45, 0x57, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x41, 0x4e, 0x10,
	0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x41, 0x50, 0x41, 0x4e, 0x45, 0x53, 0x45, 0x10, 0x0c, 0x12,
	0x0a, 0x0a, 0x06, 0x4b, 0x4f, 0x52, 0x45, 0x41, 0x4e, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x4f, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x52, 0x54, 0x55,
	0x47, 0x55, 0x45, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x52, 0x54, 0x55,
	0x47, 0x55, 0x45, 0x53, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x5a, 0x49, 0x4c, 0x10, 0x10, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x4f, 0x4d, 0x41, 0x4e, 0x49, 0x41, 0x4e, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x55, 0x53, 0x53, 0x49, 0x41, 0x4e, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4c, 0x4f,
	0x56, 0x41, 0x4b, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x41, 0x4e, 0x49, 0x53, 0x48,
	0x10, 0x14, 0x2a, 0x5a, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x53, 0x4f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x52,
	0x47, 0x4f, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x05, 0x2a, 0x71,
	0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10,
	0x03, 0x2a, 0x41, 0x0a, 0x0d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x37, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x02, 0x2a, 0xcc, 0x01,
	0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x08, 0x2a, 0x47, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x1f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4d, 0x41,
	0x53, 0x4b, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x01, 0x2a, 0x6c,
	0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x53, 0x4f, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x53, 0x4f, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x45, 0x57, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0xc7, 0x03, 0x0a,
	0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x06,
	0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x53, 0x4f,
	0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4f,
	0x4e, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x53, 0x4f, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x32, 0x46, 0x41, 0x10, 0x0c, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x53, 0x4f, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x11, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x47, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x10, 0x63, 0x2a, 0x6b, 0x0a, 0x14, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x59,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x59, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x59, 0x5f, 0x41, 0x4c, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x59, 0x5f, 0x42, 0x49,
	0x4f, 0x10, 0x04, 0x2a, 0x2d, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53,
	0x10, 0x01, 0x2a, 0xb9, 0x01, 0x0a, 0x11, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x57, 0x4f, 0x5f,
	0x46, 0x41, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4d,
	0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x50, 0x55,
	0x53, 0x48, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x44, 0x55, 0x4f, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x5f, 0x44, 0x55, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x44,
	0x55, 0x4f, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x57, 0x4f,
	0x5f, 0x46, 0x41, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x44, 0x4e, 0x41, 0x10, 0x06, 0x2a, 0xc3,
	0x01, 0x0a, 0x12, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x50, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x4f, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f,
	0x55, 0x32, 0x46, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x5f, 0x57, 0x45, 0x42, 0x41, 0x55, 0x54, 0x48, 0x4e, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x4e, 0x41, 0x10, 0x07, 0x2a, 0xe1, 0x01, 0x0a, 0x14, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43, 0x54, 0x5f, 0x54,
	0x4f, 0x54, 0x50, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f,
	0x43, 0x54, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x57, 0x4f, 0x5f,
	0x46, 0x41, 0x5f, 0x43, 0x54, 0x5f, 0x44, 0x55, 0x4f, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43, 0x54, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x55, 0x50, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43,
	0x54, 0x5f, 0x55, 0x32, 0x46, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x57, 0x4f, 0x5f, 0x46,
	0x41, 0x5f, 0x43, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x41, 0x55, 0x54, 0x48, 0x4e, 0x10, 0x07, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x43, 0x54, 0x5f, 0x4b, 0x45, 0x45,
	0x50, 0x45, 0x52, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f,
	0x43, 0x54, 0x5f, 0x44, 0x4e, 0x41, 0x10, 0x09, 0x2a, 0xab, 0x01, 0x0a, 0x13, 0x54, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x49,
	0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x35, 0x5f, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x31, 0x32, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x32, 0x34,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x57, 0x4f, 0x5f,
	0x46, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x33, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4e,
	0x45, 0x56, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x40, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x57, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x46, 0x4f,
	0x4c, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x04, 0x2a, 0x4d, 0x0a, 0x1b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x50, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x2a, 0x60, 0x0a, 0x1b, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x10, 0x02, 0x2a, 0x9a, 0x02, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52,
	0x44, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52,
	0x45, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x4f,
	0x54, 0x54, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x57, 0x4f, 0x5f, 0x46, 0x41,
	0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x57, 0x4f, 0x5f, 0x46, 0x41, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x54, 0x48, 0x52,
	0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x41, 0x5f, 0x52, 0x45,
	0x54, 0x52, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x33, 0x0a, 0x2f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10,
	0x07, 0x2a, 0x48, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x65, 0x75, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x75, 0x73, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x73, 0x67, 0x6f,
	0x76, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x61, 0x75, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x6a,
	0x70, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x63, 0x61, 0x10, 0x06, 0x2a, 0x44, 0x0a, 0x14, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10,
	0x01, 0x2a, 0x3c, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4b, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4b, 0x54, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x01, 0x2a,
	0x57, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x03, 0x42, 0x2a, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_APIRequest_proto_rawDescOnce sync.Once
	file_APIRequest_proto_rawDescData = file_APIRequest_proto_rawDesc
)

func file_APIRequest_proto_rawDescGZIP() []byte {
	file_APIRequest_proto_rawDescOnce.Do(func() {
		file_APIRequest_proto_rawDescData = protoimpl.X.CompressGZIP(file_APIRequest_proto_rawDescData)
	})
	return file_APIRequest_proto_rawDescData
}

var file_APIRequest_proto_enumTypes = make([]protoimpl.EnumInfo, 25)
var file_APIRequest_proto_msgTypes = make([]protoimpl.MessageInfo, 134)
var file_APIRequest_proto_goTypes = []interface{}{
	(SupportedLanguage)(0),                            // 0: Authentication.SupportedLanguage
	(LoginType)(0),                                    // 1: Authentication.LoginType
	(DeviceStatus)(0),                                 // 2: Authentication.DeviceStatus
	(LicenseStatus)(0),                                // 3: Authentication.LicenseStatus
	(AccountType)(0),                                  // 4: Authentication.AccountType
	(SessionTokenType)(0),                             // 5: Authentication.SessionTokenType
	(Version)(0),                                      // 6: Authentication.Version
	(MasterPasswordReentryActionType)(0),              // 7: Authentication.MasterPasswordReentryActionType
	(LoginMethod)(0),                                  // 8: Authentication.LoginMethod
	(LoginState)(0),                                   // 9: Authentication.LoginState
	(EncryptedDataKeyType)(0),                         // 10: Authentication.EncryptedDataKeyType
	(PasswordMethod)(0),                               // 11: Authentication.PasswordMethod
	(TwoFactorPushType)(0),                            // 12: Authentication.TwoFactorPushType
	(TwoFactorValueType)(0),                           // 13: Authentication.TwoFactorValueType
	(TwoFactorChannelType)(0),                         // 14: Authentication.TwoFactorChannelType
	(TwoFactorExpiration)(0),                          // 15: Authentication.TwoFactorExpiration
	(LicenseType)(0),                                  // 16: Authentication.LicenseType
	(ObjectTypes)(0),                                  // 17: Authentication.ObjectTypes
	(MasterPasswordReentryStatus)(0),                  // 18: Authentication.MasterPasswordReentryStatus
	(AlternateAuthenticationType)(0),                  // 19: Authentication.AlternateAuthenticationType
	(ThrottleType)(0),                                 // 20: Authentication.ThrottleType
	(Region)(0),                                       // 21: Authentication.Region
	(ApplicationShareType)(0),                         // 22: Authentication.ApplicationShareType
	(BackupKeyType)(0),                                // 23: Authentication.BackupKeyType
	(GenericStatus)(0),                                // 24: Authentication.GenericStatus
	(*ApiRequest)(nil),                                // 25: Authentication.ApiRequest
	(*ApiRequestPayload)(nil),                         // 26: Authentication.ApiRequestPayload
	(*Transform)(nil),                                 // 27: Authentication.Transform
	(*DeviceRequest)(nil),                             // 28: Authentication.DeviceRequest
	(*AuthRequest)(nil),                               // 29: Authentication.AuthRequest
	(*NewUserMinimumParams)(nil),                      // 30: Authentication.NewUserMinimumParams
	(*PreLoginRequest)(nil),                           // 31: Authentication.PreLoginRequest
	(*LoginRequest)(nil),                              // 32: Authentication.LoginRequest
	(*DeviceResponse)(nil),                            // 33: Authentication.DeviceResponse
	(*Salt)(nil),                                      // 34: Authentication.Salt
	(*TwoFactorChannel)(nil),                          // 35: Authentication.TwoFactorChannel
	(*StartLoginRequest)(nil),                         // 36: Authentication.StartLoginRequest
	(*LoginResponse)(nil),                             // 37: Authentication.LoginResponse
	(*SsoUserInfo)(nil),                               // 38: Authentication.SsoUserInfo
	(*PreLoginResponse)(nil),                          // 39: Authentication.PreLoginResponse
	(*LoginAsUserRequest)(nil),                        // 40: Authentication.LoginAsUserRequest
	(*LoginAsUserResponse)(nil),                       // 41: Authentication.LoginAsUserResponse
	(*ValidateAuthHashRequest)(nil),                   // 42: Authentication.ValidateAuthHashRequest
	(*TwoFactorChannelInfo)(nil),                      // 43: Authentication.TwoFactorChannelInfo
	(*TwoFactorDuoStatus)(nil),                        // 44: Authentication.TwoFactorDuoStatus
	(*TwoFactorAddRequest)(nil),                       // 45: Authentication.TwoFactorAddRequest
	(*TwoFactorRenameRequest)(nil),                    // 46: Authentication.TwoFactorRenameRequest
	(*TwoFactorAddResponse)(nil),                      // 47: Authentication.TwoFactorAddResponse
	(*TwoFactorDeleteRequest)(nil),                    // 48: Authentication.TwoFactorDeleteRequest
	(*TwoFactorListResponse)(nil),                     // 49: Authentication.TwoFactorListResponse
	(*TwoFactorUpdateExpirationRequest)(nil),          // 50: Authentication.TwoFactorUpdateExpirationRequest
	(*TwoFactorValidateRequest)(nil),                  // 51: Authentication.TwoFactorValidateRequest
	(*TwoFactorValidateResponse)(nil),                 // 52: Authentication.TwoFactorValidateResponse
	(*TwoFactorSendPushRequest)(nil),                  // 53: Authentication.TwoFactorSendPushRequest
	(*License)(nil),                                   // 54: Authentication.License
	(*OwnerlessRecord)(nil),                           // 55: Authentication.OwnerlessRecord
	(*OwnerlessRecords)(nil),                          // 56: Authentication.OwnerlessRecords
	(*UserAuthRequest)(nil),                           // 57: Authentication.UserAuthRequest
	(*UidRequest)(nil),                                // 58: Authentication.UidRequest
	(*DeviceUpdateRequest)(nil),                       // 59: Authentication.DeviceUpdateRequest
	(*RegisterDeviceInRegionRequest)(nil),             // 60: Authentication.RegisterDeviceInRegionRequest
	(*RegistrationRequest)(nil),                       // 61: Authentication.RegistrationRequest
	(*ConvertUserToV3Request)(nil),                    // 62: Authentication.ConvertUserToV3Request
	(*RevisionResponse)(nil),                          // 63: Authentication.RevisionResponse
	(*ChangeEmailRequest)(nil),                        // 64: Authentication.ChangeEmailRequest
	(*ChangeEmailResponse)(nil),                       // 65: Authentication.ChangeEmailResponse
	(*EmailVerificationLinkResponse)(nil),             // 66: Authentication.EmailVerificationLinkResponse
	(*SecurityData)(nil),                              // 67: Authentication.SecurityData
	(*SecurityDataRequest)(nil),                       // 68: Authentication.SecurityDataRequest
	(*SecurityReportIncrementalData)(nil),             // 69: Authentication.SecurityReportIncrementalData
	(*SecurityReport)(nil),                            // 70: Authentication.SecurityReport
	(*SecurityReportSaveRequest)(nil),                 // 71: Authentication.SecurityReportSaveRequest
	(*SecurityReportRequest)(nil),                     // 72: Authentication.SecurityReportRequest
	(*SecurityReportResponse)(nil),                    // 73: Authentication.SecurityReportResponse
	(*ReusedPasswordsRequest)(nil),                    // 74: Authentication.ReusedPasswordsRequest
	(*SummaryConsoleReport)(nil),                      // 75: Authentication.SummaryConsoleReport
	(*ChangeToKeyTypeOne)(nil),                        // 76: Authentication.ChangeToKeyTypeOne
	(*ChangeToKeyTypeOneRequest)(nil),                 // 77: Authentication.ChangeToKeyTypeOneRequest
	(*ChangeToKeyTypeOneStatus)(nil),                  // 78: Authentication.ChangeToKeyTypeOneStatus
	(*ChangeToKeyTypeOneResponse)(nil),                // 79: Authentication.ChangeToKeyTypeOneResponse
	(*SetKey)(nil),                                    // 80: Authentication.SetKey
	(*SetKeyRequest)(nil),                             // 81: Authentication.SetKeyRequest
	(*CreateUserRequest)(nil),                         // 82: Authentication.CreateUserRequest
	(*NodeEnforcementAddOrUpdateRequest)(nil),         // 83: Authentication.NodeEnforcementAddOrUpdateRequest
	(*NodeEnforcementRemoveRequest)(nil),              // 84: Authentication.NodeEnforcementRemoveRequest
	(*ApiRequestByKey)(nil),                           // 85: Authentication.ApiRequestByKey
	(*ApiRequestByKAtoKAKey)(nil),                     // 86: Authentication.ApiRequestByKAtoKAKey
	(*MemcacheRequest)(nil),                           // 87: Authentication.MemcacheRequest
	(*MemcacheResponse)(nil),                          // 88: Authentication.MemcacheResponse
	(*MasterPasswordReentryRequest)(nil),              // 89: Authentication.MasterPasswordReentryRequest
	(*MasterPasswordReentryResponse)(nil),             // 90: Authentication.MasterPasswordReentryResponse
	(*DeviceRegistrationRequest)(nil),                 // 91: Authentication.DeviceRegistrationRequest
	(*DeviceVerificationRequest)(nil),                 // 92: Authentication.DeviceVerificationRequest
	(*DeviceVerificationResponse)(nil),                // 93: Authentication.DeviceVerificationResponse
	(*DeviceApprovalRequest)(nil),                     // 94: Authentication.DeviceApprovalRequest
	(*DeviceApprovalResponse)(nil),                    // 95: Authentication.DeviceApprovalResponse
	(*ApproveDeviceRequest)(nil),                      // 96: Authentication.ApproveDeviceRequest
	(*EnterpriseUserAliasRequest)(nil),                // 97: Authentication.EnterpriseUserAliasRequest
	(*EnterpriseUserAddAliasRequest)(nil),             // 98: Authentication.EnterpriseUserAddAliasRequest
	(*EnterpriseUserAddAliasRequestV2)(nil),           // 99: Authentication.EnterpriseUserAddAliasRequestV2
	(*EnterpriseUserAddAliasStatus)(nil),              // 100: Authentication.EnterpriseUserAddAliasStatus
	(*EnterpriseUserAddAliasResponse)(nil),            // 101: Authentication.EnterpriseUserAddAliasResponse
	(*Device)(nil),                                    // 102: Authentication.Device
	(*RegisterDeviceDataKeyRequest)(nil),              // 103: Authentication.RegisterDeviceDataKeyRequest
	(*ValidateCreateUserVerificationCodeRequest)(nil), // 104: Authentication.ValidateCreateUserVerificationCodeRequest
	(*ValidateDeviceVerificationCodeRequest)(nil),     // 105: Authentication.ValidateDeviceVerificationCodeRequest
	(*SendSessionMessageRequest)(nil),                 // 106: Authentication.SendSessionMessageRequest
	(*GlobalUserAccount)(nil),                         // 107: Authentication.GlobalUserAccount
	(*AccountUsername)(nil),                           // 108: Authentication.AccountUsername
	(*SsoServiceProviderRequest)(nil),                 // 109: Authentication.SsoServiceProviderRequest
	(*SsoServiceProviderResponse)(nil),                // 110: Authentication.SsoServiceProviderResponse
	(*UserSettingRequest)(nil),                        // 111: Authentication.UserSettingRequest
	(*ThrottleState)(nil),                             // 112: Authentication.ThrottleState
	(*ThrottleState2)(nil),                            // 113: Authentication.ThrottleState2
	(*DeviceInformation)(nil),                         // 114: Authentication.DeviceInformation
	(*UserSetting)(nil),                               // 115: Authentication.UserSetting
	(*UserDataKeyRequest)(nil),                        // 116: Authentication.UserDataKeyRequest
	(*EnterpriseUserIdDataKeyPair)(nil),               // 117: Authentication.EnterpriseUserIdDataKeyPair
	(*UserDataKey)(nil),                               // 118: Authentication.UserDataKey
	(*UserDataKeyResponse)(nil),                       // 119: Authentication.UserDataKeyResponse
	(*MasterPasswordRecoveryVerificationRequest)(nil), // 120: Authentication.MasterPasswordRecoveryVerificationRequest
	(*GetSecurityQuestionV3Request)(nil),              // 121: Authentication.GetSecurityQuestionV3Request
	(*GetSecurityQuestionV3Response)(nil),             // 122: Authentication.GetSecurityQuestionV3Response
	(*GetDataKeyBackupV3Request)(nil),                 // 123: Authentication.GetDataKeyBackupV3Request
	(*PasswordRules)(nil),                             // 124: Authentication.PasswordRules
	(*GetDataKeyBackupV3Response)(nil),                // 125: Authentication.GetDataKeyBackupV3Response
	(*GetPublicKeysRequest)(nil),                      // 126: Authentication.GetPublicKeysRequest
	(*PublicKeyResponse)(nil),                         // 127: Authentication.PublicKeyResponse
	(*GetPublicKeysResponse)(nil),                     // 128: Authentication.GetPublicKeysResponse
	(*SetEccKeyPairRequest)(nil),                      // 129: Authentication.SetEccKeyPairRequest
	(*GetKsmPublicKeysRequest)(nil),                   // 130: Authentication.GetKsmPublicKeysRequest
	(*DevicePublicKeyResponse)(nil),                   // 131: Authentication.DevicePublicKeyResponse
	(*GetKsmPublicKeysResponse)(nil),                  // 132: Authentication.GetKsmPublicKeysResponse
	(*AddAppSharesRequest)(nil),                       // 133: Authentication.AddAppSharesRequest
	(*RemoveAppSharesRequest)(nil),                    // 134: Authentication.RemoveAppSharesRequest
	(*AppShareAdd)(nil),                               // 135: Authentication.AppShareAdd
	(*AppShare)(nil),                                  // 136: Authentication.AppShare
	(*AddAppClientRequest)(nil),                       // 137: Authentication.AddAppClientRequest
	(*RemoveAppClientsRequest)(nil),                   // 138: Authentication.RemoveAppClientsRequest
	(*AddExternalShareRequest)(nil),                   // 139: Authentication.AddExternalShareRequest
	(*AppClient)(nil),                                 // 140: Authentication.AppClient
	(*GetAppInfoRequest)(nil),                         // 141: Authentication.GetAppInfoRequest
	(*AppInfo)(nil),                                   // 142: Authentication.AppInfo
	(*GetAppInfoResponse)(nil),                        // 143: Authentication.GetAppInfoResponse
	(*ApplicationSummary)(nil),                        // 144: Authentication.ApplicationSummary
	(*GetApplicationsSummaryResponse)(nil),            // 145: Authentication.GetApplicationsSummaryResponse
	(*GetVerificationTokenRequest)(nil),               // 146: Authentication.GetVerificationTokenRequest
	(*GetVerificationTokenResponse)(nil),              // 147: Authentication.GetVerificationTokenResponse
	(*SendShareInviteRequest)(nil),                    // 148: Authentication.SendShareInviteRequest
	(*RequestDownloadRequest)(nil),                    // 149: Authentication.RequestDownloadRequest
	(*RequestDownloadResponse)(nil),                   // 150: Authentication.RequestDownloadResponse
	(*Download)(nil),                                  // 151: Authentication.Download
	(*DeleteUserRequest)(nil),                         // 152: Authentication.DeleteUserRequest
	(*ChangeMasterPasswordRequest)(nil),               // 153: Authentication.ChangeMasterPasswordRequest
	(*ChangeMasterPasswordResponse)(nil),              // 154: Authentication.ChangeMasterPasswordResponse
	(*AccountRecoverySetupRequest)(nil),               // 155: Authentication.AccountRecoverySetupRequest
	(*AccountRecoveryVerifyCodeResponse)(nil),         // 156: Authentication.AccountRecoveryVerifyCodeResponse
	(*UserTeamKey)(nil),                               // 157: Authentication.UserTeamKey
	(*GenericRequestResponse)(nil),                    // 158: Authentication.GenericRequestResponse
	(*proto_enterprise.EnterpriseRegistration)(nil),   // 159: Enterprise.EnterpriseRegistration
	(proto_enterprise.AppClientType)(0),               // 160: Enterprise.AppClientType
}
var file_APIRequest_proto_depIdxs = []int32{
	29,  // 0: Authentication.PreLoginRequest.authRequest:type_name -> Authentication.AuthRequest
	1,   // 1: Authentication.PreLoginRequest.loginType:type_name -> Authentication.LoginType
	29,  // 2: Authentication.LoginRequest.authRequest:type_name -> Authentication.AuthRequest
	1,   // 3: Authentication.LoginRequest.loginType:type_name -> Authentication.LoginType
	2,   // 4: Authentication.DeviceResponse.status:type_name -> Authentication.DeviceStatus
	1,   // 5: Authentication.StartLoginRequest.loginType:type_name -> Authentication.LoginType
	8,   // 6: Authentication.StartLoginRequest.loginMethod:type_name -> Authentication.LoginMethod
	9,   // 7: Authentication.LoginResponse.loginState:type_name -> Authentication.LoginState
	10,  // 8: Authentication.LoginResponse.encryptedDataKeyType:type_name -> Authentication.EncryptedDataKeyType
	5,   // 9: Authentication.LoginResponse.sessionTokenType:type_name -> Authentication.SessionTokenType
	43,  // 10: Authentication.LoginResponse.channels:type_name -> Authentication.TwoFactorChannelInfo
	34,  // 11: Authentication.LoginResponse.salt:type_name -> Authentication.Salt
	2,   // 12: Authentication.PreLoginResponse.deviceStatus:type_name -> Authentication.DeviceStatus
	34,  // 13: Authentication.PreLoginResponse.salt:type_name -> Authentication.Salt
	35,  // 14: Authentication.PreLoginResponse.OBSOLETE_FIELD:type_name -> Authentication.TwoFactorChannel
	38,  // 15: Authentication.PreLoginResponse.ssoUserInfo:type_name -> Authentication.SsoUserInfo
	11,  // 16: Authentication.ValidateAuthHashRequest.passwordMethod:type_name -> Authentication.PasswordMethod
	14,  // 17: Authentication.TwoFactorChannelInfo.channelType:type_name -> Authentication.TwoFactorChannelType
	15,  // 18: Authentication.TwoFactorChannelInfo.maxExpiration:type_name -> Authentication.TwoFactorExpiration
	15,  // 19: Authentication.TwoFactorChannelInfo.lastFrequency:type_name -> Authentication.TwoFactorExpiration
	14,  // 20: Authentication.TwoFactorAddRequest.channelType:type_name -> Authentication.TwoFactorChannelType
	12,  // 21: Authentication.TwoFactorAddRequest.duoPushType:type_name -> Authentication.TwoFactorPushType
	43,  // 22: Authentication.TwoFactorListResponse.channels:type_name -> Authentication.TwoFactorChannelInfo
	15,  // 23: Authentication.TwoFactorUpdateExpirationRequest.expireIn:type_name -> Authentication.TwoFactorExpiration
	13,  // 24: Authentication.TwoFactorValidateRequest.valueType:type_name -> Authentication.TwoFactorValueType
	15,  // 25: Authentication.TwoFactorValidateRequest.expireIn:type_name -> Authentication.TwoFactorExpiration
	12,  // 26: Authentication.TwoFactorSendPushRequest.pushType:type_name -> Authentication.TwoFactorPushType
	15,  // 27: Authentication.TwoFactorSendPushRequest.expireIn:type_name -> Authentication.TwoFactorExpiration
	3,   // 28: Authentication.License.licenseStatus:type_name -> Authentication.LicenseStatus
	55,  // 29: Authentication.OwnerlessRecords.ownerlessRecord:type_name -> Authentication.OwnerlessRecord
	1,   // 30: Authentication.UserAuthRequest.loginType:type_name -> Authentication.LoginType
	2,   // 31: Authentication.DeviceUpdateRequest.deviceStatus:type_name -> Authentication.DeviceStatus
	29,  // 32: Authentication.RegistrationRequest.authRequest:type_name -> Authentication.AuthRequest
	57,  // 33: Authentication.RegistrationRequest.userAuthRequest:type_name -> Authentication.UserAuthRequest
	29,  // 34: Authentication.ConvertUserToV3Request.authRequest:type_name -> Authentication.AuthRequest
	57,  // 35: Authentication.ConvertUserToV3Request.userAuthRequest:type_name -> Authentication.UserAuthRequest
	67,  // 36: Authentication.SecurityDataRequest.recordSecurityData:type_name -> Authentication.SecurityData
	67,  // 37: Authentication.SecurityDataRequest.masterPasswordSecurityData:type_name -> Authentication.SecurityData
	69,  // 38: Authentication.SecurityReport.securityReportIncrementalData:type_name -> Authentication.SecurityReportIncrementalData
	70,  // 39: Authentication.SecurityReportSaveRequest.securityReport:type_name -> Authentication.SecurityReport
	70,  // 40: Authentication.SecurityReportResponse.securityReport:type_name -> Authentication.SecurityReport
	17,  // 41: Authentication.ChangeToKeyTypeOne.objectType:type_name -> Authentication.ObjectTypes
	76,  // 42: Authentication.ChangeToKeyTypeOneRequest.changeToKeyTypeOne:type_name -> Authentication.ChangeToKeyTypeOne
	78,  // 43: Authentication.ChangeToKeyTypeOneResponse.changeToKeyTypeOneStatus:type_name -> Authentication.ChangeToKeyTypeOneStatus
	80,  // 44: Authentication.SetKeyRequest.keys:type_name -> Authentication.SetKey
	159, // 45: Authentication.CreateUserRequest.enterpriseRegistration:type_name -> Enterprise.EnterpriseRegistration
	0,   // 46: Authentication.ApiRequestByKey.supportedLanguage:type_name -> Authentication.SupportedLanguage
	21,  // 47: Authentication.ApiRequestByKAtoKAKey.sourceRegion:type_name -> Authentication.Region
	0,   // 48: Authentication.ApiRequestByKAtoKAKey.supportedLanguage:type_name -> Authentication.SupportedLanguage
	21,  // 49: Authentication.ApiRequestByKAtoKAKey.destinationRegion:type_name -> Authentication.Region
	7,   // 50: Authentication.MasterPasswordReentryRequest.action:type_name -> Authentication.MasterPasswordReentryActionType
	18,  // 51: Authentication.MasterPasswordReentryResponse.status:type_name -> Authentication.MasterPasswordReentryStatus
	2,   // 52: Authentication.DeviceVerificationResponse.deviceStatus:type_name -> Authentication.DeviceStatus
	98,  // 53: Authentication.EnterpriseUserAddAliasRequestV2.enterpriseUserAddAliasRequest:type_name -> Authentication.EnterpriseUserAddAliasRequest
	100, // 54: Authentication.EnterpriseUserAddAliasResponse.status:type_name -> Authentication.EnterpriseUserAddAliasStatus
	20,  // 55: Authentication.ThrottleState.type:type_name -> Authentication.ThrottleType
	2,   // 56: Authentication.DeviceInformation.deviceStatus:type_name -> Authentication.DeviceStatus
	117, // 57: Authentication.UserDataKey.enterpriseUserIdDataKeyPairs:type_name -> Authentication.EnterpriseUserIdDataKeyPair
	118, // 58: Authentication.UserDataKeyResponse.userDataKeys:type_name -> Authentication.UserDataKey
	124, // 59: Authentication.GetDataKeyBackupV3Response.passwordRules:type_name -> Authentication.PasswordRules
	127, // 60: Authentication.GetPublicKeysResponse.keyResponses:type_name -> Authentication.PublicKeyResponse
	131, // 61: Authentication.GetKsmPublicKeysResponse.keyResponses:type_name -> Authentication.DevicePublicKeyResponse
	135, // 62: Authentication.AddAppSharesRequest.shares:type_name -> Authentication.AppShareAdd
	22,  // 63: Authentication.AppShareAdd.shareType:type_name -> Authentication.ApplicationShareType
	22,  // 64: Authentication.AppShare.shareType:type_name -> Authentication.ApplicationShareType
	160, // 65: Authentication.AddAppClientRequest.appClientType:type_name -> Enterprise.AppClientType
	160, // 66: Authentication.AppClient.appClientType:type_name -> Enterprise.AppClientType
	136, // 67: Authentication.AppInfo.shares:type_name -> Authentication.AppShare
	140, // 68: Authentication.AppInfo.clients:type_name -> Authentication.AppClient
	142, // 69: Authentication.GetAppInfoResponse.appInfo:type_name -> Authentication.AppInfo
	144, // 70: Authentication.GetApplicationsSummaryResponse.applicationSummary:type_name -> Authentication.ApplicationSummary
	151, // 71: Authentication.RequestDownloadResponse.downloads:type_name -> Authentication.Download
	23,  // 72: Authentication.AccountRecoveryVerifyCodeResponse.backupKeyType:type_name -> Authentication.BackupKeyType
	24,  // 73: Authentication.UserTeamKey.status:type_name -> Authentication.GenericStatus
	74,  // [74:74] is the sub-list for method output_type
	74,  // [74:74] is the sub-list for method input_type
	74,  // [74:74] is the sub-list for extension type_name
	74,  // [74:74] is the sub-list for extension extendee
	0,   // [0:74] is the sub-list for field type_name
}

func init() { file_APIRequest_proto_init() }
func file_APIRequest_proto_init() {
	if File_APIRequest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_APIRequest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserMinimumParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Salt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsoUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAsUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAsUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAuthHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorDuoStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorRenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorUpdateExpirationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoFactorSendPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerlessRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerlessRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDeviceInRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertUserToV3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailVerificationLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityReportIncrementalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityReportSaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReusedPasswordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryConsoleReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeToKeyTypeOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeToKeyTypeOneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeToKeyTypeOneStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeToKeyTypeOneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeEnforcementAddOrUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeEnforcementRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiRequestByKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiRequestByKAtoKAKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemcacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemcacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterPasswordReentryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterPasswordReentryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceVerificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceVerificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUserAliasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUserAddAliasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUserAddAliasRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUserAddAliasStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUserAddAliasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDeviceDataKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateCreateUserVerificationCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateDeviceVerificationCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSessionMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalUserAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsoServiceProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsoServiceProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottleState2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDataKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseUserIdDataKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDataKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDataKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterPasswordRecoveryVerificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityQuestionV3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityQuestionV3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataKeyBackupV3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataKeyBackupV3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEccKeyPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKsmPublicKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKsmPublicKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAppSharesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAppSharesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppShareAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAppClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAppClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExternalShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationsSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVerificationTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVerificationTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendShareInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Download); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMasterPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMasterPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRecoverySetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRecoveryVerifyCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTeamKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_APIRequest_proto_rawDesc,
			NumEnums:      25,
			NumMessages:   134,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_APIRequest_proto_goTypes,
		DependencyIndexes: file_APIRequest_proto_depIdxs,
		EnumInfos:         file_APIRequest_proto_enumTypes,
		MessageInfos:      file_APIRequest_proto_msgTypes,
	}.Build()
	File_APIRequest_proto = out.File
	file_APIRequest_proto_rawDesc = nil
	file_APIRequest_proto_goTypes = nil
	file_APIRequest_proto_depIdxs = nil
}
