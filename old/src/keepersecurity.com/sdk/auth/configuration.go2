package auth

import (
  "strings"
)

type IConfigurationProtection interface {
  Obscure(string) (string, error)
  Clarify(string) (string, error)
}

type IConfigurationProtectionFactory interface {
  Resolve(string) IConfigurationProtection
}

type IConfigurationId interface {
  Id() string
}

type IConfigurationCollection[T IConfigurationId] interface {
  Get(string) T
  Put(T)
  Delete(string)
  List(func(T) bool)
}

type IUserDeviceConfiguration interface {
  IConfigurationId
  DeviceToken() string
}

type IUserConfiguration interface {
  IConfigurationId
  Username() string
  Password() string
  Server() string
  SsoProvider() string
  LastDevice() IUserDeviceConfiguration
}

type IServerConfiguration interface {
  IConfigurationId
  Server() string
  ServerKeyId() int32
}
type IDeviceServerConfiguration interface {
  IConfigurationId
  Server() string
  CloneCode() string
}

type IDeviceConfiguration interface {
  IConfigurationId
  DeviceToken() string
  DeviceKey() []byte
  ServerInfo() IConfigurationCollection[IDeviceServerConfiguration]
}
type IConfigurationStorage interface {
  Users() IConfigurationCollection[IUserConfiguration]
  Servers() IConfigurationCollection[IServerConfiguration]
  Devices() IConfigurationCollection[IDeviceConfiguration]

  LastLogin() string
  SetLastLogin(string)

  LastServer() string
  SetLastServer(string)
}

type IExternalConfigurationStorage interface {
  IConfigurationStorage

  SecurityAlgorithm() string
  SetSecurityAlgorithm(string)

  ConfigurationProtection() IConfigurationProtectionFactory
  SetConfigurationProtection(IConfigurationProtectionFactory)

  Flush()
}

// IMPLEMENTATION

type UserDeviceConfiguration struct {
  DeviceToken_ string
}

func NewUserDeviceConfiguration(deviceToken string) *UserDeviceConfiguration {
  return &UserDeviceConfiguration{
    DeviceToken_: deviceToken,
  }
}
func CloneUserDeviceConfiguration(other IUserDeviceConfiguration) *UserDeviceConfiguration {
  return &UserDeviceConfiguration{
    DeviceToken_: other.DeviceToken(),
  }
}
func (ud *UserDeviceConfiguration) Id() string {
  return ud.DeviceToken_
}
func (ud *UserDeviceConfiguration) DeviceToken() string {
  return ud.DeviceToken_
}

type UserConfiguration struct {
  Username_    string
  Server_      string
  Password_    string
  SsoProvider_ string
  LastDevice_  *UserDeviceConfiguration
}

func NewUserConfiguration(username string) *UserConfiguration {
  return &UserConfiguration{
    Username_: username,
  }
}
func CloneUserConfiguration(other IUserConfiguration) *UserConfiguration {
  var u = &UserConfiguration{
    Username_:    other.Username(),
    Server_:      other.Server(),
    SsoProvider_: other.SsoProvider(),
  }
  if other.LastDevice() != nil {
    u.LastDevice_ = &UserDeviceConfiguration{
      DeviceToken_: other.LastDevice().DeviceToken(),
    }
  }
  return u
}
func (u *UserConfiguration) Id() string {
  return strings.ToLower(u.Username_)
}
func (u *UserConfiguration) Username() string {
  return u.Username_
}
func (u *UserConfiguration) Password() string {
  return u.Password_
}
func (u *UserConfiguration) Server() string {
  return u.Server_
}
func (u *UserConfiguration) SsoProvider() string {
  return u.SsoProvider_
}
func (u *UserConfiguration) LastDevice() (res IUserDeviceConfiguration) {
  if u.LastDevice_ != nil {
    res = u.LastDevice_
  }
  return
}

type ServerConfiguration struct {
  Server_      string
  ServerKeyId_ int32
}

func NewServerConfiguration(server string) *ServerConfiguration {
  return &ServerConfiguration{
    Server_:      server,
    ServerKeyId_: 1,
  }
}
func CloneServerConfiguration(other IServerConfiguration) *ServerConfiguration {
  return &ServerConfiguration{
    Server_:      other.Server(),
    ServerKeyId_: other.ServerKeyId(),
  }
}
func (s *ServerConfiguration) Id() string {
  return strings.ToLower(s.Server_)
}
func (s *ServerConfiguration) Server() string {
  return s.Server_
}
func (s *ServerConfiguration) ServerKeyId() int32 {
  return s.ServerKeyId_
}

type DeviceServerConfiguration struct {
  Server_    string
  CloneCode_ string
}

func NewDeviceServerConfiguration(server string) *DeviceServerConfiguration {
  return &DeviceServerConfiguration{
    Server_: server,
  }
}
func CloneDeviceServerConfiguration(other IDeviceServerConfiguration) IDeviceServerConfiguration {
  return &DeviceServerConfiguration{
    Server_:    other.Server(),
    CloneCode_: other.CloneCode(),
  }
}
func (ds *DeviceServerConfiguration) Id() string {
  return strings.ToLower(ds.Server_)
}
func (ds *DeviceServerConfiguration) Server() string {
  return ds.Server_
}
func (ds *DeviceServerConfiguration) CloneCode() string {
  return ds.CloneCode_
}

type DeviceConfiguration struct {
  DeviceToken_ string
  DeviceKey_   []byte
  serverInfo   *genericCollection[IDeviceServerConfiguration]
}

func NewDeviceConfiguration(deviceToken string, deviceKey []byte) *DeviceConfiguration {
  return &DeviceConfiguration{
    DeviceToken_: deviceToken,
    DeviceKey_:   deviceKey,
    serverInfo:   &genericCollection[IDeviceServerConfiguration]{},
  }
}
func CloneDeviceConfiguration(other IDeviceConfiguration) *DeviceConfiguration {
  var d = &DeviceConfiguration{
    DeviceToken_: other.DeviceToken(),
    DeviceKey_:   other.DeviceKey(),
  }
  if other.ServerInfo() != nil {
    d.serverInfo = &genericCollection[IDeviceServerConfiguration]{}
    other.ServerInfo().List(func(elem IDeviceServerConfiguration) bool {
      dsc := CloneDeviceServerConfiguration(elem)
      d.serverInfo.Put(dsc.Id(), dsc)
      return true
    })
  }
  return d
}
func (d *DeviceConfiguration) Id() string {
  return strings.ToLower(d.DeviceToken_)
}
func (d *DeviceConfiguration) DeviceToken() string {
  return d.DeviceToken_
}
func (d *DeviceConfiguration) DeviceKey() []byte {
  return d.DeviceKey_
}
func (c *DeviceConfiguration) ServerInfo() IConfigurationCollection[IDeviceServerConfiguration] {
  if c.serverInfo == nil {
    c.serverInfo = &genericCollection[IDeviceServerConfiguration]{}
  }
  return c.serverInfo
}

func NewInMemoryConfigurationStorage() IConfigurationStorage {
  return &configurationStorage{}
}

type configurationStorage struct {
  lastLogin  string
  lastServer string
  users      *genericCollection[IUserConfiguration]
  servers    *genericCollection[IServerConfiguration]
  devices    IConfigurationCollection[IDeviceConfiguration]
}

func (c *configurationStorage) LastLogin() string {
  return c.lastLogin
}
func (c *configurationStorage) SetLastLogin(lastLogin string) {
  c.lastLogin = lastLogin
}
func (c *configurationStorage) LastServer() string {
  return c.lastServer
}
func (c *configurationStorage) SetLastServer(lastServer string) {
  c.lastServer = lastServer
}
func (c *configurationStorage) Users() IConfigurationCollection[IUserConfiguration] {
  if c.users == nil {
    c.users = &genericCollection[IUserConfiguration]{}
  }
  return c.users
}
func (c *configurationStorage) Servers() IConfigurationCollection[IServerConfiguration] {
  if c.servers == nil {
    c.servers = &genericCollection[IServerConfiguration]{}
  }
  return c.servers
}
func (c *configurationStorage) Devices() IConfigurationCollection[IDeviceConfiguration] {
  if c.devices == nil {
    c.devices = &genericCollection[IDeviceConfiguration]{}
  }
  return c.devices
}

type genericCollection[T any] struct {
  data map[string]T
}

func (c *genericCollection[T]) Get(id string) T {
  if c.data != nil {
    return c.data[id]
  }
  return nil
}

func (c *genericCollection[T]) Put(id string, elem T) {
  if c.data == nil {
    c.data = make(map[string]T)
  }
  c.data[id] = elem
}

func (c *genericCollection[T]) Delete(id string) {
  if c.data != nil {
    delete(c.data, id)
  }
}

func (c *genericCollection[T]) List(cb func(T) bool) {
  if c.data != nil {
    ff := len(c.data)
    keys := make([]string, 0, ff)
    for k, _ := range c.data {
      keys = append(keys, k)
    }
    for _, key := range keys {
      if e, ok := c.data[key]; ok {
        if !cb(e) {
          return
        }
      }
    }
  }
}
