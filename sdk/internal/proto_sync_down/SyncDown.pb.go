// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.1
// source: SyncDown.proto

package proto_sync_down

import (
	proto_auth "github.com/keeper-security/keeper-sdk-golang/sdk/internal/proto_auth"
	proto_record "github.com/keeper-security/keeper-sdk-golang/sdk/internal/proto_record"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CacheStatus int32

const (
	CacheStatus_KEEP  CacheStatus = 0
	CacheStatus_CLEAR CacheStatus = 1
)

// Enum value maps for CacheStatus.
var (
	CacheStatus_name = map[int32]string{
		0: "KEEP",
		1: "CLEAR",
	}
	CacheStatus_value = map[string]int32{
		"KEEP":  0,
		"CLEAR": 1,
	}
)

func (x CacheStatus) Enum() *CacheStatus {
	p := new(CacheStatus)
	*p = x
	return p
}

func (x CacheStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SyncDown_proto_enumTypes[0].Descriptor()
}

func (CacheStatus) Type() protoreflect.EnumType {
	return &file_SyncDown_proto_enumTypes[0]
}

func (x CacheStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheStatus.Descriptor instead.
func (CacheStatus) EnumDescriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{0}
}

type RecordRotationStatus int32

const (
	RecordRotationStatus_RRST_NOT_ROTATED RecordRotationStatus = 0
	RecordRotationStatus_RRST_IN_PROGRESS RecordRotationStatus = 1
	RecordRotationStatus_RRST_SUCCESS     RecordRotationStatus = 2
	RecordRotationStatus_RRST_FAILURE     RecordRotationStatus = 3
)

// Enum value maps for RecordRotationStatus.
var (
	RecordRotationStatus_name = map[int32]string{
		0: "RRST_NOT_ROTATED",
		1: "RRST_IN_PROGRESS",
		2: "RRST_SUCCESS",
		3: "RRST_FAILURE",
	}
	RecordRotationStatus_value = map[string]int32{
		"RRST_NOT_ROTATED": 0,
		"RRST_IN_PROGRESS": 1,
		"RRST_SUCCESS":     2,
		"RRST_FAILURE":     3,
	}
)

func (x RecordRotationStatus) Enum() *RecordRotationStatus {
	p := new(RecordRotationStatus)
	*p = x
	return p
}

func (x RecordRotationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordRotationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SyncDown_proto_enumTypes[1].Descriptor()
}

func (RecordRotationStatus) Type() protoreflect.EnumType {
	return &file_SyncDown_proto_enumTypes[1]
}

func (x RecordRotationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordRotationStatus.Descriptor instead.
func (RecordRotationStatus) EnumDescriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{1}
}

type SyncDownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinuationToken []byte `protobuf:"bytes,1,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	DataVersion       int32  `protobuf:"varint,2,opt,name=dataVersion,proto3" json:"dataVersion,omitempty"`
}

func (x *SyncDownRequest) Reset() {
	*x = SyncDownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDownRequest) ProtoMessage() {}

func (x *SyncDownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDownRequest.ProtoReflect.Descriptor instead.
func (*SyncDownRequest) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{0}
}

func (x *SyncDownRequest) GetContinuationToken() []byte {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *SyncDownRequest) GetDataVersion() int32 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

type SyncDownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinuationToken         []byte                      `protobuf:"bytes,1,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"`
	HasMore                   bool                        `protobuf:"varint,2,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	CacheStatus               CacheStatus                 `protobuf:"varint,3,opt,name=cacheStatus,proto3,enum=Vault.CacheStatus" json:"cacheStatus,omitempty"`
	UserFolders               []*UserFolder               `protobuf:"bytes,4,rep,name=userFolders,proto3" json:"userFolders,omitempty"`
	SharedFolders             []*SharedFolder             `protobuf:"bytes,5,rep,name=sharedFolders,proto3" json:"sharedFolders,omitempty"`
	UserFolderSharedFolders   []*UserFolderSharedFolder   `protobuf:"bytes,6,rep,name=userFolderSharedFolders,proto3" json:"userFolderSharedFolders,omitempty"`
	SharedFolderFolders       []*SharedFolderFolder       `protobuf:"bytes,7,rep,name=sharedFolderFolders,proto3" json:"sharedFolderFolders,omitempty"`
	Records                   []*Record                   `protobuf:"bytes,8,rep,name=records,proto3" json:"records,omitempty"`
	RecordMetaData            []*RecordMetaData           `protobuf:"bytes,9,rep,name=recordMetaData,proto3" json:"recordMetaData,omitempty"`
	NonSharedData             []*NonSharedData            `protobuf:"bytes,10,rep,name=nonSharedData,proto3" json:"nonSharedData,omitempty"`
	RecordLinks               []*RecordLink               `protobuf:"bytes,11,rep,name=recordLinks,proto3" json:"recordLinks,omitempty"`
	UserFolderRecords         []*UserFolderRecord         `protobuf:"bytes,12,rep,name=userFolderRecords,proto3" json:"userFolderRecords,omitempty"`
	SharedFolderRecords       []*SharedFolderRecord       `protobuf:"bytes,13,rep,name=sharedFolderRecords,proto3" json:"sharedFolderRecords,omitempty"`
	SharedFolderFolderRecords []*SharedFolderFolderRecord `protobuf:"bytes,14,rep,name=sharedFolderFolderRecords,proto3" json:"sharedFolderFolderRecords,omitempty"`
	SharedFolderUsers         []*SharedFolderUser         `protobuf:"bytes,15,rep,name=sharedFolderUsers,proto3" json:"sharedFolderUsers,omitempty"`
	// (everything from here down is a 2-byte header in protobuf)
	SharedFolderTeams                []*SharedFolderTeam         `protobuf:"bytes,16,rep,name=sharedFolderTeams,proto3" json:"sharedFolderTeams,omitempty"`
	RecordAddAuditData               [][]byte                    `protobuf:"bytes,17,rep,name=recordAddAuditData,proto3" json:"recordAddAuditData,omitempty"`
	Teams                            []*Team                     `protobuf:"bytes,18,rep,name=teams,proto3" json:"teams,omitempty"`
	SharingChanges                   []*SharingChange            `protobuf:"bytes,19,rep,name=sharingChanges,proto3" json:"sharingChanges,omitempty"`
	Profile                          *Profile                    `protobuf:"bytes,20,opt,name=profile,proto3" json:"profile,omitempty"`
	ProfilePic                       *ProfilePic                 `protobuf:"bytes,21,opt,name=profilePic,proto3" json:"profilePic,omitempty"`
	PendingTeamMembers               []*PendingTeamMember        `protobuf:"bytes,22,rep,name=pendingTeamMembers,proto3" json:"pendingTeamMembers,omitempty"`
	BreachWatchRecords               []*BreachWatchRecord        `protobuf:"bytes,23,rep,name=breachWatchRecords,proto3" json:"breachWatchRecords,omitempty"`
	UserAuths                        []*UserAuth                 `protobuf:"bytes,24,rep,name=userAuths,proto3" json:"userAuths,omitempty"`
	BreachWatchSecurityData          []*BreachWatchSecurityData  `protobuf:"bytes,25,rep,name=breachWatchSecurityData,proto3" json:"breachWatchSecurityData,omitempty"`
	ReusedPasswords                  *ReusedPasswords            `protobuf:"bytes,26,opt,name=reusedPasswords,proto3" json:"reusedPasswords,omitempty"`
	RemovedUserFolders               [][]byte                    `protobuf:"bytes,27,rep,name=removedUserFolders,proto3" json:"removedUserFolders,omitempty"`
	RemovedSharedFolders             [][]byte                    `protobuf:"bytes,28,rep,name=removedSharedFolders,proto3" json:"removedSharedFolders,omitempty"`
	RemovedUserFolderSharedFolders   []*UserFolderSharedFolder   `protobuf:"bytes,29,rep,name=removedUserFolderSharedFolders,proto3" json:"removedUserFolderSharedFolders,omitempty"`
	RemovedSharedFolderFolders       []*SharedFolderFolder       `protobuf:"bytes,30,rep,name=removedSharedFolderFolders,proto3" json:"removedSharedFolderFolders,omitempty"`
	RemovedRecords                   [][]byte                    `protobuf:"bytes,31,rep,name=removedRecords,proto3" json:"removedRecords,omitempty"`
	RemovedRecordLinks               []*RecordLink               `protobuf:"bytes,32,rep,name=removedRecordLinks,proto3" json:"removedRecordLinks,omitempty"`
	RemovedUserFolderRecords         []*UserFolderRecord         `protobuf:"bytes,33,rep,name=removedUserFolderRecords,proto3" json:"removedUserFolderRecords,omitempty"`
	RemovedSharedFolderRecords       []*SharedFolderRecord       `protobuf:"bytes,34,rep,name=removedSharedFolderRecords,proto3" json:"removedSharedFolderRecords,omitempty"`
	RemovedSharedFolderFolderRecords []*SharedFolderFolderRecord `protobuf:"bytes,35,rep,name=removedSharedFolderFolderRecords,proto3" json:"removedSharedFolderFolderRecords,omitempty"`
	RemovedSharedFolderUsers         []*SharedFolderUser         `protobuf:"bytes,36,rep,name=removedSharedFolderUsers,proto3" json:"removedSharedFolderUsers,omitempty"`
	RemovedSharedFolderTeams         []*SharedFolderTeam         `protobuf:"bytes,37,rep,name=removedSharedFolderTeams,proto3" json:"removedSharedFolderTeams,omitempty"`
	RemovedTeams                     [][]byte                    `protobuf:"bytes,38,rep,name=removedTeams,proto3" json:"removedTeams,omitempty"`
	KsmAppShares                     []*KsmChange                `protobuf:"bytes,39,rep,name=ksmAppShares,proto3" json:"ksmAppShares,omitempty"`
	KsmAppClients                    []*KsmChange                `protobuf:"bytes,40,rep,name=ksmAppClients,proto3" json:"ksmAppClients,omitempty"`
	ShareInvitations                 []*ShareInvitation          `protobuf:"bytes,41,rep,name=shareInvitations,proto3" json:"shareInvitations,omitempty"`
	Diagnostics                      *SyncDiagnostics            `protobuf:"bytes,42,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	RecordRotations                  []*RecordRotation           `protobuf:"bytes,43,rep,name=recordRotations,proto3" json:"recordRotations,omitempty"`
	Users                            []*User                     `protobuf:"bytes,44,rep,name=users,proto3" json:"users,omitempty"`               //  maps accountUids to usernames
	RemovedUsers                     [][]byte                    `protobuf:"bytes,45,rep,name=removedUsers,proto3" json:"removedUsers,omitempty"` //  accountUids
}

func (x *SyncDownResponse) Reset() {
	*x = SyncDownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDownResponse) ProtoMessage() {}

func (x *SyncDownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDownResponse.ProtoReflect.Descriptor instead.
func (*SyncDownResponse) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{1}
}

func (x *SyncDownResponse) GetContinuationToken() []byte {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *SyncDownResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *SyncDownResponse) GetCacheStatus() CacheStatus {
	if x != nil {
		return x.CacheStatus
	}
	return CacheStatus_KEEP
}

func (x *SyncDownResponse) GetUserFolders() []*UserFolder {
	if x != nil {
		return x.UserFolders
	}
	return nil
}

func (x *SyncDownResponse) GetSharedFolders() []*SharedFolder {
	if x != nil {
		return x.SharedFolders
	}
	return nil
}

func (x *SyncDownResponse) GetUserFolderSharedFolders() []*UserFolderSharedFolder {
	if x != nil {
		return x.UserFolderSharedFolders
	}
	return nil
}

func (x *SyncDownResponse) GetSharedFolderFolders() []*SharedFolderFolder {
	if x != nil {
		return x.SharedFolderFolders
	}
	return nil
}

func (x *SyncDownResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *SyncDownResponse) GetRecordMetaData() []*RecordMetaData {
	if x != nil {
		return x.RecordMetaData
	}
	return nil
}

func (x *SyncDownResponse) GetNonSharedData() []*NonSharedData {
	if x != nil {
		return x.NonSharedData
	}
	return nil
}

func (x *SyncDownResponse) GetRecordLinks() []*RecordLink {
	if x != nil {
		return x.RecordLinks
	}
	return nil
}

func (x *SyncDownResponse) GetUserFolderRecords() []*UserFolderRecord {
	if x != nil {
		return x.UserFolderRecords
	}
	return nil
}

func (x *SyncDownResponse) GetSharedFolderRecords() []*SharedFolderRecord {
	if x != nil {
		return x.SharedFolderRecords
	}
	return nil
}

func (x *SyncDownResponse) GetSharedFolderFolderRecords() []*SharedFolderFolderRecord {
	if x != nil {
		return x.SharedFolderFolderRecords
	}
	return nil
}

func (x *SyncDownResponse) GetSharedFolderUsers() []*SharedFolderUser {
	if x != nil {
		return x.SharedFolderUsers
	}
	return nil
}

func (x *SyncDownResponse) GetSharedFolderTeams() []*SharedFolderTeam {
	if x != nil {
		return x.SharedFolderTeams
	}
	return nil
}

func (x *SyncDownResponse) GetRecordAddAuditData() [][]byte {
	if x != nil {
		return x.RecordAddAuditData
	}
	return nil
}

func (x *SyncDownResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *SyncDownResponse) GetSharingChanges() []*SharingChange {
	if x != nil {
		return x.SharingChanges
	}
	return nil
}

func (x *SyncDownResponse) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *SyncDownResponse) GetProfilePic() *ProfilePic {
	if x != nil {
		return x.ProfilePic
	}
	return nil
}

func (x *SyncDownResponse) GetPendingTeamMembers() []*PendingTeamMember {
	if x != nil {
		return x.PendingTeamMembers
	}
	return nil
}

func (x *SyncDownResponse) GetBreachWatchRecords() []*BreachWatchRecord {
	if x != nil {
		return x.BreachWatchRecords
	}
	return nil
}

func (x *SyncDownResponse) GetUserAuths() []*UserAuth {
	if x != nil {
		return x.UserAuths
	}
	return nil
}

func (x *SyncDownResponse) GetBreachWatchSecurityData() []*BreachWatchSecurityData {
	if x != nil {
		return x.BreachWatchSecurityData
	}
	return nil
}

func (x *SyncDownResponse) GetReusedPasswords() *ReusedPasswords {
	if x != nil {
		return x.ReusedPasswords
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedUserFolders() [][]byte {
	if x != nil {
		return x.RemovedUserFolders
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedSharedFolders() [][]byte {
	if x != nil {
		return x.RemovedSharedFolders
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedUserFolderSharedFolders() []*UserFolderSharedFolder {
	if x != nil {
		return x.RemovedUserFolderSharedFolders
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedSharedFolderFolders() []*SharedFolderFolder {
	if x != nil {
		return x.RemovedSharedFolderFolders
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedRecords() [][]byte {
	if x != nil {
		return x.RemovedRecords
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedRecordLinks() []*RecordLink {
	if x != nil {
		return x.RemovedRecordLinks
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedUserFolderRecords() []*UserFolderRecord {
	if x != nil {
		return x.RemovedUserFolderRecords
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedSharedFolderRecords() []*SharedFolderRecord {
	if x != nil {
		return x.RemovedSharedFolderRecords
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedSharedFolderFolderRecords() []*SharedFolderFolderRecord {
	if x != nil {
		return x.RemovedSharedFolderFolderRecords
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedSharedFolderUsers() []*SharedFolderUser {
	if x != nil {
		return x.RemovedSharedFolderUsers
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedSharedFolderTeams() []*SharedFolderTeam {
	if x != nil {
		return x.RemovedSharedFolderTeams
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedTeams() [][]byte {
	if x != nil {
		return x.RemovedTeams
	}
	return nil
}

func (x *SyncDownResponse) GetKsmAppShares() []*KsmChange {
	if x != nil {
		return x.KsmAppShares
	}
	return nil
}

func (x *SyncDownResponse) GetKsmAppClients() []*KsmChange {
	if x != nil {
		return x.KsmAppClients
	}
	return nil
}

func (x *SyncDownResponse) GetShareInvitations() []*ShareInvitation {
	if x != nil {
		return x.ShareInvitations
	}
	return nil
}

func (x *SyncDownResponse) GetDiagnostics() *SyncDiagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *SyncDownResponse) GetRecordRotations() []*RecordRotation {
	if x != nil {
		return x.RecordRotations
	}
	return nil
}

func (x *SyncDownResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *SyncDownResponse) GetRemovedUsers() [][]byte {
	if x != nil {
		return x.RemovedUsers
	}
	return nil
}

type UserFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid     []byte                    `protobuf:"bytes,1,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	ParentUid     []byte                    `protobuf:"bytes,2,opt,name=parentUid,proto3" json:"parentUid,omitempty"`
	UserFolderKey []byte                    `protobuf:"bytes,3,opt,name=userFolderKey,proto3" json:"userFolderKey,omitempty"`
	KeyType       proto_record.RecordKeyType `protobuf:"varint,4,opt,name=keyType,proto3,enum=Records.RecordKeyType" json:"keyType,omitempty"`
	Revision      int64                     `protobuf:"varint,5,opt,name=revision,proto3" json:"revision,omitempty"`
	Data          []byte                    `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserFolder) Reset() {
	*x = UserFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFolder) ProtoMessage() {}

func (x *UserFolder) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFolder.ProtoReflect.Descriptor instead.
func (*UserFolder) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{2}
}

func (x *UserFolder) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *UserFolder) GetParentUid() []byte {
	if x != nil {
		return x.ParentUid
	}
	return nil
}

func (x *UserFolder) GetUserFolderKey() []byte {
	if x != nil {
		return x.UserFolderKey
	}
	return nil
}

func (x *UserFolder) GetKeyType() proto_record.RecordKeyType {
	if x != nil {
		return x.KeyType
	}
	return proto_record.RecordKeyType(0)
}

func (x *UserFolder) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *UserFolder) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SharedFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte                    `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	Revision        int64                     `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	SharedFolderKey []byte                    `protobuf:"bytes,3,opt,name=sharedFolderKey,proto3" json:"sharedFolderKey,omitempty"`
	KeyType         proto_record.RecordKeyType `protobuf:"varint,4,opt,name=keyType,proto3,enum=Records.RecordKeyType" json:"keyType,omitempty"`
	// encrypted by the shared folder key - may be empty for old folders
	Data                 []byte      `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	DefaultManageRecords bool        `protobuf:"varint,6,opt,name=defaultManageRecords,proto3" json:"defaultManageRecords,omitempty"`
	DefaultManageUsers   bool        `protobuf:"varint,7,opt,name=defaultManageUsers,proto3" json:"defaultManageUsers,omitempty"`
	DefaultCanEdit       bool        `protobuf:"varint,8,opt,name=defaultCanEdit,proto3" json:"defaultCanEdit,omitempty"`
	DefaultCanReshare    bool        `protobuf:"varint,9,opt,name=defaultCanReshare,proto3" json:"defaultCanReshare,omitempty"`
	CacheStatus          CacheStatus `protobuf:"varint,10,opt,name=cacheStatus,proto3,enum=Vault.CacheStatus" json:"cacheStatus,omitempty"`
	Owner                string      `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty"`                     //  obsolete - use ownerAccountUid instead
	OwnerAccountUid      []byte      `protobuf:"bytes,12,opt,name=ownerAccountUid,proto3" json:"ownerAccountUid,omitempty"` //  may be empty
	// encrypted by the shared folder key - may be empty for new folders - see
	// "data" instead
	Name []byte `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SharedFolder) Reset() {
	*x = SharedFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolder) ProtoMessage() {}

func (x *SharedFolder) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolder.ProtoReflect.Descriptor instead.
func (*SharedFolder) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{3}
}

func (x *SharedFolder) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolder) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *SharedFolder) GetSharedFolderKey() []byte {
	if x != nil {
		return x.SharedFolderKey
	}
	return nil
}

func (x *SharedFolder) GetKeyType() proto_record.RecordKeyType {
	if x != nil {
		return x.KeyType
	}
	return proto_record.RecordKeyType(0)
}

func (x *SharedFolder) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SharedFolder) GetDefaultManageRecords() bool {
	if x != nil {
		return x.DefaultManageRecords
	}
	return false
}

func (x *SharedFolder) GetDefaultManageUsers() bool {
	if x != nil {
		return x.DefaultManageUsers
	}
	return false
}

func (x *SharedFolder) GetDefaultCanEdit() bool {
	if x != nil {
		return x.DefaultCanEdit
	}
	return false
}

func (x *SharedFolder) GetDefaultCanReshare() bool {
	if x != nil {
		return x.DefaultCanReshare
	}
	return false
}

func (x *SharedFolder) GetCacheStatus() CacheStatus {
	if x != nil {
		return x.CacheStatus
	}
	return CacheStatus_KEEP
}

func (x *SharedFolder) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SharedFolder) GetOwnerAccountUid() []byte {
	if x != nil {
		return x.OwnerAccountUid
	}
	return nil
}

func (x *SharedFolder) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

type UserFolderSharedFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid       []byte `protobuf:"bytes,1,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	SharedFolderUid []byte `protobuf:"bytes,2,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	Revision        int64  `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *UserFolderSharedFolder) Reset() {
	*x = UserFolderSharedFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFolderSharedFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFolderSharedFolder) ProtoMessage() {}

func (x *UserFolderSharedFolder) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFolderSharedFolder.ProtoReflect.Descriptor instead.
func (*UserFolderSharedFolder) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{4}
}

func (x *UserFolderSharedFolder) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *UserFolderSharedFolder) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *UserFolderSharedFolder) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type SharedFolderFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid       []byte                    `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	FolderUid             []byte                    `protobuf:"bytes,2,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	ParentUid             []byte                    `protobuf:"bytes,3,opt,name=parentUid,proto3" json:"parentUid,omitempty"`
	SharedFolderFolderKey []byte                    `protobuf:"bytes,4,opt,name=sharedFolderFolderKey,proto3" json:"sharedFolderFolderKey,omitempty"`
	KeyType               proto_record.RecordKeyType `protobuf:"varint,5,opt,name=keyType,proto3,enum=Records.RecordKeyType" json:"keyType,omitempty"`
	Revision              int64                     `protobuf:"varint,6,opt,name=revision,proto3" json:"revision,omitempty"`
	Data                  []byte                    `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SharedFolderFolder) Reset() {
	*x = SharedFolderFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderFolder) ProtoMessage() {}

func (x *SharedFolderFolder) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderFolder.ProtoReflect.Descriptor instead.
func (*SharedFolderFolder) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{5}
}

func (x *SharedFolderFolder) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderFolder) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *SharedFolderFolder) GetParentUid() []byte {
	if x != nil {
		return x.ParentUid
	}
	return nil
}

func (x *SharedFolderFolder) GetSharedFolderFolderKey() []byte {
	if x != nil {
		return x.SharedFolderFolderKey
	}
	return nil
}

func (x *SharedFolderFolder) GetKeyType() proto_record.RecordKeyType {
	if x != nil {
		return x.KeyType
	}
	return proto_record.RecordKeyType(0)
}

func (x *SharedFolderFolder) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *SharedFolderFolder) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SharedFolderKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte                    `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	SharedFolderKey []byte                    `protobuf:"bytes,2,opt,name=sharedFolderKey,proto3" json:"sharedFolderKey,omitempty"`
	KeyType         proto_record.RecordKeyType `protobuf:"varint,3,opt,name=keyType,proto3,enum=Records.RecordKeyType" json:"keyType,omitempty"`
}

func (x *SharedFolderKey) Reset() {
	*x = SharedFolderKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderKey) ProtoMessage() {}

func (x *SharedFolderKey) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderKey.ProtoReflect.Descriptor instead.
func (*SharedFolderKey) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{6}
}

func (x *SharedFolderKey) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderKey) GetSharedFolderKey() []byte {
	if x != nil {
		return x.SharedFolderKey
	}
	return nil
}

func (x *SharedFolderKey) GetKeyType() proto_record.RecordKeyType {
	if x != nil {
		return x.KeyType
	}
	return proto_record.RecordKeyType(0)
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid              []byte                    `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Name                 string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TeamKey              []byte                    `protobuf:"bytes,3,opt,name=teamKey,proto3" json:"teamKey,omitempty"`
	TeamKeyType          proto_record.RecordKeyType `protobuf:"varint,4,opt,name=teamKeyType,proto3,enum=Records.RecordKeyType" json:"teamKeyType,omitempty"`
	TeamPrivateKey       []byte                    `protobuf:"bytes,5,opt,name=teamPrivateKey,proto3" json:"teamPrivateKey,omitempty"`
	RestrictEdit         bool                      `protobuf:"varint,6,opt,name=restrictEdit,proto3" json:"restrictEdit,omitempty"`
	RestrictShare        bool                      `protobuf:"varint,7,opt,name=restrictShare,proto3" json:"restrictShare,omitempty"`
	RestrictView         bool                      `protobuf:"varint,8,opt,name=restrictView,proto3" json:"restrictView,omitempty"`
	RemovedSharedFolders [][]byte                  `protobuf:"bytes,9,rep,name=removedSharedFolders,proto3" json:"removedSharedFolders,omitempty"`
	SharedFolderKeys     []*SharedFolderKey        `protobuf:"bytes,10,rep,name=sharedFolderKeys,proto3" json:"sharedFolderKeys,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{7}
}

func (x *Team) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetTeamKey() []byte {
	if x != nil {
		return x.TeamKey
	}
	return nil
}

func (x *Team) GetTeamKeyType() proto_record.RecordKeyType {
	if x != nil {
		return x.TeamKeyType
	}
	return proto_record.RecordKeyType(0)
}

func (x *Team) GetTeamPrivateKey() []byte {
	if x != nil {
		return x.TeamPrivateKey
	}
	return nil
}

func (x *Team) GetRestrictEdit() bool {
	if x != nil {
		return x.RestrictEdit
	}
	return false
}

func (x *Team) GetRestrictShare() bool {
	if x != nil {
		return x.RestrictShare
	}
	return false
}

func (x *Team) GetRestrictView() bool {
	if x != nil {
		return x.RestrictView
	}
	return false
}

func (x *Team) GetRemovedSharedFolders() [][]byte {
	if x != nil {
		return x.RemovedSharedFolders
	}
	return nil
}

func (x *Team) GetSharedFolderKeys() []*SharedFolderKey {
	if x != nil {
		return x.SharedFolderKeys
	}
	return nil
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid          []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Revision           int64  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Version            int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Shared             bool   `protobuf:"varint,4,opt,name=shared,proto3" json:"shared,omitempty"`
	ClientModifiedTime int64  `protobuf:"varint,5,opt,name=clientModifiedTime,proto3" json:"clientModifiedTime,omitempty"`
	Data               []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Extra              []byte `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`
	Udata              string `protobuf:"bytes,8,opt,name=udata,proto3" json:"udata,omitempty"`
	FileSize           int64  `protobuf:"varint,9,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	ThumbnailSize      int64  `protobuf:"varint,10,opt,name=thumbnailSize,proto3" json:"thumbnailSize,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{8}
}

func (x *Record) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *Record) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *Record) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Record) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

func (x *Record) GetClientModifiedTime() int64 {
	if x != nil {
		return x.ClientModifiedTime
	}
	return 0
}

func (x *Record) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Record) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Record) GetUdata() string {
	if x != nil {
		return x.Udata
	}
	return ""
}

func (x *Record) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Record) GetThumbnailSize() int64 {
	if x != nil {
		return x.ThumbnailSize
	}
	return 0
}

type RecordLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentRecordUid []byte `protobuf:"bytes,1,opt,name=parentRecordUid,proto3" json:"parentRecordUid,omitempty"`
	ChildRecordUid  []byte `protobuf:"bytes,2,opt,name=childRecordUid,proto3" json:"childRecordUid,omitempty"`
	RecordKey       []byte `protobuf:"bytes,3,opt,name=recordKey,proto3" json:"recordKey,omitempty"`
	Revision        int64  `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *RecordLink) Reset() {
	*x = RecordLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordLink) ProtoMessage() {}

func (x *RecordLink) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordLink.ProtoReflect.Descriptor instead.
func (*RecordLink) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{9}
}

func (x *RecordLink) GetParentRecordUid() []byte {
	if x != nil {
		return x.ParentRecordUid
	}
	return nil
}

func (x *RecordLink) GetChildRecordUid() []byte {
	if x != nil {
		return x.ChildRecordUid
	}
	return nil
}

func (x *RecordLink) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *RecordLink) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type UserFolderRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid []byte `protobuf:"bytes,1,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	RecordUid []byte `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Revision  int64  `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *UserFolderRecord) Reset() {
	*x = UserFolderRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFolderRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFolderRecord) ProtoMessage() {}

func (x *UserFolderRecord) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFolderRecord.ProtoReflect.Descriptor instead.
func (*UserFolderRecord) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{10}
}

func (x *UserFolderRecord) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *UserFolderRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *UserFolderRecord) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type SharedFolderFolderRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	FolderUid       []byte `protobuf:"bytes,2,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	RecordUid       []byte `protobuf:"bytes,3,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
}

func (x *SharedFolderFolderRecord) Reset() {
	*x = SharedFolderFolderRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderFolderRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderFolderRecord) ProtoMessage() {}

func (x *SharedFolderFolderRecord) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderFolderRecord.ProtoReflect.Descriptor instead.
func (*SharedFolderFolderRecord) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{11}
}

func (x *SharedFolderFolderRecord) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderFolderRecord) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *SharedFolderFolderRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

type NonSharedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NonSharedData) Reset() {
	*x = NonSharedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonSharedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonSharedData) ProtoMessage() {}

func (x *NonSharedData) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonSharedData.ProtoReflect.Descriptor instead.
func (*NonSharedData) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{12}
}

func (x *NonSharedData) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *NonSharedData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid       []byte                    `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Owner           bool                      `protobuf:"varint,2,opt,name=owner,proto3" json:"owner,omitempty"`
	RecordKey       []byte                    `protobuf:"bytes,3,opt,name=recordKey,proto3" json:"recordKey,omitempty"`
	RecordKeyType   proto_record.RecordKeyType `protobuf:"varint,4,opt,name=recordKeyType,proto3,enum=Records.RecordKeyType" json:"recordKeyType,omitempty"`
	CanShare        bool                      `protobuf:"varint,5,opt,name=canShare,proto3" json:"canShare,omitempty"`
	CanEdit         bool                      `protobuf:"varint,6,opt,name=canEdit,proto3" json:"canEdit,omitempty"`
	OwnerAccountUid []byte                    `protobuf:"bytes,7,opt,name=ownerAccountUid,proto3" json:"ownerAccountUid,omitempty"`
	Expiration      int64                     `protobuf:"varint,8,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *RecordMetaData) Reset() {
	*x = RecordMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMetaData) ProtoMessage() {}

func (x *RecordMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMetaData.ProtoReflect.Descriptor instead.
func (*RecordMetaData) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{13}
}

func (x *RecordMetaData) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordMetaData) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *RecordMetaData) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *RecordMetaData) GetRecordKeyType() proto_record.RecordKeyType {
	if x != nil {
		return x.RecordKeyType
	}
	return proto_record.RecordKeyType(0)
}

func (x *RecordMetaData) GetCanShare() bool {
	if x != nil {
		return x.CanShare
	}
	return false
}

func (x *RecordMetaData) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *RecordMetaData) GetOwnerAccountUid() []byte {
	if x != nil {
		return x.OwnerAccountUid
	}
	return nil
}

func (x *RecordMetaData) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

type SharingChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Shared    bool   `protobuf:"varint,2,opt,name=shared,proto3" json:"shared,omitempty"`
}

func (x *SharingChange) Reset() {
	*x = SharingChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharingChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharingChange) ProtoMessage() {}

func (x *SharingChange) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharingChange.ProtoReflect.Descriptor instead.
func (*SharingChange) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{14}
}

func (x *SharingChange) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *SharingChange) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ProfileName string `protobuf:"bytes,2,opt,name=profileName,proto3" json:"profileName,omitempty"`
	Revision    int64  `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{15}
}

func (x *Profile) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Profile) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *Profile) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type ProfilePic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Revision int64  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ProfilePic) Reset() {
	*x = ProfilePic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePic) ProtoMessage() {}

func (x *ProfilePic) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePic.ProtoReflect.Descriptor instead.
func (*ProfilePic) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{16}
}

func (x *ProfilePic) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ProfilePic) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type PendingTeamMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseUserId int64    `protobuf:"varint,1,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	UserPublicKey    []byte   `protobuf:"bytes,2,opt,name=userPublicKey,proto3" json:"userPublicKey,omitempty"`
	TeamUids         [][]byte `protobuf:"bytes,3,rep,name=teamUids,proto3" json:"teamUids,omitempty"`
}

func (x *PendingTeamMember) Reset() {
	*x = PendingTeamMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingTeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingTeamMember) ProtoMessage() {}

func (x *PendingTeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingTeamMember.ProtoReflect.Descriptor instead.
func (*PendingTeamMember) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{17}
}

func (x *PendingTeamMember) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *PendingTeamMember) GetUserPublicKey() []byte {
	if x != nil {
		return x.UserPublicKey
	}
	return nil
}

func (x *PendingTeamMember) GetTeamUids() [][]byte {
	if x != nil {
		return x.TeamUids
	}
	return nil
}

type BreachWatchRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid           []byte                          `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Data                []byte                          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Type                BreachWatchInfoType `protobuf:"varint,3,opt,name=type,proto3,enum=BreachWatch.BreachWatchInfoType" json:"type,omitempty"`
	ScannedBy           string                          `protobuf:"bytes,4,opt,name=scannedBy,proto3" json:"scannedBy,omitempty"` //  obsolete - use scannedByAccountUid instead
	Revision            int64                           `protobuf:"varint,5,opt,name=revision,proto3" json:"revision,omitempty"`
	ScannedByAccountUid []byte                          `protobuf:"bytes,6,opt,name=scannedByAccountUid,proto3" json:"scannedByAccountUid,omitempty"`
}

func (x *BreachWatchRecord) Reset() {
	*x = BreachWatchRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreachWatchRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreachWatchRecord) ProtoMessage() {}

func (x *BreachWatchRecord) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreachWatchRecord.ProtoReflect.Descriptor instead.
func (*BreachWatchRecord) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{18}
}

func (x *BreachWatchRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *BreachWatchRecord) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BreachWatchRecord) GetType() BreachWatchInfoType {
	if x != nil {
		return x.Type
	}
	return BreachWatchInfoType(0)
}

func (x *BreachWatchRecord) GetScannedBy() string {
	if x != nil {
		return x.ScannedBy
	}
	return ""
}

func (x *BreachWatchRecord) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *BreachWatchRecord) GetScannedByAccountUid() []byte {
	if x != nil {
		return x.ScannedByAccountUid
	}
	return nil
}

type UserAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                []byte               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LoginType          proto_auth.LoginType `protobuf:"varint,2,opt,name=loginType,proto3,enum=Authentication.LoginType" json:"loginType,omitempty"`
	Deleted            bool                 `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Iterations         int32                `protobuf:"varint,4,opt,name=iterations,proto3" json:"iterations,omitempty"`
	Salt               []byte               `protobuf:"bytes,5,opt,name=salt,proto3" json:"salt,omitempty"`
	EncryptedClientKey []byte               `protobuf:"bytes,6,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`
	Revision           int64                `protobuf:"varint,7,opt,name=revision,proto3" json:"revision,omitempty"`
	Name               string               `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UserAuth) Reset() {
	*x = UserAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuth) ProtoMessage() {}

func (x *UserAuth) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuth.ProtoReflect.Descriptor instead.
func (*UserAuth) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{19}
}

func (x *UserAuth) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *UserAuth) GetLoginType() proto_auth.LoginType {
	if x != nil {
		return x.LoginType
	}
	return proto_auth.LoginType(0)
}

func (x *UserAuth) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *UserAuth) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *UserAuth) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *UserAuth) GetEncryptedClientKey() []byte {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *UserAuth) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *UserAuth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BreachWatchSecurityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Revision  int64  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *BreachWatchSecurityData) Reset() {
	*x = BreachWatchSecurityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreachWatchSecurityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreachWatchSecurityData) ProtoMessage() {}

func (x *BreachWatchSecurityData) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreachWatchSecurityData.ProtoReflect.Descriptor instead.
func (*BreachWatchSecurityData) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{20}
}

func (x *BreachWatchSecurityData) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *BreachWatchSecurityData) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type ReusedPasswords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Revision int64 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ReusedPasswords) Reset() {
	*x = ReusedPasswords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReusedPasswords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReusedPasswords) ProtoMessage() {}

func (x *ReusedPasswords) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReusedPasswords.ProtoReflect.Descriptor instead.
func (*ReusedPasswords) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{21}
}

func (x *ReusedPasswords) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReusedPasswords) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type SharedFolderRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	RecordUid       []byte `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	RecordKey       []byte `protobuf:"bytes,3,opt,name=recordKey,proto3" json:"recordKey,omitempty"`
	CanShare        bool   `protobuf:"varint,4,opt,name=canShare,proto3" json:"canShare,omitempty"`
	CanEdit         bool   `protobuf:"varint,5,opt,name=canEdit,proto3" json:"canEdit,omitempty"`
	OwnerAccountUid []byte `protobuf:"bytes,6,opt,name=ownerAccountUid,proto3" json:"ownerAccountUid,omitempty"`
	Expiration      int64  `protobuf:"varint,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Owner           bool   `protobuf:"varint,8,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *SharedFolderRecord) Reset() {
	*x = SharedFolderRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderRecord) ProtoMessage() {}

func (x *SharedFolderRecord) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderRecord.ProtoReflect.Descriptor instead.
func (*SharedFolderRecord) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{22}
}

func (x *SharedFolderRecord) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *SharedFolderRecord) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *SharedFolderRecord) GetCanShare() bool {
	if x != nil {
		return x.CanShare
	}
	return false
}

func (x *SharedFolderRecord) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *SharedFolderRecord) GetOwnerAccountUid() []byte {
	if x != nil {
		return x.OwnerAccountUid
	}
	return nil
}

func (x *SharedFolderRecord) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *SharedFolderRecord) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

type SharedFolderUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	Username        string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"` //  obsolete - use accountUid instead
	// (but, uhh, for now, it's still used in removedSharedFolderUsers.)
	ManageRecords bool   `protobuf:"varint,3,opt,name=manageRecords,proto3" json:"manageRecords,omitempty"`
	ManageUsers   bool   `protobuf:"varint,4,opt,name=manageUsers,proto3" json:"manageUsers,omitempty"`
	AccountUid    []byte `protobuf:"bytes,5,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
	Expiration    int64  `protobuf:"varint,6,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *SharedFolderUser) Reset() {
	*x = SharedFolderUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUser) ProtoMessage() {}

func (x *SharedFolderUser) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUser.ProtoReflect.Descriptor instead.
func (*SharedFolderUser) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{23}
}

func (x *SharedFolderUser) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SharedFolderUser) GetManageRecords() bool {
	if x != nil {
		return x.ManageRecords
	}
	return false
}

func (x *SharedFolderUser) GetManageUsers() bool {
	if x != nil {
		return x.ManageUsers
	}
	return false
}

func (x *SharedFolderUser) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

func (x *SharedFolderUser) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

type SharedFolderTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	TeamUid         []byte `protobuf:"bytes,2,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` //  remove this?
	ManageRecords   bool   `protobuf:"varint,4,opt,name=manageRecords,proto3" json:"manageRecords,omitempty"`
	ManageUsers     bool   `protobuf:"varint,5,opt,name=manageUsers,proto3" json:"manageUsers,omitempty"`
	Expiration      int64  `protobuf:"varint,6,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *SharedFolderTeam) Reset() {
	*x = SharedFolderTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderTeam) ProtoMessage() {}

func (x *SharedFolderTeam) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderTeam.ProtoReflect.Descriptor instead.
func (*SharedFolderTeam) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{24}
}

func (x *SharedFolderTeam) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderTeam) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *SharedFolderTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SharedFolderTeam) GetManageRecords() bool {
	if x != nil {
		return x.ManageRecords
	}
	return false
}

func (x *SharedFolderTeam) GetManageUsers() bool {
	if x != nil {
		return x.ManageUsers
	}
	return false
}

func (x *SharedFolderTeam) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

type KsmChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRecordUid []byte `protobuf:"bytes,1,opt,name=appRecordUid,proto3" json:"appRecordUid,omitempty"`
	DetailId     []byte `protobuf:"bytes,2,opt,name=detailId,proto3" json:"detailId,omitempty"`
	Removed      bool   `protobuf:"varint,3,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (x *KsmChange) Reset() {
	*x = KsmChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KsmChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KsmChange) ProtoMessage() {}

func (x *KsmChange) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KsmChange.ProtoReflect.Descriptor instead.
func (*KsmChange) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{25}
}

func (x *KsmChange) GetAppRecordUid() []byte {
	if x != nil {
		return x.AppRecordUid
	}
	return nil
}

func (x *KsmChange) GetDetailId() []byte {
	if x != nil {
		return x.DetailId
	}
	return nil
}

func (x *KsmChange) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

type ShareInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *ShareInvitation) Reset() {
	*x = ShareInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareInvitation) ProtoMessage() {}

func (x *ShareInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareInvitation.ProtoReflect.Descriptor instead.
func (*ShareInvitation) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{26}
}

func (x *ShareInvitation) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountUid []byte `protobuf:"bytes,1,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
	Username   string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{27}
}

func (x *User) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type SyncDiagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContinuationToken []byte `protobuf:"bytes,1,opt,name=continuationToken,proto3" json:"continuationToken,omitempty"` //  unencrypted version
	UserId            int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	EnterpriseUserId  int64  `protobuf:"varint,3,opt,name=enterpriseUserId,proto3" json:"enterpriseUserId,omitempty"`
	SyncedTo          int64  `protobuf:"varint,4,opt,name=syncedTo,proto3" json:"syncedTo,omitempty"`   //  also in token
	SyncingTo         int64  `protobuf:"varint,5,opt,name=syncingTo,proto3" json:"syncingTo,omitempty"` //  also in token
}

func (x *SyncDiagnostics) Reset() {
	*x = SyncDiagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDiagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDiagnostics) ProtoMessage() {}

func (x *SyncDiagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDiagnostics.ProtoReflect.Descriptor instead.
func (*SyncDiagnostics) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{28}
}

func (x *SyncDiagnostics) GetContinuationToken() []byte {
	if x != nil {
		return x.ContinuationToken
	}
	return nil
}

func (x *SyncDiagnostics) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SyncDiagnostics) GetEnterpriseUserId() int64 {
	if x != nil {
		return x.EnterpriseUserId
	}
	return 0
}

func (x *SyncDiagnostics) GetSyncedTo() int64 {
	if x != nil {
		return x.SyncedTo
	}
	return 0
}

func (x *SyncDiagnostics) GetSyncingTo() int64 {
	if x != nil {
		return x.SyncingTo
	}
	return 0
}

type RecordRotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid          []byte               `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Revision           int64                `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	ConfigurationUid   []byte               `protobuf:"bytes,3,opt,name=configurationUid,proto3" json:"configurationUid,omitempty"`
	Schedule           string               `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	PwdComplexity      []byte               `protobuf:"bytes,5,opt,name=pwdComplexity,proto3" json:"pwdComplexity,omitempty"`
	Disabled           bool                 `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	ResourceUid        []byte               `protobuf:"bytes,7,opt,name=resourceUid,proto3" json:"resourceUid,omitempty"`
	LastRotation       int64                `protobuf:"varint,8,opt,name=lastRotation,proto3" json:"lastRotation,omitempty"`
	LastRotationStatus RecordRotationStatus `protobuf:"varint,9,opt,name=lastRotationStatus,proto3,enum=Vault.RecordRotationStatus" json:"lastRotationStatus,omitempty"`
}

func (x *RecordRotation) Reset() {
	*x = RecordRotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordRotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRotation) ProtoMessage() {}

func (x *RecordRotation) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRotation.ProtoReflect.Descriptor instead.
func (*RecordRotation) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{29}
}

func (x *RecordRotation) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordRotation) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RecordRotation) GetConfigurationUid() []byte {
	if x != nil {
		return x.ConfigurationUid
	}
	return nil
}

func (x *RecordRotation) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *RecordRotation) GetPwdComplexity() []byte {
	if x != nil {
		return x.PwdComplexity
	}
	return nil
}

func (x *RecordRotation) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *RecordRotation) GetResourceUid() []byte {
	if x != nil {
		return x.ResourceUid
	}
	return nil
}

func (x *RecordRotation) GetLastRotation() int64 {
	if x != nil {
		return x.LastRotation
	}
	return 0
}

func (x *RecordRotation) GetLastRotationStatus() RecordRotationStatus {
	if x != nil {
		return x.LastRotationStatus
	}
	return RecordRotationStatus_RRST_NOT_ROTATED
}

// breachwatch/get_sync_data - not sync_down responses, but they use sync_down
// types, so:
type BreachWatchGetSyncDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUids [][]byte `protobuf:"bytes,1,rep,name=recordUids,proto3" json:"recordUids,omitempty"`
}

func (x *BreachWatchGetSyncDataRequest) Reset() {
	*x = BreachWatchGetSyncDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreachWatchGetSyncDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreachWatchGetSyncDataRequest) ProtoMessage() {}

func (x *BreachWatchGetSyncDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreachWatchGetSyncDataRequest.ProtoReflect.Descriptor instead.
func (*BreachWatchGetSyncDataRequest) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{30}
}

func (x *BreachWatchGetSyncDataRequest) GetRecordUids() [][]byte {
	if x != nil {
		return x.RecordUids
	}
	return nil
}

type BreachWatchGetSyncDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreachWatchRecords      []*BreachWatchRecord       `protobuf:"bytes,1,rep,name=breachWatchRecords,proto3" json:"breachWatchRecords,omitempty"`
	BreachWatchSecurityData []*BreachWatchSecurityData `protobuf:"bytes,2,rep,name=breachWatchSecurityData,proto3" json:"breachWatchSecurityData,omitempty"`
	Users                   []*User                    `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"` //  maps accountUids to usernames
}

func (x *BreachWatchGetSyncDataResponse) Reset() {
	*x = BreachWatchGetSyncDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SyncDown_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreachWatchGetSyncDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreachWatchGetSyncDataResponse) ProtoMessage() {}

func (x *BreachWatchGetSyncDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SyncDown_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreachWatchGetSyncDataResponse.ProtoReflect.Descriptor instead.
func (*BreachWatchGetSyncDataResponse) Descriptor() ([]byte, []int) {
	return file_SyncDown_proto_rawDescGZIP(), []int{31}
}

func (x *BreachWatchGetSyncDataResponse) GetBreachWatchRecords() []*BreachWatchRecord {
	if x != nil {
		return x.BreachWatchRecords
	}
	return nil
}

func (x *BreachWatchGetSyncDataResponse) GetBreachWatchSecurityData() []*BreachWatchSecurityData {
	if x != nil {
		return x.BreachWatchSecurityData
	}
	return nil
}

func (x *BreachWatchGetSyncDataResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

var File_SyncDown_proto protoreflect.FileDescriptor

var file_SyncDown_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x0f, 0x53, 0x79,
	0x6e, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x16,
	0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x33, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x57, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4e, 0x6f,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6e, 0x6f, 0x6e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x45, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x5d, 0x0a, 0x19, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x19, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x64, 0x64, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x64, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x69, 0x63, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x12, 0x48,
	0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x42, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x12,
	0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x73, 0x12, 0x58, 0x0a, 0x17, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x17, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0f, 0x72,
	0x65, 0x75, 0x73, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x0f, 0x72, 0x65,
	0x75, 0x73, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x65, 0x0a, 0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x59, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x53,
	0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x59, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x6b,
	0x0a, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x53, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x25, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x18, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x6b, 0x73, 0x6d,
	0x41, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4b, 0x73, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0c, 0x6b, 0x73, 0x6d, 0x41, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x0d, 0x6b, 0x73, 0x6d, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4b,
	0x73, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x6b, 0x73, 0x6d, 0x41, 0x70, 0x70,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xd0, 0x01,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x88, 0x04, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6e, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x16, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x97,
	0x01, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x04, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x65, 0x61,
	0x6d, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x74, 0x65, 0x61,
	0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a,
	0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52,
	0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x73, 0x22, 0xa6, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x75, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0d, 0x4e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x0d, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x22, 0x5b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x73, 0x22, 0xe7,
	0x01, 0x0a, 0x11, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53,
	0x0a, 0x17, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x0f, 0x52, 0x65, 0x75, 0x73, 0x65, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x12, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x10,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2,
	0x01, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x09, 0x4b, 0x73, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01,
	0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x22, 0xe7, 0x02,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x77, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x77, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3f, 0x0a, 0x1d, 0x42, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x1e, 0x42, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x62,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x12, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2a, 0x22, 0x0a, 0x0b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x2a, 0x66, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x52, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x52, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x52,
	0x53, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x52, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x42, 0x21,
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x05, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_SyncDown_proto_rawDescOnce sync.Once
	file_SyncDown_proto_rawDescData = file_SyncDown_proto_rawDesc
)

func file_SyncDown_proto_rawDescGZIP() []byte {
	file_SyncDown_proto_rawDescOnce.Do(func() {
		file_SyncDown_proto_rawDescData = protoimpl.X.CompressGZIP(file_SyncDown_proto_rawDescData)
	})
	return file_SyncDown_proto_rawDescData
}

var file_SyncDown_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_SyncDown_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_SyncDown_proto_goTypes = []interface{}{
	(CacheStatus)(0),                       // 0: Vault.CacheStatus
	(RecordRotationStatus)(0),              // 1: Vault.RecordRotationStatus
	(*SyncDownRequest)(nil),                // 2: Vault.SyncDownRequest
	(*SyncDownResponse)(nil),               // 3: Vault.SyncDownResponse
	(*UserFolder)(nil),                     // 4: Vault.UserFolder
	(*SharedFolder)(nil),                   // 5: Vault.SharedFolder
	(*UserFolderSharedFolder)(nil),         // 6: Vault.UserFolderSharedFolder
	(*SharedFolderFolder)(nil),             // 7: Vault.SharedFolderFolder
	(*SharedFolderKey)(nil),                // 8: Vault.SharedFolderKey
	(*Team)(nil),                           // 9: Vault.Team
	(*Record)(nil),                         // 10: Vault.Record
	(*RecordLink)(nil),                     // 11: Vault.RecordLink
	(*UserFolderRecord)(nil),               // 12: Vault.UserFolderRecord
	(*SharedFolderFolderRecord)(nil),       // 13: Vault.SharedFolderFolderRecord
	(*NonSharedData)(nil),                  // 14: Vault.NonSharedData
	(*RecordMetaData)(nil),                 // 15: Vault.RecordMetaData
	(*SharingChange)(nil),                  // 16: Vault.SharingChange
	(*Profile)(nil),                        // 17: Vault.Profile
	(*ProfilePic)(nil),                     // 18: Vault.ProfilePic
	(*PendingTeamMember)(nil),              // 19: Vault.PendingTeamMember
	(*BreachWatchRecord)(nil),              // 20: Vault.BreachWatchRecord
	(*UserAuth)(nil),                       // 21: Vault.UserAuth
	(*BreachWatchSecurityData)(nil),        // 22: Vault.BreachWatchSecurityData
	(*ReusedPasswords)(nil),                // 23: Vault.ReusedPasswords
	(*SharedFolderRecord)(nil),             // 24: Vault.SharedFolderRecord
	(*SharedFolderUser)(nil),               // 25: Vault.SharedFolderUser
	(*SharedFolderTeam)(nil),               // 26: Vault.SharedFolderTeam
	(*KsmChange)(nil),                      // 27: Vault.KsmChange
	(*ShareInvitation)(nil),                // 28: Vault.ShareInvitation
	(*User)(nil),                           // 29: Vault.User
	(*SyncDiagnostics)(nil),                // 30: Vault.SyncDiagnostics
	(*RecordRotation)(nil),                 // 31: Vault.RecordRotation
	(*BreachWatchGetSyncDataRequest)(nil),  // 32: Vault.BreachWatchGetSyncDataRequest
	(*BreachWatchGetSyncDataResponse)(nil), // 33: Vault.BreachWatchGetSyncDataResponse
	(proto_record.RecordKeyType)(0),         // 34: Records.RecordKeyType
	(BreachWatchInfoType)(0),   // 35: BreachWatch.BreachWatchInfoType
	(proto_auth.LoginType)(0),              // 36: Authentication.LoginType
}
var file_SyncDown_proto_depIdxs = []int32{
	0,  // 0: Vault.SyncDownResponse.cacheStatus:type_name -> Vault.CacheStatus
	4,  // 1: Vault.SyncDownResponse.userFolders:type_name -> Vault.UserFolder
	5,  // 2: Vault.SyncDownResponse.sharedFolders:type_name -> Vault.SharedFolder
	6,  // 3: Vault.SyncDownResponse.userFolderSharedFolders:type_name -> Vault.UserFolderSharedFolder
	7,  // 4: Vault.SyncDownResponse.sharedFolderFolders:type_name -> Vault.SharedFolderFolder
	10, // 5: Vault.SyncDownResponse.records:type_name -> Vault.Record
	15, // 6: Vault.SyncDownResponse.recordMetaData:type_name -> Vault.RecordMetaData
	14, // 7: Vault.SyncDownResponse.nonSharedData:type_name -> Vault.NonSharedData
	11, // 8: Vault.SyncDownResponse.recordLinks:type_name -> Vault.RecordLink
	12, // 9: Vault.SyncDownResponse.userFolderRecords:type_name -> Vault.UserFolderRecord
	24, // 10: Vault.SyncDownResponse.sharedFolderRecords:type_name -> Vault.SharedFolderRecord
	13, // 11: Vault.SyncDownResponse.sharedFolderFolderRecords:type_name -> Vault.SharedFolderFolderRecord
	25, // 12: Vault.SyncDownResponse.sharedFolderUsers:type_name -> Vault.SharedFolderUser
	26, // 13: Vault.SyncDownResponse.sharedFolderTeams:type_name -> Vault.SharedFolderTeam
	9,  // 14: Vault.SyncDownResponse.teams:type_name -> Vault.Team
	16, // 15: Vault.SyncDownResponse.sharingChanges:type_name -> Vault.SharingChange
	17, // 16: Vault.SyncDownResponse.profile:type_name -> Vault.Profile
	18, // 17: Vault.SyncDownResponse.profilePic:type_name -> Vault.ProfilePic
	19, // 18: Vault.SyncDownResponse.pendingTeamMembers:type_name -> Vault.PendingTeamMember
	20, // 19: Vault.SyncDownResponse.breachWatchRecords:type_name -> Vault.BreachWatchRecord
	21, // 20: Vault.SyncDownResponse.userAuths:type_name -> Vault.UserAuth
	22, // 21: Vault.SyncDownResponse.breachWatchSecurityData:type_name -> Vault.BreachWatchSecurityData
	23, // 22: Vault.SyncDownResponse.reusedPasswords:type_name -> Vault.ReusedPasswords
	6,  // 23: Vault.SyncDownResponse.removedUserFolderSharedFolders:type_name -> Vault.UserFolderSharedFolder
	7,  // 24: Vault.SyncDownResponse.removedSharedFolderFolders:type_name -> Vault.SharedFolderFolder
	11, // 25: Vault.SyncDownResponse.removedRecordLinks:type_name -> Vault.RecordLink
	12, // 26: Vault.SyncDownResponse.removedUserFolderRecords:type_name -> Vault.UserFolderRecord
	24, // 27: Vault.SyncDownResponse.removedSharedFolderRecords:type_name -> Vault.SharedFolderRecord
	13, // 28: Vault.SyncDownResponse.removedSharedFolderFolderRecords:type_name -> Vault.SharedFolderFolderRecord
	25, // 29: Vault.SyncDownResponse.removedSharedFolderUsers:type_name -> Vault.SharedFolderUser
	26, // 30: Vault.SyncDownResponse.removedSharedFolderTeams:type_name -> Vault.SharedFolderTeam
	27, // 31: Vault.SyncDownResponse.ksmAppShares:type_name -> Vault.KsmChange
	27, // 32: Vault.SyncDownResponse.ksmAppClients:type_name -> Vault.KsmChange
	28, // 33: Vault.SyncDownResponse.shareInvitations:type_name -> Vault.ShareInvitation
	30, // 34: Vault.SyncDownResponse.diagnostics:type_name -> Vault.SyncDiagnostics
	31, // 35: Vault.SyncDownResponse.recordRotations:type_name -> Vault.RecordRotation
	29, // 36: Vault.SyncDownResponse.users:type_name -> Vault.User
	34, // 37: Vault.UserFolder.keyType:type_name -> Records.RecordKeyType
	34, // 38: Vault.SharedFolder.keyType:type_name -> Records.RecordKeyType
	0,  // 39: Vault.SharedFolder.cacheStatus:type_name -> Vault.CacheStatus
	34, // 40: Vault.SharedFolderFolder.keyType:type_name -> Records.RecordKeyType
	34, // 41: Vault.SharedFolderKey.keyType:type_name -> Records.RecordKeyType
	34, // 42: Vault.Team.teamKeyType:type_name -> Records.RecordKeyType
	8,  // 43: Vault.Team.sharedFolderKeys:type_name -> Vault.SharedFolderKey
	34, // 44: Vault.RecordMetaData.recordKeyType:type_name -> Records.RecordKeyType
	35, // 45: Vault.BreachWatchRecord.type:type_name -> BreachWatch.BreachWatchInfoType
	36, // 46: Vault.UserAuth.loginType:type_name -> Authentication.LoginType
	1,  // 47: Vault.RecordRotation.lastRotationStatus:type_name -> Vault.RecordRotationStatus
	20, // 48: Vault.BreachWatchGetSyncDataResponse.breachWatchRecords:type_name -> Vault.BreachWatchRecord
	22, // 49: Vault.BreachWatchGetSyncDataResponse.breachWatchSecurityData:type_name -> Vault.BreachWatchSecurityData
	29, // 50: Vault.BreachWatchGetSyncDataResponse.users:type_name -> Vault.User
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_SyncDown_proto_init() }
func file_SyncDown_proto_init() {
	if File_SyncDown_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_SyncDown_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFolderSharedFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFolderRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderFolderRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonSharedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharingChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingTeamMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreachWatchRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreachWatchSecurityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReusedPasswords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KsmChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDiagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordRotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreachWatchGetSyncDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SyncDown_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreachWatchGetSyncDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SyncDown_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SyncDown_proto_goTypes,
		DependencyIndexes: file_SyncDown_proto_depIdxs,
		EnumInfos:         file_SyncDown_proto_enumTypes,
		MessageInfos:      file_SyncDown_proto_msgTypes,
	}.Build()
	File_SyncDown_proto = out.File
	file_SyncDown_proto_rawDesc = nil
	file_SyncDown_proto_goTypes = nil
	file_SyncDown_proto_depIdxs = nil
}
