// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.1
// source: AccountSummary.proto

package proto_account_summary

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	proto_auth "github.com/keeper-security/keeper-sdk-golang/sdk/internal/proto_auth"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummaryVersion int32 `protobuf:"varint,1,opt,name=summaryVersion,proto3" json:"summaryVersion,omitempty"`
}

func (x *AccountSummaryRequest) Reset() {
	*x = AccountSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSummaryRequest) ProtoMessage() {}

func (x *AccountSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSummaryRequest.ProtoReflect.Descriptor instead.
func (*AccountSummaryRequest) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{0}
}

func (x *AccountSummaryRequest) GetSummaryVersion() int32 {
	if x != nil {
		return x.SummaryVersion
	}
	return 0
}

type AccountSummaryElements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientKey                       []byte        `protobuf:"bytes,1,opt,name=clientKey,proto3" json:"clientKey,omitempty"`
	Settings                        *Settings     `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	KeysInfo                        *KeysInfo     `protobuf:"bytes,3,opt,name=keysInfo,proto3" json:"keysInfo,omitempty"`
	SyncLogs                        []*SyncLog    `protobuf:"bytes,4,rep,name=syncLogs,proto3" json:"syncLogs,omitempty"`
	IsEnterpriseAdmin               bool          `protobuf:"varint,5,opt,name=isEnterpriseAdmin,proto3" json:"isEnterpriseAdmin,omitempty"`
	License                         *License      `protobuf:"bytes,6,opt,name=license,proto3" json:"license,omitempty"`
	Group                           *Group        `protobuf:"bytes,7,opt,name=group,proto3" json:"group,omitempty"`
	Enforcements                    *Enforcements `protobuf:"bytes,8,opt,name=Enforcements,proto3" json:"Enforcements,omitempty"`
	Images                          []*KeyValue   `protobuf:"bytes,9,rep,name=Images,proto3" json:"Images,omitempty"`
	PersonalLicense                 *License      `protobuf:"bytes,10,opt,name=personalLicense,proto3" json:"personalLicense,omitempty"`
	FixSharedFolderRecords          bool          `protobuf:"varint,11,opt,name=fixSharedFolderRecords,proto3" json:"fixSharedFolderRecords,omitempty"`
	Usernames                       []string      `protobuf:"bytes,12,rep,name=usernames,proto3" json:"usernames,omitempty"`
	Devices                         []*DeviceInfo `protobuf:"bytes,13,rep,name=devices,proto3" json:"devices,omitempty"`
	IsShareAdmin                    bool          `protobuf:"varint,14,opt,name=isShareAdmin,proto3" json:"isShareAdmin,omitempty"`
	AccountRecovery                 bool          `protobuf:"varint,15,opt,name=accountRecovery,proto3" json:"accountRecovery,omitempty"`
	AccountRecoveryPrompt           bool          `protobuf:"varint,16,opt,name=accountRecoveryPrompt,proto3" json:"accountRecoveryPrompt,omitempty"`
	MinMasterPasswordLengthNoPrompt int32         `protobuf:"varint,17,opt,name=minMasterPasswordLengthNoPrompt,proto3" json:"minMasterPasswordLengthNoPrompt,omitempty"`
}

func (x *AccountSummaryElements) Reset() {
	*x = AccountSummaryElements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSummaryElements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSummaryElements) ProtoMessage() {}

func (x *AccountSummaryElements) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSummaryElements.ProtoReflect.Descriptor instead.
func (*AccountSummaryElements) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{1}
}

func (x *AccountSummaryElements) GetClientKey() []byte {
	if x != nil {
		return x.ClientKey
	}
	return nil
}

func (x *AccountSummaryElements) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *AccountSummaryElements) GetKeysInfo() *KeysInfo {
	if x != nil {
		return x.KeysInfo
	}
	return nil
}

func (x *AccountSummaryElements) GetSyncLogs() []*SyncLog {
	if x != nil {
		return x.SyncLogs
	}
	return nil
}

func (x *AccountSummaryElements) GetIsEnterpriseAdmin() bool {
	if x != nil {
		return x.IsEnterpriseAdmin
	}
	return false
}

func (x *AccountSummaryElements) GetLicense() *License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *AccountSummaryElements) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AccountSummaryElements) GetEnforcements() *Enforcements {
	if x != nil {
		return x.Enforcements
	}
	return nil
}

func (x *AccountSummaryElements) GetImages() []*KeyValue {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *AccountSummaryElements) GetPersonalLicense() *License {
	if x != nil {
		return x.PersonalLicense
	}
	return nil
}

func (x *AccountSummaryElements) GetFixSharedFolderRecords() bool {
	if x != nil {
		return x.FixSharedFolderRecords
	}
	return false
}

func (x *AccountSummaryElements) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *AccountSummaryElements) GetDevices() []*DeviceInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *AccountSummaryElements) GetIsShareAdmin() bool {
	if x != nil {
		return x.IsShareAdmin
	}
	return false
}

func (x *AccountSummaryElements) GetAccountRecovery() bool {
	if x != nil {
		return x.AccountRecovery
	}
	return false
}

func (x *AccountSummaryElements) GetAccountRecoveryPrompt() bool {
	if x != nil {
		return x.AccountRecoveryPrompt
	}
	return false
}

func (x *AccountSummaryElements) GetMinMasterPasswordLengthNoPrompt() int32 {
	if x != nil {
		return x.MinMasterPasswordLengthNoPrompt
	}
	return 0
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedDeviceToken     []byte                  `protobuf:"bytes,1,opt,name=encryptedDeviceToken,proto3" json:"encryptedDeviceToken,omitempty"`
	DeviceName               string                  `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DeviceStatus             proto_auth.DeviceStatus `protobuf:"varint,3,opt,name=deviceStatus,proto3,enum=Authentication.DeviceStatus" json:"deviceStatus,omitempty"`
	DevicePublicKey          []byte                  `protobuf:"bytes,4,opt,name=devicePublicKey,proto3" json:"devicePublicKey,omitempty"`
	EncryptedDataKeyDoNotUse []byte                  `protobuf:"bytes,5,opt,name=encryptedDataKeyDoNotUse,proto3" json:"encryptedDataKeyDoNotUse,omitempty"`
	ClientVersion            string                  `protobuf:"bytes,6,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	Username                 string                  `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	IpAddress                string                  `protobuf:"bytes,8,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	ApproveRequestTime       int64                   `protobuf:"varint,9,opt,name=approveRequestTime,proto3" json:"approveRequestTime,omitempty"`
	EncryptedDataKeyPresent  bool                    `protobuf:"varint,10,opt,name=encryptedDataKeyPresent,proto3" json:"encryptedDataKeyPresent,omitempty"`
	GroupId                  int64                   `protobuf:"varint,11,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceInfo) GetEncryptedDeviceToken() []byte {
	if x != nil {
		return x.EncryptedDeviceToken
	}
	return nil
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetDeviceStatus() proto_auth.DeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return proto_auth.DeviceStatus(0)
}

func (x *DeviceInfo) GetDevicePublicKey() []byte {
	if x != nil {
		return x.DevicePublicKey
	}
	return nil
}

func (x *DeviceInfo) GetEncryptedDataKeyDoNotUse() []byte {
	if x != nil {
		return x.EncryptedDataKeyDoNotUse
	}
	return nil
}

func (x *DeviceInfo) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *DeviceInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DeviceInfo) GetApproveRequestTime() int64 {
	if x != nil {
		return x.ApproveRequestTime
	}
	return 0
}

func (x *DeviceInfo) GetEncryptedDataKeyPresent() bool {
	if x != nil {
		return x.EncryptedDataKeyPresent
	}
	return false
}

func (x *DeviceInfo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type KeysInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptionParams       []byte  `protobuf:"bytes,1,opt,name=encryptionParams,proto3" json:"encryptionParams,omitempty"`
	EncryptedDataKey       []byte  `protobuf:"bytes,2,opt,name=encryptedDataKey,proto3" json:"encryptedDataKey,omitempty"`
	DataKeyBackupDate      float64 `protobuf:"fixed64,3,opt,name=dataKeyBackupDate,proto3" json:"dataKeyBackupDate,omitempty"`
	UserAuthUid            []byte  `protobuf:"bytes,4,opt,name=userAuthUid,proto3" json:"userAuthUid,omitempty"`
	EncryptedPrivateKey    []byte  `protobuf:"bytes,5,opt,name=encryptedPrivateKey,proto3" json:"encryptedPrivateKey,omitempty"`
	EncryptedEccPrivateKey []byte  `protobuf:"bytes,6,opt,name=encryptedEccPrivateKey,proto3" json:"encryptedEccPrivateKey,omitempty"`
	EccPublicKey           []byte  `protobuf:"bytes,7,opt,name=eccPublicKey,proto3" json:"eccPublicKey,omitempty"`
}

func (x *KeysInfo) Reset() {
	*x = KeysInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysInfo) ProtoMessage() {}

func (x *KeysInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysInfo.ProtoReflect.Descriptor instead.
func (*KeysInfo) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{3}
}

func (x *KeysInfo) GetEncryptionParams() []byte {
	if x != nil {
		return x.EncryptionParams
	}
	return nil
}

func (x *KeysInfo) GetEncryptedDataKey() []byte {
	if x != nil {
		return x.EncryptedDataKey
	}
	return nil
}

func (x *KeysInfo) GetDataKeyBackupDate() float64 {
	if x != nil {
		return x.DataKeyBackupDate
	}
	return 0
}

func (x *KeysInfo) GetUserAuthUid() []byte {
	if x != nil {
		return x.UserAuthUid
	}
	return nil
}

func (x *KeysInfo) GetEncryptedPrivateKey() []byte {
	if x != nil {
		return x.EncryptedPrivateKey
	}
	return nil
}

func (x *KeysInfo) GetEncryptedEccPrivateKey() []byte {
	if x != nil {
		return x.EncryptedEccPrivateKey
	}
	return nil
}

func (x *KeysInfo) GetEccPublicKey() []byte {
	if x != nil {
		return x.EccPublicKey
	}
	return nil
}

type SyncLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryName string `protobuf:"bytes,1,opt,name=countryName,proto3" json:"countryName,omitempty"`
	SecondsAgo  int64  `protobuf:"varint,2,opt,name=secondsAgo,proto3" json:"secondsAgo,omitempty"`
	DeviceName  string `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	CountryCode string `protobuf:"bytes,4,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	DeviceUID   []byte `protobuf:"bytes,5,opt,name=deviceUID,proto3" json:"deviceUID,omitempty"`
	IpAddress   string `protobuf:"bytes,6,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
}

func (x *SyncLog) Reset() {
	*x = SyncLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncLog) ProtoMessage() {}

func (x *SyncLog) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncLog.ProtoReflect.Descriptor instead.
func (*SyncLog) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{4}
}

func (x *SyncLog) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *SyncLog) GetSecondsAgo() int64 {
	if x != nil {
		return x.SecondsAgo
	}
	return 0
}

func (x *SyncLog) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SyncLog) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SyncLog) GetDeviceUID() []byte {
	if x != nil {
		return x.DeviceUID
	}
	return nil
}

func (x *SyncLog) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionCode                     string  `protobuf:"bytes,1,opt,name=subscriptionCode,proto3" json:"subscriptionCode,omitempty"`
	ProductTypeId                        int32   `protobuf:"varint,2,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	ProductTypeName                      string  `protobuf:"bytes,3,opt,name=productTypeName,proto3" json:"productTypeName,omitempty"`
	ExpirationDate                       string  `protobuf:"bytes,4,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	SecondsUntilExpiration               int64   `protobuf:"varint,5,opt,name=secondsUntilExpiration,proto3" json:"secondsUntilExpiration,omitempty"`
	MaxDevices                           int32   `protobuf:"varint,6,opt,name=maxDevices,proto3" json:"maxDevices,omitempty"`
	FilePlanType                         int32   `protobuf:"varint,7,opt,name=filePlanType,proto3" json:"filePlanType,omitempty"`
	BytesUsed                            int64   `protobuf:"varint,8,opt,name=bytesUsed,proto3" json:"bytesUsed,omitempty"`
	BytesTotal                           int64   `protobuf:"varint,9,opt,name=bytesTotal,proto3" json:"bytesTotal,omitempty"`
	SecondsUntilStorageExpiration        int64   `protobuf:"varint,10,opt,name=secondsUntilStorageExpiration,proto3" json:"secondsUntilStorageExpiration,omitempty"`
	StorageExpirationDate                string  `protobuf:"bytes,11,opt,name=storageExpirationDate,proto3" json:"storageExpirationDate,omitempty"`
	HasAutoRenewableAppstoreSubscription bool    `protobuf:"varint,12,opt,name=hasAutoRenewableAppstoreSubscription,proto3" json:"hasAutoRenewableAppstoreSubscription,omitempty"`
	AccountType                          int32   `protobuf:"varint,13,opt,name=accountType,proto3" json:"accountType,omitempty"`
	UploadsRemaining                     int32   `protobuf:"varint,14,opt,name=uploadsRemaining,proto3" json:"uploadsRemaining,omitempty"`
	EnterpriseId                         int32   `protobuf:"varint,15,opt,name=enterpriseId,proto3" json:"enterpriseId,omitempty"`
	ChatEnabled                          bool    `protobuf:"varint,16,opt,name=chatEnabled,proto3" json:"chatEnabled,omitempty"`
	AuditAndReportingEnabled             bool    `protobuf:"varint,17,opt,name=auditAndReportingEnabled,proto3" json:"auditAndReportingEnabled,omitempty"`
	BreachWatchFeatureDisable            bool    `protobuf:"varint,18,opt,name=breachWatchFeatureDisable,proto3" json:"breachWatchFeatureDisable,omitempty"`
	AccountUid                           []byte  `protobuf:"bytes,19,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
	AllowPersonalLicense                 bool    `protobuf:"varint,20,opt,name=allowPersonalLicense,proto3" json:"allowPersonalLicense,omitempty"`
	LicensedBy                           string  `protobuf:"bytes,21,opt,name=licensedBy,proto3" json:"licensedBy,omitempty"`
	Email                                string  `protobuf:"bytes,22,opt,name=email,proto3" json:"email,omitempty"`
	BreachWatchEnabled                   bool    `protobuf:"varint,23,opt,name=breachWatchEnabled,proto3" json:"breachWatchEnabled,omitempty"`
	BreachWatchScanned                   bool    `protobuf:"varint,24,opt,name=breachWatchScanned,proto3" json:"breachWatchScanned,omitempty"`
	BreachWatchExpiration                int64   `protobuf:"varint,25,opt,name=breachWatchExpiration,proto3" json:"breachWatchExpiration,omitempty"`
	BreachWatchDateCreated               int64   `protobuf:"varint,26,opt,name=breachWatchDateCreated,proto3" json:"breachWatchDateCreated,omitempty"`
	Error                                *Result `protobuf:"bytes,27,opt,name=error,proto3" json:"error,omitempty"` //repeated AddOn addOns = 28;
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{5}
}

func (x *License) GetSubscriptionCode() string {
	if x != nil {
		return x.SubscriptionCode
	}
	return ""
}

func (x *License) GetProductTypeId() int32 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *License) GetProductTypeName() string {
	if x != nil {
		return x.ProductTypeName
	}
	return ""
}

func (x *License) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *License) GetSecondsUntilExpiration() int64 {
	if x != nil {
		return x.SecondsUntilExpiration
	}
	return 0
}

func (x *License) GetMaxDevices() int32 {
	if x != nil {
		return x.MaxDevices
	}
	return 0
}

func (x *License) GetFilePlanType() int32 {
	if x != nil {
		return x.FilePlanType
	}
	return 0
}

func (x *License) GetBytesUsed() int64 {
	if x != nil {
		return x.BytesUsed
	}
	return 0
}

func (x *License) GetBytesTotal() int64 {
	if x != nil {
		return x.BytesTotal
	}
	return 0
}

func (x *License) GetSecondsUntilStorageExpiration() int64 {
	if x != nil {
		return x.SecondsUntilStorageExpiration
	}
	return 0
}

func (x *License) GetStorageExpirationDate() string {
	if x != nil {
		return x.StorageExpirationDate
	}
	return ""
}

func (x *License) GetHasAutoRenewableAppstoreSubscription() bool {
	if x != nil {
		return x.HasAutoRenewableAppstoreSubscription
	}
	return false
}

func (x *License) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *License) GetUploadsRemaining() int32 {
	if x != nil {
		return x.UploadsRemaining
	}
	return 0
}

func (x *License) GetEnterpriseId() int32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *License) GetChatEnabled() bool {
	if x != nil {
		return x.ChatEnabled
	}
	return false
}

func (x *License) GetAuditAndReportingEnabled() bool {
	if x != nil {
		return x.AuditAndReportingEnabled
	}
	return false
}

func (x *License) GetBreachWatchFeatureDisable() bool {
	if x != nil {
		return x.BreachWatchFeatureDisable
	}
	return false
}

func (x *License) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

func (x *License) GetAllowPersonalLicense() bool {
	if x != nil {
		return x.AllowPersonalLicense
	}
	return false
}

func (x *License) GetLicensedBy() string {
	if x != nil {
		return x.LicensedBy
	}
	return ""
}

func (x *License) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *License) GetBreachWatchEnabled() bool {
	if x != nil {
		return x.BreachWatchEnabled
	}
	return false
}

func (x *License) GetBreachWatchScanned() bool {
	if x != nil {
		return x.BreachWatchScanned
	}
	return false
}

func (x *License) GetBreachWatchExpiration() int64 {
	if x != nil {
		return x.BreachWatchExpiration
	}
	return 0
}

func (x *License) GetBreachWatchDateCreated() int64 {
	if x != nil {
		return x.BreachWatchDateCreated
	}
	return 0
}

func (x *License) GetError() *Result {
	if x != nil {
		return x.Error
	}
	return nil
}

type AddOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseKeyId   int32  `protobuf:"varint,1,opt,name=licenseKeyId,proto3" json:"licenseKeyId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExpirationDate int64  `protobuf:"varint,3,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	CreatedDate    int64  `protobuf:"varint,4,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	IsTrial        bool   `protobuf:"varint,5,opt,name=isTrial,proto3" json:"isTrial,omitempty"`
	Enabled        bool   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Scanned        bool   `protobuf:"varint,7,opt,name=scanned,proto3" json:"scanned,omitempty"`
	FeatureDisable bool   `protobuf:"varint,8,opt,name=featureDisable,proto3" json:"featureDisable,omitempty"`
}

func (x *AddOn) Reset() {
	*x = AddOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOn) ProtoMessage() {}

func (x *AddOn) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOn.ProtoReflect.Descriptor instead.
func (*AddOn) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{6}
}

func (x *AddOn) GetLicenseKeyId() int32 {
	if x != nil {
		return x.LicenseKeyId
	}
	return 0
}

func (x *AddOn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOn) GetExpirationDate() int64 {
	if x != nil {
		return x.ExpirationDate
	}
	return 0
}

func (x *AddOn) GetCreatedDate() int64 {
	if x != nil {
		return x.CreatedDate
	}
	return 0
}

func (x *AddOn) GetIsTrial() bool {
	if x != nil {
		return x.IsTrial
	}
	return false
}

func (x *AddOn) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AddOn) GetScanned() bool {
	if x != nil {
		return x.Scanned
	}
	return false
}

func (x *AddOn) GetFeatureDisable() bool {
	if x != nil {
		return x.FeatureDisable
	}
	return false
}

type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Audit                      bool                      `protobuf:"varint,1,opt,name=audit,proto3" json:"audit,omitempty"`
	MustPerformAccountShareBy  int64                     `protobuf:"varint,2,opt,name=mustPerformAccountShareBy,proto3" json:"mustPerformAccountShareBy,omitempty"`
	ShareAccountTo             []*MissingAccountShareKey `protobuf:"bytes,3,rep,name=shareAccountTo,proto3" json:"shareAccountTo,omitempty"`
	Rules                      []*PasswordRule           `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
	PasswordRulesIntro         string                    `protobuf:"bytes,5,opt,name=passwordRulesIntro,proto3" json:"passwordRulesIntro,omitempty"`
	AutoBackupDays             int32                     `protobuf:"varint,6,opt,name=autoBackupDays,proto3" json:"autoBackupDays,omitempty"`
	Theme                      string                    `protobuf:"bytes,7,opt,name=theme,proto3" json:"theme,omitempty"`
	Channel                    string                    `protobuf:"bytes,8,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelValue               string                    `protobuf:"bytes,9,opt,name=channelValue,proto3" json:"channelValue,omitempty"`
	RsaConfigured              bool                      `protobuf:"varint,10,opt,name=rsaConfigured,proto3" json:"rsaConfigured,omitempty"`
	EmailVerified              bool                      `protobuf:"varint,11,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	MasterPasswordLastModified float64                   `protobuf:"fixed64,12,opt,name=masterPasswordLastModified,proto3" json:"masterPasswordLastModified,omitempty"`
	AccountFolderKey           []byte                    `protobuf:"bytes,13,opt,name=accountFolderKey,proto3" json:"accountFolderKey,omitempty"`
	SecurityKeys               []*SecurityKey            `protobuf:"bytes,14,rep,name=securityKeys,proto3" json:"securityKeys,omitempty"`
	KeyValues                  []*KeyValue               `protobuf:"bytes,15,rep,name=keyValues,proto3" json:"keyValues,omitempty"` ////// ?????
	SsoUser                    bool                      `protobuf:"varint,16,opt,name=ssoUser,proto3" json:"ssoUser,omitempty"`
	// could be in "keyValues"
	OnlineAccessOnly                  bool  `protobuf:"varint,17,opt,name=onlineAccessOnly,proto3" json:"onlineAccessOnly,omitempty"`
	MasterPasswordExpiry              int32 `protobuf:"varint,18,opt,name=masterPasswordExpiry,proto3" json:"masterPasswordExpiry,omitempty"`
	TwoFactorRequired                 bool  `protobuf:"varint,19,opt,name=twoFactorRequired,proto3" json:"twoFactorRequired,omitempty"`
	DisallowExport                    bool  `protobuf:"varint,20,opt,name=disallowExport,proto3" json:"disallowExport,omitempty"`
	RestrictFiles                     bool  `protobuf:"varint,21,opt,name=restrictFiles,proto3" json:"restrictFiles,omitempty"`
	RestrictAllSharing                bool  `protobuf:"varint,22,opt,name=restrictAllSharing,proto3" json:"restrictAllSharing,omitempty"`
	RestrictSharing                   bool  `protobuf:"varint,23,opt,name=restrictSharing,proto3" json:"restrictSharing,omitempty"`
	RestrictSharingIncomingAll        bool  `protobuf:"varint,24,opt,name=restrictSharingIncomingAll,proto3" json:"restrictSharingIncomingAll,omitempty"`               // json response field is "restrict_sharing_incoming_all"
	RestrictSharingIncomingEnterprise bool  `protobuf:"varint,25,opt,name=restrictSharingIncomingEnterprise,proto3" json:"restrictSharingIncomingEnterprise,omitempty"` // json response field is "restrict_sharing_incoming_enterprise"
	LogoutTimer                       int64 `protobuf:"varint,26,opt,name=logoutTimer,proto3" json:"logoutTimer,omitempty"`
	PersistentLogin                   bool  `protobuf:"varint,27,opt,name=persistentLogin,proto3" json:"persistentLogin,omitempty"`
	IpDisableAutoApprove              bool  `protobuf:"varint,28,opt,name=ipDisableAutoApprove,proto3" json:"ipDisableAutoApprove,omitempty"`
	ShareDataKeyWithEccPublicKey      bool  `protobuf:"varint,29,opt,name=shareDataKeyWithEccPublicKey,proto3" json:"shareDataKeyWithEccPublicKey,omitempty"`
	ShareDataKeyWithDevicePublicKey   bool  `protobuf:"varint,30,opt,name=shareDataKeyWithDevicePublicKey,proto3" json:"shareDataKeyWithDevicePublicKey,omitempty"`
	RecordTypesCounter                int32 `protobuf:"varint,31,opt,name=RecordTypesCounter,proto3" json:"RecordTypesCounter,omitempty"`
	RecordTypesEnterpriseCounter      int32 `protobuf:"varint,32,opt,name=RecordTypesEnterpriseCounter,proto3" json:"RecordTypesEnterpriseCounter,omitempty"`
	RecordTypesEnabled                bool  `protobuf:"varint,33,opt,name=recordTypesEnabled,proto3" json:"recordTypesEnabled,omitempty"`
	CanManageRecordTypes              bool  `protobuf:"varint,34,opt,name=canManageRecordTypes,proto3" json:"canManageRecordTypes,omitempty"`
	RecordTypesPAMCounter             int32 `protobuf:"varint,35,opt,name=recordTypesPAMCounter,proto3" json:"recordTypesPAMCounter,omitempty"`
	LogoutTimerMinutes                int32 `protobuf:"varint,36,opt,name=logoutTimerMinutes,proto3" json:"logoutTimerMinutes,omitempty"`
	SecurityKeysNoUserVerify          bool  `protobuf:"varint,37,opt,name=securityKeysNoUserVerify,proto3" json:"securityKeysNoUserVerify,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{7}
}

func (x *Settings) GetAudit() bool {
	if x != nil {
		return x.Audit
	}
	return false
}

func (x *Settings) GetMustPerformAccountShareBy() int64 {
	if x != nil {
		return x.MustPerformAccountShareBy
	}
	return 0
}

func (x *Settings) GetShareAccountTo() []*MissingAccountShareKey {
	if x != nil {
		return x.ShareAccountTo
	}
	return nil
}

func (x *Settings) GetRules() []*PasswordRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Settings) GetPasswordRulesIntro() string {
	if x != nil {
		return x.PasswordRulesIntro
	}
	return ""
}

func (x *Settings) GetAutoBackupDays() int32 {
	if x != nil {
		return x.AutoBackupDays
	}
	return 0
}

func (x *Settings) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *Settings) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Settings) GetChannelValue() string {
	if x != nil {
		return x.ChannelValue
	}
	return ""
}

func (x *Settings) GetRsaConfigured() bool {
	if x != nil {
		return x.RsaConfigured
	}
	return false
}

func (x *Settings) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *Settings) GetMasterPasswordLastModified() float64 {
	if x != nil {
		return x.MasterPasswordLastModified
	}
	return 0
}

func (x *Settings) GetAccountFolderKey() []byte {
	if x != nil {
		return x.AccountFolderKey
	}
	return nil
}

func (x *Settings) GetSecurityKeys() []*SecurityKey {
	if x != nil {
		return x.SecurityKeys
	}
	return nil
}

func (x *Settings) GetKeyValues() []*KeyValue {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

func (x *Settings) GetSsoUser() bool {
	if x != nil {
		return x.SsoUser
	}
	return false
}

func (x *Settings) GetOnlineAccessOnly() bool {
	if x != nil {
		return x.OnlineAccessOnly
	}
	return false
}

func (x *Settings) GetMasterPasswordExpiry() int32 {
	if x != nil {
		return x.MasterPasswordExpiry
	}
	return 0
}

func (x *Settings) GetTwoFactorRequired() bool {
	if x != nil {
		return x.TwoFactorRequired
	}
	return false
}

func (x *Settings) GetDisallowExport() bool {
	if x != nil {
		return x.DisallowExport
	}
	return false
}

func (x *Settings) GetRestrictFiles() bool {
	if x != nil {
		return x.RestrictFiles
	}
	return false
}

func (x *Settings) GetRestrictAllSharing() bool {
	if x != nil {
		return x.RestrictAllSharing
	}
	return false
}

func (x *Settings) GetRestrictSharing() bool {
	if x != nil {
		return x.RestrictSharing
	}
	return false
}

func (x *Settings) GetRestrictSharingIncomingAll() bool {
	if x != nil {
		return x.RestrictSharingIncomingAll
	}
	return false
}

func (x *Settings) GetRestrictSharingIncomingEnterprise() bool {
	if x != nil {
		return x.RestrictSharingIncomingEnterprise
	}
	return false
}

func (x *Settings) GetLogoutTimer() int64 {
	if x != nil {
		return x.LogoutTimer
	}
	return 0
}

func (x *Settings) GetPersistentLogin() bool {
	if x != nil {
		return x.PersistentLogin
	}
	return false
}

func (x *Settings) GetIpDisableAutoApprove() bool {
	if x != nil {
		return x.IpDisableAutoApprove
	}
	return false
}

func (x *Settings) GetShareDataKeyWithEccPublicKey() bool {
	if x != nil {
		return x.ShareDataKeyWithEccPublicKey
	}
	return false
}

func (x *Settings) GetShareDataKeyWithDevicePublicKey() bool {
	if x != nil {
		return x.ShareDataKeyWithDevicePublicKey
	}
	return false
}

func (x *Settings) GetRecordTypesCounter() int32 {
	if x != nil {
		return x.RecordTypesCounter
	}
	return 0
}

func (x *Settings) GetRecordTypesEnterpriseCounter() int32 {
	if x != nil {
		return x.RecordTypesEnterpriseCounter
	}
	return 0
}

func (x *Settings) GetRecordTypesEnabled() bool {
	if x != nil {
		return x.RecordTypesEnabled
	}
	return false
}

func (x *Settings) GetCanManageRecordTypes() bool {
	if x != nil {
		return x.CanManageRecordTypes
	}
	return false
}

func (x *Settings) GetRecordTypesPAMCounter() int32 {
	if x != nil {
		return x.RecordTypesPAMCounter
	}
	return 0
}

func (x *Settings) GetLogoutTimerMinutes() int32 {
	if x != nil {
		return x.LogoutTimerMinutes
	}
	return 0
}

func (x *Settings) GetSecurityKeysNoUserVerify() bool {
	if x != nil {
		return x.SecurityKeysNoUserVerify
	}
	return false
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{8}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type KeyValueBoolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValueBoolean) Reset() {
	*x = KeyValueBoolean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueBoolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueBoolean) ProtoMessage() {}

func (x *KeyValueBoolean) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueBoolean.ProtoReflect.Descriptor instead.
func (*KeyValueBoolean) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{9}
}

func (x *KeyValueBoolean) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValueBoolean) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type KeyValueLong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValueLong) Reset() {
	*x = KeyValueLong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueLong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueLong) ProtoMessage() {}

func (x *KeyValueLong) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueLong.ProtoReflect.Descriptor instead.
func (*KeyValueLong) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{10}
}

func (x *KeyValueLong) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValueLong) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode string `protobuf:"bytes,1,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result     string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{11}
}

func (x *Result) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Result) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type Enforcements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings  []*KeyValue        `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
	Booleans []*KeyValueBoolean `protobuf:"bytes,2,rep,name=booleans,proto3" json:"booleans,omitempty"`
	Longs    []*KeyValueLong    `protobuf:"bytes,3,rep,name=longs,proto3" json:"longs,omitempty"`
	Jsons    []*KeyValue        `protobuf:"bytes,4,rep,name=jsons,proto3" json:"jsons,omitempty"`
}

func (x *Enforcements) Reset() {
	*x = Enforcements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enforcements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enforcements) ProtoMessage() {}

func (x *Enforcements) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enforcements.ProtoReflect.Descriptor instead.
func (*Enforcements) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{12}
}

func (x *Enforcements) GetStrings() []*KeyValue {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *Enforcements) GetBooleans() []*KeyValueBoolean {
	if x != nil {
		return x.Booleans
	}
	return nil
}

func (x *Enforcements) GetLongs() []*KeyValueLong {
	if x != nil {
		return x.Longs
	}
	return nil
}

func (x *Enforcements) GetJsons() []*KeyValue {
	if x != nil {
		return x.Jsons
	}
	return nil
}

type MissingAccountShareKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId    int64  `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (x *MissingAccountShareKey) Reset() {
	*x = MissingAccountShareKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissingAccountShareKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissingAccountShareKey) ProtoMessage() {}

func (x *MissingAccountShareKey) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissingAccountShareKey.ProtoReflect.Descriptor instead.
func (*MissingAccountShareKey) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{13}
}

func (x *MissingAccountShareKey) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *MissingAccountShareKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type PasswordRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleType    string `protobuf:"bytes,1,opt,name=ruleType,proto3" json:"ruleType,omitempty"`
	Pattern     string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Match       bool   `protobuf:"varint,3,opt,name=match,proto3" json:"match,omitempty"`
	Minimum     int32  `protobuf:"varint,4,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Value       string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PasswordRule) Reset() {
	*x = PasswordRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRule) ProtoMessage() {}

func (x *PasswordRule) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRule.ProtoReflect.Descriptor instead.
func (*PasswordRule) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{14}
}

func (x *PasswordRule) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *PasswordRule) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *PasswordRule) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

func (x *PasswordRule) GetMinimum() int32 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *PasswordRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordRule) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SecurityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId           int64               `protobuf:"varint,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceName         string              `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DateAdded          int64               `protobuf:"varint,3,opt,name=dateAdded,proto3" json:"dateAdded,omitempty"`
	IsValid            bool                `protobuf:"varint,4,opt,name=isValid,proto3" json:"isValid,omitempty"`
	DeviceRegistration *DeviceRegistration `protobuf:"bytes,5,opt,name=deviceRegistration,proto3" json:"deviceRegistration,omitempty"`
}

func (x *SecurityKey) Reset() {
	*x = SecurityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityKey) ProtoMessage() {}

func (x *SecurityKey) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityKey.ProtoReflect.Descriptor instead.
func (*SecurityKey) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{15}
}

func (x *SecurityKey) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *SecurityKey) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SecurityKey) GetDateAdded() int64 {
	if x != nil {
		return x.DateAdded
	}
	return 0
}

func (x *SecurityKey) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *SecurityKey) GetDeviceRegistration() *DeviceRegistration {
	if x != nil {
		return x.DeviceRegistration
	}
	return nil
}

type DeviceRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyHandle       string `protobuf:"bytes,1,opt,name=keyHandle,proto3" json:"keyHandle,omitempty"`
	PublicKey       []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	AttestationCert string `protobuf:"bytes,3,opt,name=attestationCert,proto3" json:"attestationCert,omitempty"`
	Counter         int64  `protobuf:"varint,4,opt,name=counter,proto3" json:"counter,omitempty"`
	Compromised     bool   `protobuf:"varint,5,opt,name=compromised,proto3" json:"compromised,omitempty"`
}

func (x *DeviceRegistration) Reset() {
	*x = DeviceRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRegistration) ProtoMessage() {}

func (x *DeviceRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRegistration.ProtoReflect.Descriptor instead.
func (*DeviceRegistration) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceRegistration) GetKeyHandle() string {
	if x != nil {
		return x.KeyHandle
	}
	return ""
}

func (x *DeviceRegistration) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *DeviceRegistration) GetAttestationCert() string {
	if x != nil {
		return x.AttestationCert
	}
	return ""
}

func (x *DeviceRegistration) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *DeviceRegistration) GetCompromised() bool {
	if x != nil {
		return x.Compromised
	}
	return false
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Admin                 bool   `protobuf:"varint,1,opt,name=admin,proto3" json:"admin,omitempty"`
	GroupVerificationCode string `protobuf:"bytes,2,opt,name=groupVerificationCode,proto3" json:"groupVerificationCode,omitempty"`
	// repeated KeyValue groupSettings = 3; ///// ?
	Administrator *Administrator `protobuf:"bytes,4,opt,name=administrator,proto3" json:"administrator,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{17}
}

func (x *Group) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

func (x *Group) GetGroupVerificationCode() string {
	if x != nil {
		return x.GroupVerificationCode
	}
	return ""
}

func (x *Group) GetAdministrator() *Administrator {
	if x != nil {
		return x.Administrator
	}
	return nil
}

type Administrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName            string `protobuf:"bytes,1,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName             string `protobuf:"bytes,2,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Email                string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	CurrentNumberOfUsers int32  `protobuf:"varint,4,opt,name=currentNumberOfUsers,proto3" json:"currentNumberOfUsers,omitempty"`
	NumberOfUsers        int32  `protobuf:"varint,5,opt,name=numberOfUsers,proto3" json:"numberOfUsers,omitempty"`
	// int32 numberOfDevices = 6;
	SubscriptionCode string `protobuf:"bytes,7,opt,name=subscriptionCode,proto3" json:"subscriptionCode,omitempty"`
	ExpirationDate   string `protobuf:"bytes,8,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	PurchaseDate     string `protobuf:"bytes,9,opt,name=purchaseDate,proto3" json:"purchaseDate,omitempty"` //    string total = 10;
}

func (x *Administrator) Reset() {
	*x = Administrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AccountSummary_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Administrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Administrator) ProtoMessage() {}

func (x *Administrator) ProtoReflect() protoreflect.Message {
	mi := &file_AccountSummary_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Administrator.ProtoReflect.Descriptor instead.
func (*Administrator) Descriptor() ([]byte, []int) {
	return file_AccountSummary_proto_rawDescGZIP(), []int{18}
}

func (x *Administrator) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Administrator) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Administrator) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Administrator) GetCurrentNumberOfUsers() int32 {
	if x != nil {
		return x.CurrentNumberOfUsers
	}
	return 0
}

func (x *Administrator) GetNumberOfUsers() int32 {
	if x != nil {
		return x.NumberOfUsers
	}
	return 0
}

func (x *Administrator) GetSubscriptionCode() string {
	if x != nil {
		return x.SubscriptionCode
	}
	return ""
}

func (x *Administrator) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *Administrator) GetPurchaseDate() string {
	if x != nil {
		return x.PurchaseDate
	}
	return ""
}

var File_AccountSummary_proto protoreflect.FileDescriptor

var file_AccountSummary_proto_rawDesc = []byte{
	0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x10, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x06, 0x0a, 0x16, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33,
	0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x31, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x40, 0x0a, 0x0c, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x66, 0x69, 0x78, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x69, 0x78, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x6d, 0x69, 0x6e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x4e, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1f, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4e, 0x6f, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x22, 0xec, 0x03, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0xc0, 0x02, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x45, 0x63, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x45, 0x63, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x22, 0xc9, 0x01, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x67, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41,
	0x67, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xcb, 0x09, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x24, 0x68, 0x61, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x68, 0x61, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x18, 0x61, 0x75, 0x64, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x61, 0x75, 0x64, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x62, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x62,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x42, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xff,
	0x01, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xa5, 0x0e, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x75, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6d, 0x75, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42,
	0x79, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x44, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61,
	0x75, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x79, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x73, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x73, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x1a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x73, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x73, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11,
	0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x14,
	0x69, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x70, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x45, 0x63, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x4e, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x4e, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x0f,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x5a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0c,
	0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x05, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x12, 0x2e, 0x0a, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x73, 0x6f, 0x6e,
	0x73, 0x22, 0x4f, 0x0a, 0x16, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73,
	0x65, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb1, 0x02,
	0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x32, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x42, 0x2a, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_AccountSummary_proto_rawDescOnce sync.Once
	file_AccountSummary_proto_rawDescData = file_AccountSummary_proto_rawDesc
)

func file_AccountSummary_proto_rawDescGZIP() []byte {
	file_AccountSummary_proto_rawDescOnce.Do(func() {
		file_AccountSummary_proto_rawDescData = protoimpl.X.CompressGZIP(file_AccountSummary_proto_rawDescData)
	})
	return file_AccountSummary_proto_rawDescData
}

var file_AccountSummary_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_AccountSummary_proto_goTypes = []interface{}{
	(*AccountSummaryRequest)(nil),  // 0: AccountSummary.AccountSummaryRequest
	(*AccountSummaryElements)(nil), // 1: AccountSummary.AccountSummaryElements
	(*DeviceInfo)(nil),             // 2: AccountSummary.DeviceInfo
	(*KeysInfo)(nil),               // 3: AccountSummary.KeysInfo
	(*SyncLog)(nil),                // 4: AccountSummary.SyncLog
	(*License)(nil),                // 5: AccountSummary.License
	(*AddOn)(nil),                  // 6: AccountSummary.AddOn
	(*Settings)(nil),               // 7: AccountSummary.Settings
	(*KeyValue)(nil),               // 8: AccountSummary.KeyValue
	(*KeyValueBoolean)(nil),        // 9: AccountSummary.KeyValueBoolean
	(*KeyValueLong)(nil),           // 10: AccountSummary.KeyValueLong
	(*Result)(nil),                 // 11: AccountSummary.Result
	(*Enforcements)(nil),           // 12: AccountSummary.Enforcements
	(*MissingAccountShareKey)(nil), // 13: AccountSummary.MissingAccountShareKey
	(*PasswordRule)(nil),           // 14: AccountSummary.PasswordRule
	(*SecurityKey)(nil),            // 15: AccountSummary.SecurityKey
	(*DeviceRegistration)(nil),     // 16: AccountSummary.DeviceRegistration
	(*Group)(nil),                  // 17: AccountSummary.Group
	(*Administrator)(nil),          // 18: AccountSummary.Administrator
	(proto_auth.DeviceStatus)(0),   // 19: Authentication.DeviceStatus
}
var file_AccountSummary_proto_depIdxs = []int32{
	7,  // 0: AccountSummary.AccountSummaryElements.settings:type_name -> AccountSummary.Settings
	3,  // 1: AccountSummary.AccountSummaryElements.keysInfo:type_name -> AccountSummary.KeysInfo
	4,  // 2: AccountSummary.AccountSummaryElements.syncLogs:type_name -> AccountSummary.SyncLog
	5,  // 3: AccountSummary.AccountSummaryElements.license:type_name -> AccountSummary.License
	17, // 4: AccountSummary.AccountSummaryElements.group:type_name -> AccountSummary.Group
	12, // 5: AccountSummary.AccountSummaryElements.Enforcements:type_name -> AccountSummary.Enforcements
	8,  // 6: AccountSummary.AccountSummaryElements.Images:type_name -> AccountSummary.KeyValue
	5,  // 7: AccountSummary.AccountSummaryElements.personalLicense:type_name -> AccountSummary.License
	2,  // 8: AccountSummary.AccountSummaryElements.devices:type_name -> AccountSummary.DeviceInfo
	19, // 9: AccountSummary.DeviceInfo.deviceStatus:type_name -> Authentication.DeviceStatus
	11, // 10: AccountSummary.License.error:type_name -> AccountSummary.Result
	13, // 11: AccountSummary.Settings.shareAccountTo:type_name -> AccountSummary.MissingAccountShareKey
	14, // 12: AccountSummary.Settings.rules:type_name -> AccountSummary.PasswordRule
	15, // 13: AccountSummary.Settings.securityKeys:type_name -> AccountSummary.SecurityKey
	8,  // 14: AccountSummary.Settings.keyValues:type_name -> AccountSummary.KeyValue
	8,  // 15: AccountSummary.Enforcements.strings:type_name -> AccountSummary.KeyValue
	9,  // 16: AccountSummary.Enforcements.booleans:type_name -> AccountSummary.KeyValueBoolean
	10, // 17: AccountSummary.Enforcements.longs:type_name -> AccountSummary.KeyValueLong
	8,  // 18: AccountSummary.Enforcements.jsons:type_name -> AccountSummary.KeyValue
	16, // 19: AccountSummary.SecurityKey.deviceRegistration:type_name -> AccountSummary.DeviceRegistration
	18, // 20: AccountSummary.Group.administrator:type_name -> AccountSummary.Administrator
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_AccountSummary_proto_init() }
func file_AccountSummary_proto_init() {
	if File_AccountSummary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_AccountSummary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSummaryElements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueBoolean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueLong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enforcements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissingAccountShareKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AccountSummary_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Administrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AccountSummary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_AccountSummary_proto_goTypes,
		DependencyIndexes: file_AccountSummary_proto_depIdxs,
		MessageInfos:      file_AccountSummary_proto_msgTypes,
	}.Build()
	File_AccountSummary_proto = out.File
	file_AccountSummary_proto_rawDesc = nil
	file_AccountSummary_proto_goTypes = nil
	file_AccountSummary_proto_depIdxs = nil
}
