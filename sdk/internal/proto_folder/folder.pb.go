// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.1
// source: folder.proto

package proto_folder

import (
	proto_record "github.com/keeper-security/keeper-sdk-golang/sdk/internal/proto_record"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordType int32

const (
	RecordType_password RecordType = 0
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "password",
	}
	RecordType_value = map[string]int32{
		"password": 0,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_folder_proto_enumTypes[0].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_folder_proto_enumTypes[0]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{0}
}

type FolderType int32

const (
	FolderType_default_folder       FolderType = 0
	FolderType_user_folder          FolderType = 1
	FolderType_shared_folder        FolderType = 2
	FolderType_shared_folder_folder FolderType = 3
)

// Enum value maps for FolderType.
var (
	FolderType_name = map[int32]string{
		0: "default_folder",
		1: "user_folder",
		2: "shared_folder",
		3: "shared_folder_folder",
	}
	FolderType_value = map[string]int32{
		"default_folder":       0,
		"user_folder":          1,
		"shared_folder":        2,
		"shared_folder_folder": 3,
	}
)

func (x FolderType) Enum() *FolderType {
	p := new(FolderType)
	*p = x
	return p
}

func (x FolderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FolderType) Descriptor() protoreflect.EnumDescriptor {
	return file_folder_proto_enumTypes[1].Descriptor()
}

func (FolderType) Type() protoreflect.EnumType {
	return &file_folder_proto_enumTypes[1]
}

func (x FolderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FolderType.Descriptor instead.
func (FolderType) EnumDescriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{1}
}

type EncryptedKeyType int32

const (
	EncryptedKeyType_no_key                  EncryptedKeyType = 0
	EncryptedKeyType_encrypted_by_data_key   EncryptedKeyType = 1
	EncryptedKeyType_encrypted_by_public_key EncryptedKeyType = 2
)

// Enum value maps for EncryptedKeyType.
var (
	EncryptedKeyType_name = map[int32]string{
		0: "no_key",
		1: "encrypted_by_data_key",
		2: "encrypted_by_public_key",
	}
	EncryptedKeyType_value = map[string]int32{
		"no_key":                  0,
		"encrypted_by_data_key":   1,
		"encrypted_by_public_key": 2,
	}
)

func (x EncryptedKeyType) Enum() *EncryptedKeyType {
	p := new(EncryptedKeyType)
	*p = x
	return p
}

func (x EncryptedKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptedKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_folder_proto_enumTypes[2].Descriptor()
}

func (EncryptedKeyType) Type() protoreflect.EnumType {
	return &file_folder_proto_enumTypes[2]
}

func (x EncryptedKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptedKeyType.Descriptor instead.
func (EncryptedKeyType) EnumDescriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{2}
}

type SetBooleanValue int32

const (
	SetBooleanValue_BOOLEAN_NO_CHANGE SetBooleanValue = 0
	SetBooleanValue_BOOLEAN_TRUE      SetBooleanValue = 1
	SetBooleanValue_BOOLEAN_FALSE     SetBooleanValue = 2
)

// Enum value maps for SetBooleanValue.
var (
	SetBooleanValue_name = map[int32]string{
		0: "BOOLEAN_NO_CHANGE",
		1: "BOOLEAN_TRUE",
		2: "BOOLEAN_FALSE",
	}
	SetBooleanValue_value = map[string]int32{
		"BOOLEAN_NO_CHANGE": 0,
		"BOOLEAN_TRUE":      1,
		"BOOLEAN_FALSE":     2,
	}
)

func (x SetBooleanValue) Enum() *SetBooleanValue {
	p := new(SetBooleanValue)
	*p = x
	return p
}

func (x SetBooleanValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetBooleanValue) Descriptor() protoreflect.EnumDescriptor {
	return file_folder_proto_enumTypes[3].Descriptor()
}

func (SetBooleanValue) Type() protoreflect.EnumType {
	return &file_folder_proto_enumTypes[3]
}

func (x SetBooleanValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetBooleanValue.Descriptor instead.
func (SetBooleanValue) EnumDescriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{3}
}

type EncryptedDataKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedKey     []byte           `protobuf:"bytes,1,opt,name=encryptedKey,proto3" json:"encryptedKey,omitempty"`
	EncryptedKeyType EncryptedKeyType `protobuf:"varint,2,opt,name=encryptedKeyType,proto3,enum=Folder.EncryptedKeyType" json:"encryptedKeyType,omitempty"`
}

func (x *EncryptedDataKey) Reset() {
	*x = EncryptedDataKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedDataKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedDataKey) ProtoMessage() {}

func (x *EncryptedDataKey) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedDataKey.ProtoReflect.Descriptor instead.
func (*EncryptedDataKey) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{0}
}

func (x *EncryptedDataKey) GetEncryptedKey() []byte {
	if x != nil {
		return x.EncryptedKey
	}
	return nil
}

func (x *EncryptedDataKey) GetEncryptedKeyType() EncryptedKeyType {
	if x != nil {
		return x.EncryptedKeyType
	}
	return EncryptedKeyType_no_key
}

type SharedFolderRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid        []byte              `protobuf:"bytes,1,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	RecordUid        []byte              `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	UserId           int32               `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	EncryptedDataKey []*EncryptedDataKey `protobuf:"bytes,4,rep,name=encryptedDataKey,proto3" json:"encryptedDataKey,omitempty"` //in the order of encryptedRecordKey, encryptedSharedFolderKey and optional encryptedTeamKey
}

func (x *SharedFolderRecordData) Reset() {
	*x = SharedFolderRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderRecordData) ProtoMessage() {}

func (x *SharedFolderRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderRecordData.ProtoReflect.Descriptor instead.
func (*SharedFolderRecordData) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{1}
}

func (x *SharedFolderRecordData) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *SharedFolderRecordData) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *SharedFolderRecordData) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SharedFolderRecordData) GetEncryptedDataKey() []*EncryptedDataKey {
	if x != nil {
		return x.EncryptedDataKey
	}
	return nil
}

type SharedFolderRecordDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderRecordData []*SharedFolderRecordData `protobuf:"bytes,1,rep,name=sharedFolderRecordData,proto3" json:"sharedFolderRecordData,omitempty"`
}

func (x *SharedFolderRecordDataList) Reset() {
	*x = SharedFolderRecordDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderRecordDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderRecordDataList) ProtoMessage() {}

func (x *SharedFolderRecordDataList) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderRecordDataList.ProtoReflect.Descriptor instead.
func (*SharedFolderRecordDataList) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{2}
}

func (x *SharedFolderRecordDataList) GetSharedFolderRecordData() []*SharedFolderRecordData {
	if x != nil {
		return x.SharedFolderRecordData
	}
	return nil
}

type SharedFolderRecordFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid                []byte `protobuf:"bytes,1,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	RecordUid                []byte `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	EncryptedRecordFolderKey []byte `protobuf:"bytes,3,opt,name=encryptedRecordFolderKey,proto3" json:"encryptedRecordFolderKey,omitempty"`
}

func (x *SharedFolderRecordFix) Reset() {
	*x = SharedFolderRecordFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderRecordFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderRecordFix) ProtoMessage() {}

func (x *SharedFolderRecordFix) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderRecordFix.ProtoReflect.Descriptor instead.
func (*SharedFolderRecordFix) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{3}
}

func (x *SharedFolderRecordFix) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *SharedFolderRecordFix) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *SharedFolderRecordFix) GetEncryptedRecordFolderKey() []byte {
	if x != nil {
		return x.EncryptedRecordFolderKey
	}
	return nil
}

type SharedFolderRecordFixList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderRecordFix []*SharedFolderRecordFix `protobuf:"bytes,1,rep,name=sharedFolderRecordFix,proto3" json:"sharedFolderRecordFix,omitempty"`
}

func (x *SharedFolderRecordFixList) Reset() {
	*x = SharedFolderRecordFixList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderRecordFixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderRecordFixList) ProtoMessage() {}

func (x *SharedFolderRecordFixList) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderRecordFixList.ProtoReflect.Descriptor instead.
func (*SharedFolderRecordFixList) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{4}
}

func (x *SharedFolderRecordFixList) GetSharedFolderRecordFix() []*SharedFolderRecordFix {
	if x != nil {
		return x.SharedFolderRecordFix
	}
	return nil
}

type RecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid                []byte     `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	RecordType               RecordType `protobuf:"varint,2,opt,name=recordType,proto3,enum=Folder.RecordType" json:"recordType,omitempty"`
	RecordData               []byte     `protobuf:"bytes,3,opt,name=recordData,proto3" json:"recordData,omitempty"`
	EncryptedRecordKey       []byte     `protobuf:"bytes,4,opt,name=encryptedRecordKey,proto3" json:"encryptedRecordKey,omitempty"`
	FolderType               FolderType `protobuf:"varint,5,opt,name=folderType,proto3,enum=Folder.FolderType" json:"folderType,omitempty"`
	HowLongAgo               int64      `protobuf:"varint,6,opt,name=howLongAgo,proto3" json:"howLongAgo,omitempty"`
	FolderUid                []byte     `protobuf:"bytes,7,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	EncryptedRecordFolderKey []byte     `protobuf:"bytes,8,opt,name=encryptedRecordFolderKey,proto3" json:"encryptedRecordFolderKey,omitempty"`
	Extra                    []byte     `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	NonSharedData            []byte     `protobuf:"bytes,10,opt,name=nonSharedData,proto3" json:"nonSharedData,omitempty"`
	FileIds                  []int64    `protobuf:"varint,11,rep,packed,name=fileIds,proto3" json:"fileIds,omitempty"`
}

func (x *RecordRequest) Reset() {
	*x = RecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRequest) ProtoMessage() {}

func (x *RecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRequest.ProtoReflect.Descriptor instead.
func (*RecordRequest) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{5}
}

func (x *RecordRequest) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordRequest) GetRecordType() RecordType {
	if x != nil {
		return x.RecordType
	}
	return RecordType_password
}

func (x *RecordRequest) GetRecordData() []byte {
	if x != nil {
		return x.RecordData
	}
	return nil
}

func (x *RecordRequest) GetEncryptedRecordKey() []byte {
	if x != nil {
		return x.EncryptedRecordKey
	}
	return nil
}

func (x *RecordRequest) GetFolderType() FolderType {
	if x != nil {
		return x.FolderType
	}
	return FolderType_default_folder
}

func (x *RecordRequest) GetHowLongAgo() int64 {
	if x != nil {
		return x.HowLongAgo
	}
	return 0
}

func (x *RecordRequest) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *RecordRequest) GetEncryptedRecordFolderKey() []byte {
	if x != nil {
		return x.EncryptedRecordFolderKey
	}
	return nil
}

func (x *RecordRequest) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *RecordRequest) GetNonSharedData() []byte {
	if x != nil {
		return x.NonSharedData
	}
	return nil
}

func (x *RecordRequest) GetFileIds() []int64 {
	if x != nil {
		return x.FileIds
	}
	return nil
}

type RecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Revision  int64  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RecordResponse) Reset() {
	*x = RecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordResponse) ProtoMessage() {}

func (x *RecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordResponse.ProtoReflect.Descriptor instead.
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{6}
}

func (x *RecordResponse) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordResponse) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RecordResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SharedFolderFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedFolderName []byte `protobuf:"bytes,1,opt,name=encryptedFolderName,proto3" json:"encryptedFolderName,omitempty"`
	ManageUsers         bool   `protobuf:"varint,2,opt,name=manageUsers,proto3" json:"manageUsers,omitempty"`
	ManageRecords       bool   `protobuf:"varint,3,opt,name=manageRecords,proto3" json:"manageRecords,omitempty"`
	CanEdit             bool   `protobuf:"varint,4,opt,name=canEdit,proto3" json:"canEdit,omitempty"`
	CanShare            bool   `protobuf:"varint,5,opt,name=canShare,proto3" json:"canShare,omitempty"`
}

func (x *SharedFolderFields) Reset() {
	*x = SharedFolderFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderFields) ProtoMessage() {}

func (x *SharedFolderFields) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderFields.ProtoReflect.Descriptor instead.
func (*SharedFolderFields) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{7}
}

func (x *SharedFolderFields) GetEncryptedFolderName() []byte {
	if x != nil {
		return x.EncryptedFolderName
	}
	return nil
}

func (x *SharedFolderFields) GetManageUsers() bool {
	if x != nil {
		return x.ManageUsers
	}
	return false
}

func (x *SharedFolderFields) GetManageRecords() bool {
	if x != nil {
		return x.ManageRecords
	}
	return false
}

func (x *SharedFolderFields) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *SharedFolderFields) GetCanShare() bool {
	if x != nil {
		return x.CanShare
	}
	return false
}

type SharedFolderFolderFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
}

func (x *SharedFolderFolderFields) Reset() {
	*x = SharedFolderFolderFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderFolderFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderFolderFields) ProtoMessage() {}

func (x *SharedFolderFolderFields) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderFolderFields.ProtoReflect.Descriptor instead.
func (*SharedFolderFolderFields) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{8}
}

func (x *SharedFolderFolderFields) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

type FolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid                []byte                    `protobuf:"bytes,1,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	FolderType               FolderType                `protobuf:"varint,2,opt,name=folderType,proto3,enum=Folder.FolderType" json:"folderType,omitempty"`
	ParentFolderUid          []byte                    `protobuf:"bytes,3,opt,name=parentFolderUid,proto3" json:"parentFolderUid,omitempty"`
	FolderData               []byte                    `protobuf:"bytes,4,opt,name=folderData,proto3" json:"folderData,omitempty"`
	EncryptedFolderKey       []byte                    `protobuf:"bytes,5,opt,name=encryptedFolderKey,proto3" json:"encryptedFolderKey,omitempty"`
	SharedFolderFields       *SharedFolderFields       `protobuf:"bytes,6,opt,name=sharedFolderFields,proto3" json:"sharedFolderFields,omitempty"`
	SharedFolderFolderFields *SharedFolderFolderFields `protobuf:"bytes,7,opt,name=sharedFolderFolderFields,proto3" json:"sharedFolderFolderFields,omitempty"`
}

func (x *FolderRequest) Reset() {
	*x = FolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderRequest) ProtoMessage() {}

func (x *FolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderRequest.ProtoReflect.Descriptor instead.
func (*FolderRequest) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{9}
}

func (x *FolderRequest) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *FolderRequest) GetFolderType() FolderType {
	if x != nil {
		return x.FolderType
	}
	return FolderType_default_folder
}

func (x *FolderRequest) GetParentFolderUid() []byte {
	if x != nil {
		return x.ParentFolderUid
	}
	return nil
}

func (x *FolderRequest) GetFolderData() []byte {
	if x != nil {
		return x.FolderData
	}
	return nil
}

func (x *FolderRequest) GetEncryptedFolderKey() []byte {
	if x != nil {
		return x.EncryptedFolderKey
	}
	return nil
}

func (x *FolderRequest) GetSharedFolderFields() *SharedFolderFields {
	if x != nil {
		return x.SharedFolderFields
	}
	return nil
}

func (x *FolderRequest) GetSharedFolderFolderFields() *SharedFolderFolderFields {
	if x != nil {
		return x.SharedFolderFolderFields
	}
	return nil
}

type FolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid []byte `protobuf:"bytes,1,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	Revision  int64  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FolderResponse) Reset() {
	*x = FolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderResponse) ProtoMessage() {}

func (x *FolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderResponse.ProtoReflect.Descriptor instead.
func (*FolderResponse) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{10}
}

func (x *FolderResponse) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *FolderResponse) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *FolderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ImportFolderRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderRequest []*FolderRequest `protobuf:"bytes,1,rep,name=folderRequest,proto3" json:"folderRequest,omitempty"`
	RecordRequest []*RecordRequest `protobuf:"bytes,2,rep,name=recordRequest,proto3" json:"recordRequest,omitempty"`
}

func (x *ImportFolderRecordRequest) Reset() {
	*x = ImportFolderRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportFolderRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFolderRecordRequest) ProtoMessage() {}

func (x *ImportFolderRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFolderRecordRequest.ProtoReflect.Descriptor instead.
func (*ImportFolderRecordRequest) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{11}
}

func (x *ImportFolderRecordRequest) GetFolderRequest() []*FolderRequest {
	if x != nil {
		return x.FolderRequest
	}
	return nil
}

func (x *ImportFolderRecordRequest) GetRecordRequest() []*RecordRequest {
	if x != nil {
		return x.RecordRequest
	}
	return nil
}

type ImportFolderRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderResponse []*FolderResponse `protobuf:"bytes,1,rep,name=folderResponse,proto3" json:"folderResponse,omitempty"`
	RecordResponse []*RecordResponse `protobuf:"bytes,2,rep,name=recordResponse,proto3" json:"recordResponse,omitempty"`
}

func (x *ImportFolderRecordResponse) Reset() {
	*x = ImportFolderRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportFolderRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFolderRecordResponse) ProtoMessage() {}

func (x *ImportFolderRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFolderRecordResponse.ProtoReflect.Descriptor instead.
func (*ImportFolderRecordResponse) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{12}
}

func (x *ImportFolderRecordResponse) GetFolderResponse() []*FolderResponse {
	if x != nil {
		return x.FolderResponse
	}
	return nil
}

func (x *ImportFolderRecordResponse) GetRecordResponse() []*RecordResponse {
	if x != nil {
		return x.RecordResponse
	}
	return nil
}

type SharedFolderUpdateRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid          []byte          `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	SharedFolderUid    []byte          `protobuf:"bytes,2,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"` //Only used when adding a record, or updating the permission to a record
	TeamUid            []byte          `protobuf:"bytes,3,opt,name=teamUid,proto3" json:"teamUid,omitempty"`                 //Only used when adding a record, or updating the permission to a record
	CanEdit            SetBooleanValue `protobuf:"varint,4,opt,name=canEdit,proto3,enum=Folder.SetBooleanValue" json:"canEdit,omitempty"`
	CanShare           SetBooleanValue `protobuf:"varint,5,opt,name=canShare,proto3,enum=Folder.SetBooleanValue" json:"canShare,omitempty"`
	EncryptedRecordKey []byte          `protobuf:"bytes,6,opt,name=encryptedRecordKey,proto3" json:"encryptedRecordKey,omitempty"` // record key encrypted with the shared folder key
	Revision           int32           `protobuf:"varint,7,opt,name=revision,proto3" json:"revision,omitempty"`
	Expiration         int64           `protobuf:"zigzag64,8,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *SharedFolderUpdateRecord) Reset() {
	*x = SharedFolderUpdateRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateRecord) ProtoMessage() {}

func (x *SharedFolderUpdateRecord) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateRecord.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateRecord) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{13}
}

func (x *SharedFolderUpdateRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *SharedFolderUpdateRecord) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderUpdateRecord) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *SharedFolderUpdateRecord) GetCanEdit() SetBooleanValue {
	if x != nil {
		return x.CanEdit
	}
	return SetBooleanValue_BOOLEAN_NO_CHANGE
}

func (x *SharedFolderUpdateRecord) GetCanShare() SetBooleanValue {
	if x != nil {
		return x.CanShare
	}
	return SetBooleanValue_BOOLEAN_NO_CHANGE
}

func (x *SharedFolderUpdateRecord) GetEncryptedRecordKey() []byte {
	if x != nil {
		return x.EncryptedRecordKey
	}
	return nil
}

func (x *SharedFolderUpdateRecord) GetRevision() int32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *SharedFolderUpdateRecord) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

type SharedFolderUpdateUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username        string          `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	ManageUsers     SetBooleanValue `protobuf:"varint,2,opt,name=manageUsers,proto3,enum=Folder.SetBooleanValue" json:"manageUsers,omitempty"`
	ManageRecords   SetBooleanValue `protobuf:"varint,3,opt,name=manageRecords,proto3,enum=Folder.SetBooleanValue" json:"manageRecords,omitempty"`
	SharedFolderKey []byte          `protobuf:"bytes,4,opt,name=sharedFolderKey,proto3" json:"sharedFolderKey,omitempty"` // shared folder AES key encrypted with user's "key" (for the caller, the user's data key, for a different user, the user's public key)
	Expiration      int64           `protobuf:"zigzag64,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *SharedFolderUpdateUser) Reset() {
	*x = SharedFolderUpdateUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateUser) ProtoMessage() {}

func (x *SharedFolderUpdateUser) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateUser.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateUser) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{14}
}

func (x *SharedFolderUpdateUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SharedFolderUpdateUser) GetManageUsers() SetBooleanValue {
	if x != nil {
		return x.ManageUsers
	}
	return SetBooleanValue_BOOLEAN_NO_CHANGE
}

func (x *SharedFolderUpdateUser) GetManageRecords() SetBooleanValue {
	if x != nil {
		return x.ManageRecords
	}
	return SetBooleanValue_BOOLEAN_NO_CHANGE
}

func (x *SharedFolderUpdateUser) GetSharedFolderKey() []byte {
	if x != nil {
		return x.SharedFolderKey
	}
	return nil
}

func (x *SharedFolderUpdateUser) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

type SharedFolderUpdateTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid         []byte `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	ManageUsers     bool   `protobuf:"varint,2,opt,name=manageUsers,proto3" json:"manageUsers,omitempty"`
	ManageRecords   bool   `protobuf:"varint,3,opt,name=manageRecords,proto3" json:"manageRecords,omitempty"`
	SharedFolderKey []byte `protobuf:"bytes,4,opt,name=sharedFolderKey,proto3" json:"sharedFolderKey,omitempty"` // shared folder AES key encrypted with the team key retrieved from team_get_keys, for team member, which is team key; for a non member, the team's public key
	Expiration      int64  `protobuf:"zigzag64,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *SharedFolderUpdateTeam) Reset() {
	*x = SharedFolderUpdateTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateTeam) ProtoMessage() {}

func (x *SharedFolderUpdateTeam) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateTeam.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateTeam) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{15}
}

func (x *SharedFolderUpdateTeam) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *SharedFolderUpdateTeam) GetManageUsers() bool {
	if x != nil {
		return x.ManageUsers
	}
	return false
}

func (x *SharedFolderUpdateTeam) GetManageRecords() bool {
	if x != nil {
		return x.ManageRecords
	}
	return false
}

func (x *SharedFolderUpdateTeam) GetSharedFolderKey() []byte {
	if x != nil {
		return x.SharedFolderKey
	}
	return nil
}

func (x *SharedFolderUpdateTeam) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

type SharedFolderUpdateV3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUpdateOperationDontUse int32                       `protobuf:"varint,1,opt,name=sharedFolderUpdateOperation_dont_use,json=sharedFolderUpdateOperationDontUse,proto3" json:"sharedFolderUpdateOperation_dont_use,omitempty"` // obsolete field. we only use this request for shared folder update now.
	SharedFolderUid                    []byte                      `protobuf:"bytes,2,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`                                                                                    // required
	EncryptedSharedFolderName          []byte                      `protobuf:"bytes,3,opt,name=encryptedSharedFolderName,proto3" json:"encryptedSharedFolderName,omitempty"`                                                                //shared folder name encrypted with the shared folder key
	Revision                           int64                       `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"`                                                                                                 // clientSharedFolderRevision
	ForceUpdate                        bool                        `protobuf:"varint,5,opt,name=forceUpdate,proto3" json:"forceUpdate,omitempty"`                                                                                           // true if the requestor does not want the revision to be validated for out of sync; either force_update must be true, or revision is required
	FromTeamUid                        []byte                      `protobuf:"bytes,6,opt,name=fromTeamUid,proto3" json:"fromTeamUid,omitempty"`                                                                                            // for update/delete only; this is the team that gives you the permission to perform the operations you are trying to perform
	DefaultManageUsers                 SetBooleanValue             `protobuf:"varint,7,opt,name=defaultManageUsers,proto3,enum=Folder.SetBooleanValue" json:"defaultManageUsers,omitempty"`
	DefaultManageRecords               SetBooleanValue             `protobuf:"varint,8,opt,name=defaultManageRecords,proto3,enum=Folder.SetBooleanValue" json:"defaultManageRecords,omitempty"`
	DefaultCanEdit                     SetBooleanValue             `protobuf:"varint,9,opt,name=defaultCanEdit,proto3,enum=Folder.SetBooleanValue" json:"defaultCanEdit,omitempty"`
	DefaultCanShare                    SetBooleanValue             `protobuf:"varint,10,opt,name=defaultCanShare,proto3,enum=Folder.SetBooleanValue" json:"defaultCanShare,omitempty"`
	SharedFolderAddRecord              []*SharedFolderUpdateRecord `protobuf:"bytes,11,rep,name=sharedFolderAddRecord,proto3" json:"sharedFolderAddRecord,omitempty"`
	SharedFolderAddUser                []*SharedFolderUpdateUser   `protobuf:"bytes,12,rep,name=sharedFolderAddUser,proto3" json:"sharedFolderAddUser,omitempty"`
	SharedFolderAddTeam                []*SharedFolderUpdateTeam   `protobuf:"bytes,13,rep,name=sharedFolderAddTeam,proto3" json:"sharedFolderAddTeam,omitempty"`
	SharedFolderUpdateRecord           []*SharedFolderUpdateRecord `protobuf:"bytes,14,rep,name=sharedFolderUpdateRecord,proto3" json:"sharedFolderUpdateRecord,omitempty"`
	SharedFolderUpdateUser             []*SharedFolderUpdateUser   `protobuf:"bytes,15,rep,name=sharedFolderUpdateUser,proto3" json:"sharedFolderUpdateUser,omitempty"`
	SharedFolderUpdateTeam             []*SharedFolderUpdateTeam   `protobuf:"bytes,16,rep,name=sharedFolderUpdateTeam,proto3" json:"sharedFolderUpdateTeam,omitempty"`
	SharedFolderRemoveRecord           [][]byte                    `protobuf:"bytes,17,rep,name=sharedFolderRemoveRecord,proto3" json:"sharedFolderRemoveRecord,omitempty"`
	SharedFolderRemoveUser             []string                    `protobuf:"bytes,18,rep,name=sharedFolderRemoveUser,proto3" json:"sharedFolderRemoveUser,omitempty"`
	SharedFolderRemoveTeam             [][]byte                    `protobuf:"bytes,19,rep,name=sharedFolderRemoveTeam,proto3" json:"sharedFolderRemoveTeam,omitempty"`
	SharedFolderOwner                  string                      `protobuf:"bytes,20,opt,name=sharedFolderOwner,proto3" json:"sharedFolderOwner,omitempty"` // should have a sharing relationship w/ the calling user; ""=No Change(default); "delete"=unset
}

func (x *SharedFolderUpdateV3Request) Reset() {
	*x = SharedFolderUpdateV3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateV3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateV3Request) ProtoMessage() {}

func (x *SharedFolderUpdateV3Request) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateV3Request.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateV3Request) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{16}
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderUpdateOperationDontUse() int32 {
	if x != nil {
		return x.SharedFolderUpdateOperationDontUse
	}
	return 0
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetEncryptedSharedFolderName() []byte {
	if x != nil {
		return x.EncryptedSharedFolderName
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *SharedFolderUpdateV3Request) GetForceUpdate() bool {
	if x != nil {
		return x.ForceUpdate
	}
	return false
}

func (x *SharedFolderUpdateV3Request) GetFromTeamUid() []byte {
	if x != nil {
		return x.FromTeamUid
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetDefaultManageUsers() SetBooleanValue {
	if x != nil {
		return x.DefaultManageUsers
	}
	return SetBooleanValue_BOOLEAN_NO_CHANGE
}

func (x *SharedFolderUpdateV3Request) GetDefaultManageRecords() SetBooleanValue {
	if x != nil {
		return x.DefaultManageRecords
	}
	return SetBooleanValue_BOOLEAN_NO_CHANGE
}

func (x *SharedFolderUpdateV3Request) GetDefaultCanEdit() SetBooleanValue {
	if x != nil {
		return x.DefaultCanEdit
	}
	return SetBooleanValue_BOOLEAN_NO_CHANGE
}

func (x *SharedFolderUpdateV3Request) GetDefaultCanShare() SetBooleanValue {
	if x != nil {
		return x.DefaultCanShare
	}
	return SetBooleanValue_BOOLEAN_NO_CHANGE
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderAddRecord() []*SharedFolderUpdateRecord {
	if x != nil {
		return x.SharedFolderAddRecord
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderAddUser() []*SharedFolderUpdateUser {
	if x != nil {
		return x.SharedFolderAddUser
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderAddTeam() []*SharedFolderUpdateTeam {
	if x != nil {
		return x.SharedFolderAddTeam
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderUpdateRecord() []*SharedFolderUpdateRecord {
	if x != nil {
		return x.SharedFolderUpdateRecord
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderUpdateUser() []*SharedFolderUpdateUser {
	if x != nil {
		return x.SharedFolderUpdateUser
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderUpdateTeam() []*SharedFolderUpdateTeam {
	if x != nil {
		return x.SharedFolderUpdateTeam
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderRemoveRecord() [][]byte {
	if x != nil {
		return x.SharedFolderRemoveRecord
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderRemoveUser() []string {
	if x != nil {
		return x.SharedFolderRemoveUser
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderRemoveTeam() [][]byte {
	if x != nil {
		return x.SharedFolderRemoveTeam
	}
	return nil
}

func (x *SharedFolderUpdateV3Request) GetSharedFolderOwner() string {
	if x != nil {
		return x.SharedFolderOwner
	}
	return ""
}

type SharedFolderUpdateV3RequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFoldersUpdateV3 []*SharedFolderUpdateV3Request `protobuf:"bytes,1,rep,name=sharedFoldersUpdateV3,proto3" json:"sharedFoldersUpdateV3,omitempty"`
}

func (x *SharedFolderUpdateV3RequestV2) Reset() {
	*x = SharedFolderUpdateV3RequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateV3RequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateV3RequestV2) ProtoMessage() {}

func (x *SharedFolderUpdateV3RequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateV3RequestV2.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateV3RequestV2) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{17}
}

func (x *SharedFolderUpdateV3RequestV2) GetSharedFoldersUpdateV3() []*SharedFolderUpdateV3Request {
	if x != nil {
		return x.SharedFoldersUpdateV3
	}
	return nil
}

type SharedFolderUpdateRecordStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SharedFolderUpdateRecordStatus) Reset() {
	*x = SharedFolderUpdateRecordStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateRecordStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateRecordStatus) ProtoMessage() {}

func (x *SharedFolderUpdateRecordStatus) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateRecordStatus.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateRecordStatus) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{18}
}

func (x *SharedFolderUpdateRecordStatus) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *SharedFolderUpdateRecordStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SharedFolderUpdateUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Status   string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SharedFolderUpdateUserStatus) Reset() {
	*x = SharedFolderUpdateUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateUserStatus) ProtoMessage() {}

func (x *SharedFolderUpdateUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateUserStatus.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateUserStatus) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{19}
}

func (x *SharedFolderUpdateUserStatus) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SharedFolderUpdateUserStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SharedFolderUpdateTeamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid []byte `protobuf:"bytes,1,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SharedFolderUpdateTeamStatus) Reset() {
	*x = SharedFolderUpdateTeamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateTeamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateTeamStatus) ProtoMessage() {}

func (x *SharedFolderUpdateTeamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateTeamStatus.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateTeamStatus) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{20}
}

func (x *SharedFolderUpdateTeamStatus) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *SharedFolderUpdateTeamStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SharedFolderUpdateV3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision                       int64                             `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	SharedFolderAddRecordStatus    []*SharedFolderUpdateRecordStatus `protobuf:"bytes,2,rep,name=sharedFolderAddRecordStatus,proto3" json:"sharedFolderAddRecordStatus,omitempty"`
	SharedFolderAddUserStatus      []*SharedFolderUpdateUserStatus   `protobuf:"bytes,3,rep,name=sharedFolderAddUserStatus,proto3" json:"sharedFolderAddUserStatus,omitempty"`
	SharedFolderAddTeamStatus      []*SharedFolderUpdateTeamStatus   `protobuf:"bytes,4,rep,name=sharedFolderAddTeamStatus,proto3" json:"sharedFolderAddTeamStatus,omitempty"`
	SharedFolderUpdateRecordStatus []*SharedFolderUpdateRecordStatus `protobuf:"bytes,5,rep,name=sharedFolderUpdateRecordStatus,proto3" json:"sharedFolderUpdateRecordStatus,omitempty"`
	SharedFolderUpdateUserStatus   []*SharedFolderUpdateUserStatus   `protobuf:"bytes,6,rep,name=sharedFolderUpdateUserStatus,proto3" json:"sharedFolderUpdateUserStatus,omitempty"`
	SharedFolderUpdateTeamStatus   []*SharedFolderUpdateTeamStatus   `protobuf:"bytes,7,rep,name=sharedFolderUpdateTeamStatus,proto3" json:"sharedFolderUpdateTeamStatus,omitempty"`
	SharedFolderRemoveRecordStatus []*SharedFolderUpdateRecordStatus `protobuf:"bytes,8,rep,name=sharedFolderRemoveRecordStatus,proto3" json:"sharedFolderRemoveRecordStatus,omitempty"`
	SharedFolderRemoveUserStatus   []*SharedFolderUpdateUserStatus   `protobuf:"bytes,9,rep,name=sharedFolderRemoveUserStatus,proto3" json:"sharedFolderRemoveUserStatus,omitempty"`
	SharedFolderRemoveTeamStatus   []*SharedFolderUpdateTeamStatus   `protobuf:"bytes,10,rep,name=sharedFolderRemoveTeamStatus,proto3" json:"sharedFolderRemoveTeamStatus,omitempty"`
	SharedFolderUid                []byte                            `protobuf:"bytes,12,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	Status                         string                            `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SharedFolderUpdateV3Response) Reset() {
	*x = SharedFolderUpdateV3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateV3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateV3Response) ProtoMessage() {}

func (x *SharedFolderUpdateV3Response) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateV3Response.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateV3Response) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{21}
}

func (x *SharedFolderUpdateV3Response) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderAddRecordStatus() []*SharedFolderUpdateRecordStatus {
	if x != nil {
		return x.SharedFolderAddRecordStatus
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderAddUserStatus() []*SharedFolderUpdateUserStatus {
	if x != nil {
		return x.SharedFolderAddUserStatus
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderAddTeamStatus() []*SharedFolderUpdateTeamStatus {
	if x != nil {
		return x.SharedFolderAddTeamStatus
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderUpdateRecordStatus() []*SharedFolderUpdateRecordStatus {
	if x != nil {
		return x.SharedFolderUpdateRecordStatus
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderUpdateUserStatus() []*SharedFolderUpdateUserStatus {
	if x != nil {
		return x.SharedFolderUpdateUserStatus
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderUpdateTeamStatus() []*SharedFolderUpdateTeamStatus {
	if x != nil {
		return x.SharedFolderUpdateTeamStatus
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderRemoveRecordStatus() []*SharedFolderUpdateRecordStatus {
	if x != nil {
		return x.SharedFolderRemoveRecordStatus
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderRemoveUserStatus() []*SharedFolderUpdateUserStatus {
	if x != nil {
		return x.SharedFolderRemoveUserStatus
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderRemoveTeamStatus() []*SharedFolderUpdateTeamStatus {
	if x != nil {
		return x.SharedFolderRemoveTeamStatus
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderUpdateV3Response) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SharedFolderUpdateV3ResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFoldersUpdateV3Response []*SharedFolderUpdateV3Response `protobuf:"bytes,1,rep,name=sharedFoldersUpdateV3Response,proto3" json:"sharedFoldersUpdateV3Response,omitempty"`
}

func (x *SharedFolderUpdateV3ResponseV2) Reset() {
	*x = SharedFolderUpdateV3ResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderUpdateV3ResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderUpdateV3ResponseV2) ProtoMessage() {}

func (x *SharedFolderUpdateV3ResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderUpdateV3ResponseV2.ProtoReflect.Descriptor instead.
func (*SharedFolderUpdateV3ResponseV2) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{22}
}

func (x *SharedFolderUpdateV3ResponseV2) GetSharedFoldersUpdateV3Response() []*SharedFolderUpdateV3Response {
	if x != nil {
		return x.SharedFoldersUpdateV3Response
	}
	return nil
}

type GetDeletedSharedFoldersAndRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolders       []*DeletedSharedFolder       `protobuf:"bytes,1,rep,name=sharedFolders,proto3" json:"sharedFolders,omitempty"`
	SharedFolderRecords []*DeletedSharedFolderRecord `protobuf:"bytes,2,rep,name=sharedFolderRecords,proto3" json:"sharedFolderRecords,omitempty"`
	DeletedRecordData   []*DeletedRecordData         `protobuf:"bytes,3,rep,name=deletedRecordData,proto3" json:"deletedRecordData,omitempty"`
	Usernames           []*Username                  `protobuf:"bytes,4,rep,name=usernames,proto3" json:"usernames,omitempty"`
}

func (x *GetDeletedSharedFoldersAndRecordsResponse) Reset() {
	*x = GetDeletedSharedFoldersAndRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeletedSharedFoldersAndRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeletedSharedFoldersAndRecordsResponse) ProtoMessage() {}

func (x *GetDeletedSharedFoldersAndRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeletedSharedFoldersAndRecordsResponse.ProtoReflect.Descriptor instead.
func (*GetDeletedSharedFoldersAndRecordsResponse) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{23}
}

func (x *GetDeletedSharedFoldersAndRecordsResponse) GetSharedFolders() []*DeletedSharedFolder {
	if x != nil {
		return x.SharedFolders
	}
	return nil
}

func (x *GetDeletedSharedFoldersAndRecordsResponse) GetSharedFolderRecords() []*DeletedSharedFolderRecord {
	if x != nil {
		return x.SharedFolderRecords
	}
	return nil
}

func (x *GetDeletedSharedFoldersAndRecordsResponse) GetDeletedRecordData() []*DeletedRecordData {
	if x != nil {
		return x.DeletedRecordData
	}
	return nil
}

func (x *GetDeletedSharedFoldersAndRecordsResponse) GetUsernames() []*Username {
	if x != nil {
		return x.Usernames
	}
	return nil
}

type DeletedSharedFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte                     `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	FolderUid       []byte                     `protobuf:"bytes,2,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	ParentUid       []byte                     `protobuf:"bytes,3,opt,name=parentUid,proto3" json:"parentUid,omitempty"`
	SharedFolderKey []byte                     `protobuf:"bytes,4,opt,name=sharedFolderKey,proto3" json:"sharedFolderKey,omitempty"`
	FolderKeyType   proto_record.RecordKeyType `protobuf:"varint,5,opt,name=folderKeyType,proto3,enum=Records.RecordKeyType" json:"folderKeyType,omitempty"`
	Data            []byte                     `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	DateDeleted     int64                      `protobuf:"varint,7,opt,name=dateDeleted,proto3" json:"dateDeleted,omitempty"`
	Revision        int64                      `protobuf:"varint,8,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *DeletedSharedFolder) Reset() {
	*x = DeletedSharedFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedSharedFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedSharedFolder) ProtoMessage() {}

func (x *DeletedSharedFolder) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedSharedFolder.ProtoReflect.Descriptor instead.
func (*DeletedSharedFolder) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{24}
}

func (x *DeletedSharedFolder) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *DeletedSharedFolder) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *DeletedSharedFolder) GetParentUid() []byte {
	if x != nil {
		return x.ParentUid
	}
	return nil
}

func (x *DeletedSharedFolder) GetSharedFolderKey() []byte {
	if x != nil {
		return x.SharedFolderKey
	}
	return nil
}

func (x *DeletedSharedFolder) GetFolderKeyType() proto_record.RecordKeyType {
	if x != nil {
		return x.FolderKeyType
	}
	return proto_record.RecordKeyType(0)
}

func (x *DeletedSharedFolder) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeletedSharedFolder) GetDateDeleted() int64 {
	if x != nil {
		return x.DateDeleted
	}
	return 0
}

func (x *DeletedSharedFolder) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type DeletedSharedFolderRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid       []byte `protobuf:"bytes,1,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	RecordUid       []byte `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	SharedRecordKey []byte `protobuf:"bytes,3,opt,name=sharedRecordKey,proto3" json:"sharedRecordKey,omitempty"`
	DateDeleted     int64  `protobuf:"varint,4,opt,name=dateDeleted,proto3" json:"dateDeleted,omitempty"`
	Revision        int64  `protobuf:"varint,5,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *DeletedSharedFolderRecord) Reset() {
	*x = DeletedSharedFolderRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedSharedFolderRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedSharedFolderRecord) ProtoMessage() {}

func (x *DeletedSharedFolderRecord) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedSharedFolderRecord.ProtoReflect.Descriptor instead.
func (*DeletedSharedFolderRecord) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{25}
}

func (x *DeletedSharedFolderRecord) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *DeletedSharedFolderRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *DeletedSharedFolderRecord) GetSharedRecordKey() []byte {
	if x != nil {
		return x.SharedRecordKey
	}
	return nil
}

func (x *DeletedSharedFolderRecord) GetDateDeleted() int64 {
	if x != nil {
		return x.DateDeleted
	}
	return 0
}

func (x *DeletedSharedFolderRecord) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type DeletedRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid          []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	OwnerUid           []byte `protobuf:"bytes,2,opt,name=ownerUid,proto3" json:"ownerUid,omitempty"`
	Revision           int64  `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	ClientModifiedTime int64  `protobuf:"varint,4,opt,name=clientModifiedTime,proto3" json:"clientModifiedTime,omitempty"`
	Data               []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeletedRecordData) Reset() {
	*x = DeletedRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedRecordData) ProtoMessage() {}

func (x *DeletedRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedRecordData.ProtoReflect.Descriptor instead.
func (*DeletedRecordData) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{26}
}

func (x *DeletedRecordData) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *DeletedRecordData) GetOwnerUid() []byte {
	if x != nil {
		return x.OwnerUid
	}
	return nil
}

func (x *DeletedRecordData) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *DeletedRecordData) GetClientModifiedTime() int64 {
	if x != nil {
		return x.ClientModifiedTime
	}
	return 0
}

func (x *DeletedRecordData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Username struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountUid []byte `protobuf:"bytes,1,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
	Username   string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Username) Reset() {
	*x = Username{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Username) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Username) ProtoMessage() {}

func (x *Username) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Username.ProtoReflect.Descriptor instead.
func (*Username) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{27}
}

func (x *Username) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

func (x *Username) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type RestoreDeletedSharedFoldersAndRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Folders []*RestoreSharedObject `protobuf:"bytes,1,rep,name=folders,proto3" json:"folders,omitempty"`
	Records []*RestoreSharedObject `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RestoreDeletedSharedFoldersAndRecordsRequest) Reset() {
	*x = RestoreDeletedSharedFoldersAndRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreDeletedSharedFoldersAndRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreDeletedSharedFoldersAndRecordsRequest) ProtoMessage() {}

func (x *RestoreDeletedSharedFoldersAndRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreDeletedSharedFoldersAndRecordsRequest.ProtoReflect.Descriptor instead.
func (*RestoreDeletedSharedFoldersAndRecordsRequest) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{28}
}

func (x *RestoreDeletedSharedFoldersAndRecordsRequest) GetFolders() []*RestoreSharedObject {
	if x != nil {
		return x.Folders
	}
	return nil
}

func (x *RestoreDeletedSharedFoldersAndRecordsRequest) GetRecords() []*RestoreSharedObject {
	if x != nil {
		return x.Records
	}
	return nil
}

type RestoreSharedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid []byte `protobuf:"bytes,1,opt,name=folderUid,proto3" json:"folderUid,omitempty"`
	RecordUid []byte `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
}

func (x *RestoreSharedObject) Reset() {
	*x = RestoreSharedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_folder_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreSharedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreSharedObject) ProtoMessage() {}

func (x *RestoreSharedObject) ProtoReflect() protoreflect.Message {
	mi := &file_folder_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreSharedObject.ProtoReflect.Descriptor instead.
func (*RestoreSharedObject) Descriptor() ([]byte, []int) {
	return file_folder_proto_rawDescGZIP(), []int{29}
}

func (x *RestoreSharedObject) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *RestoreSharedObject) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

var File_folder_proto protoreflect.FileDescriptor

var file_folder_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x1a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7c, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x10,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x22, 0x74, 0x0a, 0x1a, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01,
	0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22,
	0x70, 0x0a, 0x19, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x15,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x46, 0x69, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x78, 0x52, 0x15, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69,
	0x78, 0x22, 0xb5, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x77,
	0x4c, 0x6f, 0x6e, 0x67, 0x41, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68,
	0x6f, 0x77, 0x4c, 0x6f, 0x6e, 0x67, 0x41, 0x67, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x62, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc4, 0x01,
	0x0a, 0x12, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x22, 0x44, 0x0a, 0x18, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x85, 0x03, 0x0a, 0x0d, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x22, 0x62, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9c,
	0x01, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0, 0x02,
	0x0a, 0x18, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x07,
	0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12,
	0x33, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf8, 0x01, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x16,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb5, 0x0a, 0x0a, 0x1b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x24, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x22, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6e,
	0x45, 0x64, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6e, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x50,
	0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x13, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x13, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x5c, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x56, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x16,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x1d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x59, 0x0a, 0x15, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x33, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x33, 0x22, 0x56, 0x0a, 0x1e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52,
	0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x50, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xb6, 0x08, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x33, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x68, 0x0a, 0x1b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x19, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x19, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x62, 0x0a, 0x19, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x19, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x6e, 0x0a, 0x1e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x1e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x68, 0x0a, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x68, 0x0a,
	0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6e, 0x0a, 0x1e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x68, 0x0a, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x68, 0x0a, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8c, 0x01,
	0x0a, 0x1e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32,
	0x12, 0x6a, 0x0a, 0x1d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1d, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x02, 0x0a,
	0x29, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a,
	0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01,
	0x0a, 0x2c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x2a,
	0x1a, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x00, 0x2a, 0x5e, 0x0a, 0x0a, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x10, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6b, 0x65, 0x79, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41,
	0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45,
	0x10, 0x02, 0x42, 0x22, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x06,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_folder_proto_rawDescOnce sync.Once
	file_folder_proto_rawDescData = file_folder_proto_rawDesc
)

func file_folder_proto_rawDescGZIP() []byte {
	file_folder_proto_rawDescOnce.Do(func() {
		file_folder_proto_rawDescData = protoimpl.X.CompressGZIP(file_folder_proto_rawDescData)
	})
	return file_folder_proto_rawDescData
}

var file_folder_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_folder_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_folder_proto_goTypes = []interface{}{
	(RecordType)(0),                                      // 0: Folder.RecordType
	(FolderType)(0),                                      // 1: Folder.FolderType
	(EncryptedKeyType)(0),                                // 2: Folder.EncryptedKeyType
	(SetBooleanValue)(0),                                 // 3: Folder.SetBooleanValue
	(*EncryptedDataKey)(nil),                             // 4: Folder.EncryptedDataKey
	(*SharedFolderRecordData)(nil),                       // 5: Folder.SharedFolderRecordData
	(*SharedFolderRecordDataList)(nil),                   // 6: Folder.SharedFolderRecordDataList
	(*SharedFolderRecordFix)(nil),                        // 7: Folder.SharedFolderRecordFix
	(*SharedFolderRecordFixList)(nil),                    // 8: Folder.SharedFolderRecordFixList
	(*RecordRequest)(nil),                                // 9: Folder.RecordRequest
	(*RecordResponse)(nil),                               // 10: Folder.RecordResponse
	(*SharedFolderFields)(nil),                           // 11: Folder.SharedFolderFields
	(*SharedFolderFolderFields)(nil),                     // 12: Folder.SharedFolderFolderFields
	(*FolderRequest)(nil),                                // 13: Folder.FolderRequest
	(*FolderResponse)(nil),                               // 14: Folder.FolderResponse
	(*ImportFolderRecordRequest)(nil),                    // 15: Folder.ImportFolderRecordRequest
	(*ImportFolderRecordResponse)(nil),                   // 16: Folder.ImportFolderRecordResponse
	(*SharedFolderUpdateRecord)(nil),                     // 17: Folder.SharedFolderUpdateRecord
	(*SharedFolderUpdateUser)(nil),                       // 18: Folder.SharedFolderUpdateUser
	(*SharedFolderUpdateTeam)(nil),                       // 19: Folder.SharedFolderUpdateTeam
	(*SharedFolderUpdateV3Request)(nil),                  // 20: Folder.SharedFolderUpdateV3Request
	(*SharedFolderUpdateV3RequestV2)(nil),                // 21: Folder.SharedFolderUpdateV3RequestV2
	(*SharedFolderUpdateRecordStatus)(nil),               // 22: Folder.SharedFolderUpdateRecordStatus
	(*SharedFolderUpdateUserStatus)(nil),                 // 23: Folder.SharedFolderUpdateUserStatus
	(*SharedFolderUpdateTeamStatus)(nil),                 // 24: Folder.SharedFolderUpdateTeamStatus
	(*SharedFolderUpdateV3Response)(nil),                 // 25: Folder.SharedFolderUpdateV3Response
	(*SharedFolderUpdateV3ResponseV2)(nil),               // 26: Folder.SharedFolderUpdateV3ResponseV2
	(*GetDeletedSharedFoldersAndRecordsResponse)(nil),    // 27: Folder.GetDeletedSharedFoldersAndRecordsResponse
	(*DeletedSharedFolder)(nil),                          // 28: Folder.DeletedSharedFolder
	(*DeletedSharedFolderRecord)(nil),                    // 29: Folder.DeletedSharedFolderRecord
	(*DeletedRecordData)(nil),                            // 30: Folder.DeletedRecordData
	(*Username)(nil),                                     // 31: Folder.Username
	(*RestoreDeletedSharedFoldersAndRecordsRequest)(nil), // 32: Folder.RestoreDeletedSharedFoldersAndRecordsRequest
	(*RestoreSharedObject)(nil),                          // 33: Folder.RestoreSharedObject
	(proto_record.RecordKeyType)(0),                      // 34: Records.RecordKeyType
}
var file_folder_proto_depIdxs = []int32{
	2,  // 0: Folder.EncryptedDataKey.encryptedKeyType:type_name -> Folder.EncryptedKeyType
	4,  // 1: Folder.SharedFolderRecordData.encryptedDataKey:type_name -> Folder.EncryptedDataKey
	5,  // 2: Folder.SharedFolderRecordDataList.sharedFolderRecordData:type_name -> Folder.SharedFolderRecordData
	7,  // 3: Folder.SharedFolderRecordFixList.sharedFolderRecordFix:type_name -> Folder.SharedFolderRecordFix
	0,  // 4: Folder.RecordRequest.recordType:type_name -> Folder.RecordType
	1,  // 5: Folder.RecordRequest.folderType:type_name -> Folder.FolderType
	1,  // 6: Folder.FolderRequest.folderType:type_name -> Folder.FolderType
	11, // 7: Folder.FolderRequest.sharedFolderFields:type_name -> Folder.SharedFolderFields
	12, // 8: Folder.FolderRequest.sharedFolderFolderFields:type_name -> Folder.SharedFolderFolderFields
	13, // 9: Folder.ImportFolderRecordRequest.folderRequest:type_name -> Folder.FolderRequest
	9,  // 10: Folder.ImportFolderRecordRequest.recordRequest:type_name -> Folder.RecordRequest
	14, // 11: Folder.ImportFolderRecordResponse.folderResponse:type_name -> Folder.FolderResponse
	10, // 12: Folder.ImportFolderRecordResponse.recordResponse:type_name -> Folder.RecordResponse
	3,  // 13: Folder.SharedFolderUpdateRecord.canEdit:type_name -> Folder.SetBooleanValue
	3,  // 14: Folder.SharedFolderUpdateRecord.canShare:type_name -> Folder.SetBooleanValue
	3,  // 15: Folder.SharedFolderUpdateUser.manageUsers:type_name -> Folder.SetBooleanValue
	3,  // 16: Folder.SharedFolderUpdateUser.manageRecords:type_name -> Folder.SetBooleanValue
	3,  // 17: Folder.SharedFolderUpdateV3Request.defaultManageUsers:type_name -> Folder.SetBooleanValue
	3,  // 18: Folder.SharedFolderUpdateV3Request.defaultManageRecords:type_name -> Folder.SetBooleanValue
	3,  // 19: Folder.SharedFolderUpdateV3Request.defaultCanEdit:type_name -> Folder.SetBooleanValue
	3,  // 20: Folder.SharedFolderUpdateV3Request.defaultCanShare:type_name -> Folder.SetBooleanValue
	17, // 21: Folder.SharedFolderUpdateV3Request.sharedFolderAddRecord:type_name -> Folder.SharedFolderUpdateRecord
	18, // 22: Folder.SharedFolderUpdateV3Request.sharedFolderAddUser:type_name -> Folder.SharedFolderUpdateUser
	19, // 23: Folder.SharedFolderUpdateV3Request.sharedFolderAddTeam:type_name -> Folder.SharedFolderUpdateTeam
	17, // 24: Folder.SharedFolderUpdateV3Request.sharedFolderUpdateRecord:type_name -> Folder.SharedFolderUpdateRecord
	18, // 25: Folder.SharedFolderUpdateV3Request.sharedFolderUpdateUser:type_name -> Folder.SharedFolderUpdateUser
	19, // 26: Folder.SharedFolderUpdateV3Request.sharedFolderUpdateTeam:type_name -> Folder.SharedFolderUpdateTeam
	20, // 27: Folder.SharedFolderUpdateV3RequestV2.sharedFoldersUpdateV3:type_name -> Folder.SharedFolderUpdateV3Request
	22, // 28: Folder.SharedFolderUpdateV3Response.sharedFolderAddRecordStatus:type_name -> Folder.SharedFolderUpdateRecordStatus
	23, // 29: Folder.SharedFolderUpdateV3Response.sharedFolderAddUserStatus:type_name -> Folder.SharedFolderUpdateUserStatus
	24, // 30: Folder.SharedFolderUpdateV3Response.sharedFolderAddTeamStatus:type_name -> Folder.SharedFolderUpdateTeamStatus
	22, // 31: Folder.SharedFolderUpdateV3Response.sharedFolderUpdateRecordStatus:type_name -> Folder.SharedFolderUpdateRecordStatus
	23, // 32: Folder.SharedFolderUpdateV3Response.sharedFolderUpdateUserStatus:type_name -> Folder.SharedFolderUpdateUserStatus
	24, // 33: Folder.SharedFolderUpdateV3Response.sharedFolderUpdateTeamStatus:type_name -> Folder.SharedFolderUpdateTeamStatus
	22, // 34: Folder.SharedFolderUpdateV3Response.sharedFolderRemoveRecordStatus:type_name -> Folder.SharedFolderUpdateRecordStatus
	23, // 35: Folder.SharedFolderUpdateV3Response.sharedFolderRemoveUserStatus:type_name -> Folder.SharedFolderUpdateUserStatus
	24, // 36: Folder.SharedFolderUpdateV3Response.sharedFolderRemoveTeamStatus:type_name -> Folder.SharedFolderUpdateTeamStatus
	25, // 37: Folder.SharedFolderUpdateV3ResponseV2.sharedFoldersUpdateV3Response:type_name -> Folder.SharedFolderUpdateV3Response
	28, // 38: Folder.GetDeletedSharedFoldersAndRecordsResponse.sharedFolders:type_name -> Folder.DeletedSharedFolder
	29, // 39: Folder.GetDeletedSharedFoldersAndRecordsResponse.sharedFolderRecords:type_name -> Folder.DeletedSharedFolderRecord
	30, // 40: Folder.GetDeletedSharedFoldersAndRecordsResponse.deletedRecordData:type_name -> Folder.DeletedRecordData
	31, // 41: Folder.GetDeletedSharedFoldersAndRecordsResponse.usernames:type_name -> Folder.Username
	34, // 42: Folder.DeletedSharedFolder.folderKeyType:type_name -> Records.RecordKeyType
	33, // 43: Folder.RestoreDeletedSharedFoldersAndRecordsRequest.folders:type_name -> Folder.RestoreSharedObject
	33, // 44: Folder.RestoreDeletedSharedFoldersAndRecordsRequest.records:type_name -> Folder.RestoreSharedObject
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_folder_proto_init() }
func file_folder_proto_init() {
	if File_folder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_folder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedDataKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderRecordDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderRecordFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderRecordFixList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderFolderFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportFolderRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportFolderRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateV3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateV3RequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateRecordStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateTeamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateV3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderUpdateV3ResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeletedSharedFoldersAndRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedSharedFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedSharedFolderRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Username); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreDeletedSharedFoldersAndRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_folder_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreSharedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_folder_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_folder_proto_goTypes,
		DependencyIndexes: file_folder_proto_depIdxs,
		EnumInfos:         file_folder_proto_enumTypes,
		MessageInfos:      file_folder_proto_msgTypes,
	}.Build()
	File_folder_proto = out.File
	file_folder_proto_rawDesc = nil
	file_folder_proto_goTypes = nil
	file_folder_proto_depIdxs = nil
}
