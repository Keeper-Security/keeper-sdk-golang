// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.1
// source: record.proto

package proto_record

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordTypeScope int32

const (
	RecordTypeScope_RT_STANDARD          RecordTypeScope = 0
	RecordTypeScope_RT_USER              RecordTypeScope = 1
	RecordTypeScope_RT_ENTERPRISE        RecordTypeScope = 2
	RecordTypeScope_RT_PAM               RecordTypeScope = 3
	RecordTypeScope_RT_PAM_CONFIGURATION RecordTypeScope = 4
)

// Enum value maps for RecordTypeScope.
var (
	RecordTypeScope_name = map[int32]string{
		0: "RT_STANDARD",
		1: "RT_USER",
		2: "RT_ENTERPRISE",
		3: "RT_PAM",
		4: "RT_PAM_CONFIGURATION",
	}
	RecordTypeScope_value = map[string]int32{
		"RT_STANDARD":          0,
		"RT_USER":              1,
		"RT_ENTERPRISE":        2,
		"RT_PAM":               3,
		"RT_PAM_CONFIGURATION": 4,
	}
)

func (x RecordTypeScope) Enum() *RecordTypeScope {
	p := new(RecordTypeScope)
	*p = x
	return p
}

func (x RecordTypeScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordTypeScope) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[0].Descriptor()
}

func (RecordTypeScope) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[0]
}

func (x RecordTypeScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordTypeScope.Descriptor instead.
func (RecordTypeScope) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

type RecordKeyType int32

const (
	RecordKeyType_NO_KEY                      RecordKeyType = 0
	RecordKeyType_ENCRYPTED_BY_DATA_KEY       RecordKeyType = 1
	RecordKeyType_ENCRYPTED_BY_PUBLIC_KEY     RecordKeyType = 2
	RecordKeyType_ENCRYPTED_BY_DATA_KEY_GCM   RecordKeyType = 3
	RecordKeyType_ENCRYPTED_BY_PUBLIC_KEY_ECC RecordKeyType = 4
	RecordKeyType_ENCRYPTED_BY_ROOT_KEY_CBC   RecordKeyType = 5
	RecordKeyType_ENCRYPTED_BY_ROOT_KEY_GCM   RecordKeyType = 6
)

// Enum value maps for RecordKeyType.
var (
	RecordKeyType_name = map[int32]string{
		0: "NO_KEY",
		1: "ENCRYPTED_BY_DATA_KEY",
		2: "ENCRYPTED_BY_PUBLIC_KEY",
		3: "ENCRYPTED_BY_DATA_KEY_GCM",
		4: "ENCRYPTED_BY_PUBLIC_KEY_ECC",
		5: "ENCRYPTED_BY_ROOT_KEY_CBC",
		6: "ENCRYPTED_BY_ROOT_KEY_GCM",
	}
	RecordKeyType_value = map[string]int32{
		"NO_KEY":                      0,
		"ENCRYPTED_BY_DATA_KEY":       1,
		"ENCRYPTED_BY_PUBLIC_KEY":     2,
		"ENCRYPTED_BY_DATA_KEY_GCM":   3,
		"ENCRYPTED_BY_PUBLIC_KEY_ECC": 4,
		"ENCRYPTED_BY_ROOT_KEY_CBC":   5,
		"ENCRYPTED_BY_ROOT_KEY_GCM":   6,
	}
)

func (x RecordKeyType) Enum() *RecordKeyType {
	p := new(RecordKeyType)
	*p = x
	return p
}

func (x RecordKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[1].Descriptor()
}

func (RecordKeyType) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[1]
}

func (x RecordKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordKeyType.Descriptor instead.
func (RecordKeyType) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

type RecordFolderType int32

const (
	RecordFolderType_user_folder          RecordFolderType = 0
	RecordFolderType_shared_folder        RecordFolderType = 1
	RecordFolderType_shared_folder_folder RecordFolderType = 2
)

// Enum value maps for RecordFolderType.
var (
	RecordFolderType_name = map[int32]string{
		0: "user_folder",
		1: "shared_folder",
		2: "shared_folder_folder",
	}
	RecordFolderType_value = map[string]int32{
		"user_folder":          0,
		"shared_folder":        1,
		"shared_folder_folder": 2,
	}
)

func (x RecordFolderType) Enum() *RecordFolderType {
	p := new(RecordFolderType)
	*p = x
	return p
}

func (x RecordFolderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordFolderType) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[2].Descriptor()
}

func (RecordFolderType) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[2]
}

func (x RecordFolderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordFolderType.Descriptor instead.
func (RecordFolderType) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

type RecordModifyResult int32

const (
	RecordModifyResult_RS_SUCCESS                       RecordModifyResult = 0
	RecordModifyResult_RS_OUT_OF_SYNC                   RecordModifyResult = 1
	RecordModifyResult_RS_ACCESS_DENIED                 RecordModifyResult = 2
	RecordModifyResult_RS_SHARE_DENIED                  RecordModifyResult = 3
	RecordModifyResult_RS_RECORD_EXISTS                 RecordModifyResult = 4
	RecordModifyResult_RS_OLD_RECORD_VERSION_TYPE       RecordModifyResult = 5
	RecordModifyResult_RS_NEW_RECORD_VERSION_TYPE       RecordModifyResult = 6
	RecordModifyResult_RS_FILES_NOT_MATCH               RecordModifyResult = 7
	RecordModifyResult_RS_RECORD_NOT_SHAREABLE          RecordModifyResult = 8
	RecordModifyResult_RS_ATTACHMENT_NOT_SHAREABLE      RecordModifyResult = 9
	RecordModifyResult_RS_FILE_LIMIT_REACHED            RecordModifyResult = 10
	RecordModifyResult_RS_SIZE_EXCEEDED_LIMIT           RecordModifyResult = 11
	RecordModifyResult_RS_ONLY_OWNER_CAN_MODIFY_SCRIPTS RecordModifyResult = 12
)

// Enum value maps for RecordModifyResult.
var (
	RecordModifyResult_name = map[int32]string{
		0:  "RS_SUCCESS",
		1:  "RS_OUT_OF_SYNC",
		2:  "RS_ACCESS_DENIED",
		3:  "RS_SHARE_DENIED",
		4:  "RS_RECORD_EXISTS",
		5:  "RS_OLD_RECORD_VERSION_TYPE",
		6:  "RS_NEW_RECORD_VERSION_TYPE",
		7:  "RS_FILES_NOT_MATCH",
		8:  "RS_RECORD_NOT_SHAREABLE",
		9:  "RS_ATTACHMENT_NOT_SHAREABLE",
		10: "RS_FILE_LIMIT_REACHED",
		11: "RS_SIZE_EXCEEDED_LIMIT",
		12: "RS_ONLY_OWNER_CAN_MODIFY_SCRIPTS",
	}
	RecordModifyResult_value = map[string]int32{
		"RS_SUCCESS":                       0,
		"RS_OUT_OF_SYNC":                   1,
		"RS_ACCESS_DENIED":                 2,
		"RS_SHARE_DENIED":                  3,
		"RS_RECORD_EXISTS":                 4,
		"RS_OLD_RECORD_VERSION_TYPE":       5,
		"RS_NEW_RECORD_VERSION_TYPE":       6,
		"RS_FILES_NOT_MATCH":               7,
		"RS_RECORD_NOT_SHAREABLE":          8,
		"RS_ATTACHMENT_NOT_SHAREABLE":      9,
		"RS_FILE_LIMIT_REACHED":            10,
		"RS_SIZE_EXCEEDED_LIMIT":           11,
		"RS_ONLY_OWNER_CAN_MODIFY_SCRIPTS": 12,
	}
)

func (x RecordModifyResult) Enum() *RecordModifyResult {
	p := new(RecordModifyResult)
	*p = x
	return p
}

func (x RecordModifyResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordModifyResult) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[3].Descriptor()
}

func (RecordModifyResult) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[3]
}

func (x RecordModifyResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordModifyResult.Descriptor instead.
func (RecordModifyResult) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{3}
}

type FileAddResult int32

const (
	FileAddResult_FA_SUCCESS FileAddResult = 0
	FileAddResult_FA_ERROR   FileAddResult = 1
)

// Enum value maps for FileAddResult.
var (
	FileAddResult_name = map[int32]string{
		0: "FA_SUCCESS",
		1: "FA_ERROR",
	}
	FileAddResult_value = map[string]int32{
		"FA_SUCCESS": 0,
		"FA_ERROR":   1,
	}
)

func (x FileAddResult) Enum() *FileAddResult {
	p := new(FileAddResult)
	*p = x
	return p
}

func (x FileAddResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileAddResult) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[4].Descriptor()
}

func (FileAddResult) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[4]
}

func (x FileAddResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileAddResult.Descriptor instead.
func (FileAddResult) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{4}
}

type FileGetResult int32

const (
	FileGetResult_FG_SUCCESS       FileGetResult = 0
	FileGetResult_FG_ERROR         FileGetResult = 1
	FileGetResult_FG_ACCESS_DENIED FileGetResult = 2
)

// Enum value maps for FileGetResult.
var (
	FileGetResult_name = map[int32]string{
		0: "FG_SUCCESS",
		1: "FG_ERROR",
		2: "FG_ACCESS_DENIED",
	}
	FileGetResult_value = map[string]int32{
		"FG_SUCCESS":       0,
		"FG_ERROR":         1,
		"FG_ACCESS_DENIED": 2,
	}
)

func (x FileGetResult) Enum() *FileGetResult {
	p := new(FileGetResult)
	*p = x
	return p
}

func (x FileGetResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileGetResult) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[5].Descriptor()
}

func (FileGetResult) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[5]
}

func (x FileGetResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileGetResult.Descriptor instead.
func (FileGetResult) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{5}
}

type RecordDetailsInclude int32

const (
	RecordDetailsInclude_DATA_PLUS_SHARE RecordDetailsInclude = 0
	RecordDetailsInclude_DATA_ONLY       RecordDetailsInclude = 1
	RecordDetailsInclude_SHARE_ONLY      RecordDetailsInclude = 2
)

// Enum value maps for RecordDetailsInclude.
var (
	RecordDetailsInclude_name = map[int32]string{
		0: "DATA_PLUS_SHARE",
		1: "DATA_ONLY",
		2: "SHARE_ONLY",
	}
	RecordDetailsInclude_value = map[string]int32{
		"DATA_PLUS_SHARE": 0,
		"DATA_ONLY":       1,
		"SHARE_ONLY":      2,
	}
)

func (x RecordDetailsInclude) Enum() *RecordDetailsInclude {
	p := new(RecordDetailsInclude)
	*p = x
	return p
}

func (x RecordDetailsInclude) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordDetailsInclude) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[6].Descriptor()
}

func (RecordDetailsInclude) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[6]
}

func (x RecordDetailsInclude) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordDetailsInclude.Descriptor instead.
func (RecordDetailsInclude) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{6}
}

type CheckShareAdminObjectType int32

const (
	CheckShareAdminObjectType_CHECK_SA_INVALID_TYPE CheckShareAdminObjectType = 0
	CheckShareAdminObjectType_CHECK_SA_ON_SF        CheckShareAdminObjectType = 1
	CheckShareAdminObjectType_CHECK_SA_ON_RECORD    CheckShareAdminObjectType = 2
)

// Enum value maps for CheckShareAdminObjectType.
var (
	CheckShareAdminObjectType_name = map[int32]string{
		0: "CHECK_SA_INVALID_TYPE",
		1: "CHECK_SA_ON_SF",
		2: "CHECK_SA_ON_RECORD",
	}
	CheckShareAdminObjectType_value = map[string]int32{
		"CHECK_SA_INVALID_TYPE": 0,
		"CHECK_SA_ON_SF":        1,
		"CHECK_SA_ON_RECORD":    2,
	}
)

func (x CheckShareAdminObjectType) Enum() *CheckShareAdminObjectType {
	p := new(CheckShareAdminObjectType)
	*p = x
	return p
}

func (x CheckShareAdminObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckShareAdminObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[7].Descriptor()
}

func (CheckShareAdminObjectType) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[7]
}

func (x CheckShareAdminObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckShareAdminObjectType.Descriptor instead.
func (CheckShareAdminObjectType) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{7}
}

type ShareStatus int32

const (
	ShareStatus_ACTIVE  ShareStatus = 0
	ShareStatus_BLOCK   ShareStatus = 1
	ShareStatus_INVITED ShareStatus = 2
)

// Enum value maps for ShareStatus.
var (
	ShareStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "BLOCK",
		2: "INVITED",
	}
	ShareStatus_value = map[string]int32{
		"ACTIVE":  0,
		"BLOCK":   1,
		"INVITED": 2,
	}
)

func (x ShareStatus) Enum() *ShareStatus {
	p := new(ShareStatus)
	*p = x
	return p
}

func (x ShareStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[8].Descriptor()
}

func (ShareStatus) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[8]
}

func (x ShareStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareStatus.Descriptor instead.
func (ShareStatus) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{8}
}

type RecordTransactionType int32

const (
	RecordTransactionType_RTT_GENERAL  RecordTransactionType = 0
	RecordTransactionType_RTT_ROTATION RecordTransactionType = 1
)

// Enum value maps for RecordTransactionType.
var (
	RecordTransactionType_name = map[int32]string{
		0: "RTT_GENERAL",
		1: "RTT_ROTATION",
	}
	RecordTransactionType_value = map[string]int32{
		"RTT_GENERAL":  0,
		"RTT_ROTATION": 1,
	}
)

func (x RecordTransactionType) Enum() *RecordTransactionType {
	p := new(RecordTransactionType)
	*p = x
	return p
}

func (x RecordTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[9].Descriptor()
}

func (RecordTransactionType) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[9]
}

func (x RecordTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordTransactionType.Descriptor instead.
func (RecordTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{9}
}

type RecordType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTypeId int32           `protobuf:"varint,1,opt,name=recordTypeId,proto3" json:"recordTypeId,omitempty"`
	Content      string          `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Scope        RecordTypeScope `protobuf:"varint,3,opt,name=scope,proto3,enum=Records.RecordTypeScope" json:"scope,omitempty"`
}

func (x *RecordType) Reset() {
	*x = RecordType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordType) ProtoMessage() {}

func (x *RecordType) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordType.ProtoReflect.Descriptor instead.
func (*RecordType) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

func (x *RecordType) GetRecordTypeId() int32 {
	if x != nil {
		return x.RecordTypeId
	}
	return 0
}

func (x *RecordType) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RecordType) GetScope() RecordTypeScope {
	if x != nil {
		return x.Scope
	}
	return RecordTypeScope_RT_STANDARD
}

type RecordTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Standard   bool `protobuf:"varint,1,opt,name=standard,proto3" json:"standard,omitempty"`
	User       bool `protobuf:"varint,2,opt,name=user,proto3" json:"user,omitempty"`
	Enterprise bool `protobuf:"varint,3,opt,name=enterprise,proto3" json:"enterprise,omitempty"`
	Pam        bool `protobuf:"varint,4,opt,name=pam,proto3" json:"pam,omitempty"`
}

func (x *RecordTypesRequest) Reset() {
	*x = RecordTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTypesRequest) ProtoMessage() {}

func (x *RecordTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTypesRequest.ProtoReflect.Descriptor instead.
func (*RecordTypesRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

func (x *RecordTypesRequest) GetStandard() bool {
	if x != nil {
		return x.Standard
	}
	return false
}

func (x *RecordTypesRequest) GetUser() bool {
	if x != nil {
		return x.User
	}
	return false
}

func (x *RecordTypesRequest) GetEnterprise() bool {
	if x != nil {
		return x.Enterprise
	}
	return false
}

func (x *RecordTypesRequest) GetPam() bool {
	if x != nil {
		return x.Pam
	}
	return false
}

type RecordTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTypes       []*RecordType `protobuf:"bytes,1,rep,name=recordTypes,proto3" json:"recordTypes,omitempty"`
	StandardCounter   int32         `protobuf:"varint,2,opt,name=standardCounter,proto3" json:"standardCounter,omitempty"`
	UserCounter       int32         `protobuf:"varint,3,opt,name=userCounter,proto3" json:"userCounter,omitempty"`
	EnterpriseCounter int32         `protobuf:"varint,4,opt,name=enterpriseCounter,proto3" json:"enterpriseCounter,omitempty"`
	PamCounter        int32         `protobuf:"varint,5,opt,name=pamCounter,proto3" json:"pamCounter,omitempty"`
}

func (x *RecordTypesResponse) Reset() {
	*x = RecordTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTypesResponse) ProtoMessage() {}

func (x *RecordTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTypesResponse.ProtoReflect.Descriptor instead.
func (*RecordTypesResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

func (x *RecordTypesResponse) GetRecordTypes() []*RecordType {
	if x != nil {
		return x.RecordTypes
	}
	return nil
}

func (x *RecordTypesResponse) GetStandardCounter() int32 {
	if x != nil {
		return x.StandardCounter
	}
	return 0
}

func (x *RecordTypesResponse) GetUserCounter() int32 {
	if x != nil {
		return x.UserCounter
	}
	return 0
}

func (x *RecordTypesResponse) GetEnterpriseCounter() int32 {
	if x != nil {
		return x.EnterpriseCounter
	}
	return 0
}

func (x *RecordTypesResponse) GetPamCounter() int32 {
	if x != nil {
		return x.PamCounter
	}
	return 0
}

type RecordTypeModifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTypeId int32 `protobuf:"varint,1,opt,name=recordTypeId,proto3" json:"recordTypeId,omitempty"` // record id of the added, updated or removed record
	Counter      int32 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`           // updated counter for the scope affected
}

func (x *RecordTypeModifyResponse) Reset() {
	*x = RecordTypeModifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordTypeModifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTypeModifyResponse) ProtoMessage() {}

func (x *RecordTypeModifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTypeModifyResponse.ProtoReflect.Descriptor instead.
func (*RecordTypeModifyResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{3}
}

func (x *RecordTypeModifyResponse) GetRecordTypeId() int32 {
	if x != nil {
		return x.RecordTypeId
	}
	return 0
}

func (x *RecordTypeModifyResponse) GetCounter() int32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type RecordsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUids [][]byte `protobuf:"bytes,1,rep,name=record_uids,json=recordUids,proto3" json:"record_uids,omitempty"`
	ClientTime int64    `protobuf:"varint,2,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
}

func (x *RecordsGetRequest) Reset() {
	*x = RecordsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsGetRequest) ProtoMessage() {}

func (x *RecordsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsGetRequest.ProtoReflect.Descriptor instead.
func (*RecordsGetRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{4}
}

func (x *RecordsGetRequest) GetRecordUids() [][]byte {
	if x != nil {
		return x.RecordUids
	}
	return nil
}

func (x *RecordsGetRequest) GetClientTime() int64 {
	if x != nil {
		return x.ClientTime
	}
	return 0
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid          []byte        `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	RecordKey          []byte        `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	RecordKeyType      RecordKeyType `protobuf:"varint,3,opt,name=record_key_type,json=recordKeyType,proto3,enum=Records.RecordKeyType" json:"record_key_type,omitempty"`
	Data               []byte        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Extra              []byte        `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	Version            int32         `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	ClientModifiedTime int64         `protobuf:"varint,7,opt,name=client_modified_time,json=clientModifiedTime,proto3" json:"client_modified_time,omitempty"`
	Revision           int64         `protobuf:"varint,8,opt,name=revision,proto3" json:"revision,omitempty"`
	FileIds            [][]byte      `protobuf:"bytes,9,rep,name=file_ids,json=fileIds,proto3" json:"file_ids,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{5}
}

func (x *Record) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *Record) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *Record) GetRecordKeyType() RecordKeyType {
	if x != nil {
		return x.RecordKeyType
	}
	return RecordKeyType_NO_KEY
}

func (x *Record) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Record) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Record) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Record) GetClientModifiedTime() int64 {
	if x != nil {
		return x.ClientModifiedTime
	}
	return 0
}

func (x *Record) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *Record) GetFileIds() [][]byte {
	if x != nil {
		return x.FileIds
	}
	return nil
}

type FolderRecordKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid []byte `protobuf:"bytes,1,opt,name=folder_uid,json=folderUid,proto3" json:"folder_uid,omitempty"`
	RecordUid []byte `protobuf:"bytes,2,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	RecordKey []byte `protobuf:"bytes,3,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
}

func (x *FolderRecordKey) Reset() {
	*x = FolderRecordKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderRecordKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderRecordKey) ProtoMessage() {}

func (x *FolderRecordKey) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderRecordKey.ProtoReflect.Descriptor instead.
func (*FolderRecordKey) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{6}
}

func (x *FolderRecordKey) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *FolderRecordKey) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *FolderRecordKey) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

type Folder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid     []byte        `protobuf:"bytes,1,opt,name=folder_uid,json=folderUid,proto3" json:"folder_uid,omitempty"`
	FolderKey     []byte        `protobuf:"bytes,2,opt,name=folder_key,json=folderKey,proto3" json:"folder_key,omitempty"`
	FolderKeyType RecordKeyType `protobuf:"varint,3,opt,name=folder_key_type,json=folderKeyType,proto3,enum=Records.RecordKeyType" json:"folder_key_type,omitempty"`
}

func (x *Folder) Reset() {
	*x = Folder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Folder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Folder) ProtoMessage() {}

func (x *Folder) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Folder.ProtoReflect.Descriptor instead.
func (*Folder) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{7}
}

func (x *Folder) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *Folder) GetFolderKey() []byte {
	if x != nil {
		return x.FolderKey
	}
	return nil
}

func (x *Folder) GetFolderKeyType() RecordKeyType {
	if x != nil {
		return x.FolderKeyType
	}
	return RecordKeyType_NO_KEY
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUid        []byte        `protobuf:"bytes,1,opt,name=team_uid,json=teamUid,proto3" json:"team_uid,omitempty"`
	TeamKey        []byte        `protobuf:"bytes,2,opt,name=team_key,json=teamKey,proto3" json:"team_key,omitempty"`
	TeamPrivateKey []byte        `protobuf:"bytes,3,opt,name=team_private_key,json=teamPrivateKey,proto3" json:"team_private_key,omitempty"`
	TeamKeyType    RecordKeyType `protobuf:"varint,4,opt,name=team_key_type,json=teamKeyType,proto3,enum=Records.RecordKeyType" json:"team_key_type,omitempty"`
	Folders        []*Folder     `protobuf:"bytes,5,rep,name=folders,proto3" json:"folders,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{8}
}

func (x *Team) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *Team) GetTeamKey() []byte {
	if x != nil {
		return x.TeamKey
	}
	return nil
}

func (x *Team) GetTeamPrivateKey() []byte {
	if x != nil {
		return x.TeamPrivateKey
	}
	return nil
}

func (x *Team) GetTeamKeyType() RecordKeyType {
	if x != nil {
		return x.TeamKeyType
	}
	return RecordKeyType_NO_KEY
}

func (x *Team) GetFolders() []*Folder {
	if x != nil {
		return x.Folders
	}
	return nil
}

type RecordsGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records          []*Record          `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	FolderRecordKeys []*FolderRecordKey `protobuf:"bytes,2,rep,name=folder_record_keys,json=folderRecordKeys,proto3" json:"folder_record_keys,omitempty"`
	Folders          []*Folder          `protobuf:"bytes,3,rep,name=folders,proto3" json:"folders,omitempty"`
	Teams            []*Team            `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *RecordsGetResponse) Reset() {
	*x = RecordsGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsGetResponse) ProtoMessage() {}

func (x *RecordsGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsGetResponse.ProtoReflect.Descriptor instead.
func (*RecordsGetResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{9}
}

func (x *RecordsGetResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RecordsGetResponse) GetFolderRecordKeys() []*FolderRecordKey {
	if x != nil {
		return x.FolderRecordKeys
	}
	return nil
}

func (x *RecordsGetResponse) GetFolders() []*Folder {
	if x != nil {
		return x.Folders
	}
	return nil
}

func (x *RecordsGetResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type RecordLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	RecordKey []byte `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
}

func (x *RecordLink) Reset() {
	*x = RecordLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordLink) ProtoMessage() {}

func (x *RecordLink) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordLink.ProtoReflect.Descriptor instead.
func (*RecordLink) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{10}
}

func (x *RecordLink) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordLink) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

type RecordAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RecordAudit) Reset() {
	*x = RecordAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordAudit) ProtoMessage() {}

func (x *RecordAudit) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordAudit.ProtoReflect.Descriptor instead.
func (*RecordAudit) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{11}
}

func (x *RecordAudit) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RecordAudit) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid          []byte           `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	RecordKey          []byte           `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	ClientModifiedTime int64            `protobuf:"varint,3,opt,name=client_modified_time,json=clientModifiedTime,proto3" json:"client_modified_time,omitempty"`
	Data               []byte           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	NonSharedData      []byte           `protobuf:"bytes,5,opt,name=non_shared_data,json=nonSharedData,proto3" json:"non_shared_data,omitempty"`
	FolderType         RecordFolderType `protobuf:"varint,6,opt,name=folder_type,json=folderType,proto3,enum=Records.RecordFolderType" json:"folder_type,omitempty"`
	FolderUid          []byte           `protobuf:"bytes,7,opt,name=folder_uid,json=folderUid,proto3" json:"folder_uid,omitempty"`
	FolderKey          []byte           `protobuf:"bytes,8,opt,name=folder_key,json=folderKey,proto3" json:"folder_key,omitempty"`
	RecordLinks        []*RecordLink    `protobuf:"bytes,9,rep,name=record_links,json=recordLinks,proto3" json:"record_links,omitempty"`
	Audit              *RecordAudit     `protobuf:"bytes,10,opt,name=audit,proto3" json:"audit,omitempty"`
}

func (x *RecordAdd) Reset() {
	*x = RecordAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordAdd) ProtoMessage() {}

func (x *RecordAdd) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordAdd.ProtoReflect.Descriptor instead.
func (*RecordAdd) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{12}
}

func (x *RecordAdd) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordAdd) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *RecordAdd) GetClientModifiedTime() int64 {
	if x != nil {
		return x.ClientModifiedTime
	}
	return 0
}

func (x *RecordAdd) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RecordAdd) GetNonSharedData() []byte {
	if x != nil {
		return x.NonSharedData
	}
	return nil
}

func (x *RecordAdd) GetFolderType() RecordFolderType {
	if x != nil {
		return x.FolderType
	}
	return RecordFolderType_user_folder
}

func (x *RecordAdd) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *RecordAdd) GetFolderKey() []byte {
	if x != nil {
		return x.FolderKey
	}
	return nil
}

func (x *RecordAdd) GetRecordLinks() []*RecordLink {
	if x != nil {
		return x.RecordLinks
	}
	return nil
}

func (x *RecordAdd) GetAudit() *RecordAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type RecordsAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records    []*RecordAdd `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	ClientTime int64        `protobuf:"varint,2,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
}

func (x *RecordsAddRequest) Reset() {
	*x = RecordsAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsAddRequest) ProtoMessage() {}

func (x *RecordsAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsAddRequest.ProtoReflect.Descriptor instead.
func (*RecordsAddRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{13}
}

func (x *RecordsAddRequest) GetRecords() []*RecordAdd {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RecordsAddRequest) GetClientTime() int64 {
	if x != nil {
		return x.ClientTime
	}
	return 0
}

type RecordUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid          []byte        `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	ClientModifiedTime int64         `protobuf:"varint,2,opt,name=client_modified_time,json=clientModifiedTime,proto3" json:"client_modified_time,omitempty"`
	Revision           int64         `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	Data               []byte        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	NonSharedData      []byte        `protobuf:"bytes,5,opt,name=non_shared_data,json=nonSharedData,proto3" json:"non_shared_data,omitempty"`
	RecordLinksAdd     []*RecordLink `protobuf:"bytes,6,rep,name=record_links_add,json=recordLinksAdd,proto3" json:"record_links_add,omitempty"`
	RecordLinksRemove  [][]byte      `protobuf:"bytes,7,rep,name=record_links_remove,json=recordLinksRemove,proto3" json:"record_links_remove,omitempty"`
	Audit              *RecordAudit  `protobuf:"bytes,8,opt,name=audit,proto3" json:"audit,omitempty"`
}

func (x *RecordUpdate) Reset() {
	*x = RecordUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordUpdate) ProtoMessage() {}

func (x *RecordUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordUpdate.ProtoReflect.Descriptor instead.
func (*RecordUpdate) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{14}
}

func (x *RecordUpdate) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordUpdate) GetClientModifiedTime() int64 {
	if x != nil {
		return x.ClientModifiedTime
	}
	return 0
}

func (x *RecordUpdate) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RecordUpdate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RecordUpdate) GetNonSharedData() []byte {
	if x != nil {
		return x.NonSharedData
	}
	return nil
}

func (x *RecordUpdate) GetRecordLinksAdd() []*RecordLink {
	if x != nil {
		return x.RecordLinksAdd
	}
	return nil
}

func (x *RecordUpdate) GetRecordLinksRemove() [][]byte {
	if x != nil {
		return x.RecordLinksRemove
	}
	return nil
}

func (x *RecordUpdate) GetAudit() *RecordAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type RecordsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records    []*RecordUpdate `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	ClientTime int64           `protobuf:"varint,2,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
}

func (x *RecordsUpdateRequest) Reset() {
	*x = RecordsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsUpdateRequest) ProtoMessage() {}

func (x *RecordsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsUpdateRequest.ProtoReflect.Descriptor instead.
func (*RecordsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{15}
}

func (x *RecordsUpdateRequest) GetRecords() []*RecordUpdate {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RecordsUpdateRequest) GetClientTime() int64 {
	if x != nil {
		return x.ClientTime
	}
	return 0
}

type RecordFileForConversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid   []byte `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	FileFileId  string `protobuf:"bytes,2,opt,name=file_file_id,json=fileFileId,proto3" json:"file_file_id,omitempty"`
	ThumbFileId string `protobuf:"bytes,3,opt,name=thumb_file_id,json=thumbFileId,proto3" json:"thumb_file_id,omitempty"`
	Data        []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RecordKey   []byte `protobuf:"bytes,5,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"` // record_ref
	LinkKey     []byte `protobuf:"bytes,6,opt,name=link_key,json=linkKey,proto3" json:"link_key,omitempty"`       // record_link
}

func (x *RecordFileForConversion) Reset() {
	*x = RecordFileForConversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFileForConversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFileForConversion) ProtoMessage() {}

func (x *RecordFileForConversion) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFileForConversion.ProtoReflect.Descriptor instead.
func (*RecordFileForConversion) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{16}
}

func (x *RecordFileForConversion) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordFileForConversion) GetFileFileId() string {
	if x != nil {
		return x.FileFileId
	}
	return ""
}

func (x *RecordFileForConversion) GetThumbFileId() string {
	if x != nil {
		return x.ThumbFileId
	}
	return ""
}

func (x *RecordFileForConversion) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RecordFileForConversion) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *RecordFileForConversion) GetLinkKey() []byte {
	if x != nil {
		return x.LinkKey
	}
	return nil
}

type RecordFolderForConversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid       []byte `protobuf:"bytes,1,opt,name=folder_uid,json=folderUid,proto3" json:"folder_uid,omitempty"`
	RecordFolderKey []byte `protobuf:"bytes,2,opt,name=record_folder_key,json=recordFolderKey,proto3" json:"record_folder_key,omitempty"` // GCM-encrypted shared folder key
}

func (x *RecordFolderForConversion) Reset() {
	*x = RecordFolderForConversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordFolderForConversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordFolderForConversion) ProtoMessage() {}

func (x *RecordFolderForConversion) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordFolderForConversion.ProtoReflect.Descriptor instead.
func (*RecordFolderForConversion) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{17}
}

func (x *RecordFolderForConversion) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *RecordFolderForConversion) GetRecordFolderKey() []byte {
	if x != nil {
		return x.RecordFolderKey
	}
	return nil
}

type RecordConvertToV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid          []byte                       `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	ClientModifiedTime int64                        `protobuf:"varint,2,opt,name=client_modified_time,json=clientModifiedTime,proto3" json:"client_modified_time,omitempty"`
	Revision           int64                        `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	Data               []byte                       `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	NonSharedData      []byte                       `protobuf:"bytes,5,opt,name=non_shared_data,json=nonSharedData,proto3" json:"non_shared_data,omitempty"`
	Audit              *RecordAudit                 `protobuf:"bytes,6,opt,name=audit,proto3" json:"audit,omitempty"`
	RecordFile         []*RecordFileForConversion   `protobuf:"bytes,7,rep,name=record_file,json=recordFile,proto3" json:"record_file,omitempty"`
	FolderKey          []*RecordFolderForConversion `protobuf:"bytes,8,rep,name=folder_key,json=folderKey,proto3" json:"folder_key,omitempty"`
}

func (x *RecordConvertToV3) Reset() {
	*x = RecordConvertToV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordConvertToV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordConvertToV3) ProtoMessage() {}

func (x *RecordConvertToV3) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordConvertToV3.ProtoReflect.Descriptor instead.
func (*RecordConvertToV3) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{18}
}

func (x *RecordConvertToV3) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordConvertToV3) GetClientModifiedTime() int64 {
	if x != nil {
		return x.ClientModifiedTime
	}
	return 0
}

func (x *RecordConvertToV3) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RecordConvertToV3) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RecordConvertToV3) GetNonSharedData() []byte {
	if x != nil {
		return x.NonSharedData
	}
	return nil
}

func (x *RecordConvertToV3) GetAudit() *RecordAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *RecordConvertToV3) GetRecordFile() []*RecordFileForConversion {
	if x != nil {
		return x.RecordFile
	}
	return nil
}

func (x *RecordConvertToV3) GetFolderKey() []*RecordFolderForConversion {
	if x != nil {
		return x.FolderKey
	}
	return nil
}

type RecordsConvertToV3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records    []*RecordConvertToV3 `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	ClientTime int64                `protobuf:"varint,2,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
}

func (x *RecordsConvertToV3Request) Reset() {
	*x = RecordsConvertToV3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsConvertToV3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsConvertToV3Request) ProtoMessage() {}

func (x *RecordsConvertToV3Request) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsConvertToV3Request.ProtoReflect.Descriptor instead.
func (*RecordsConvertToV3Request) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{19}
}

func (x *RecordsConvertToV3Request) GetRecords() []*RecordConvertToV3 {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RecordsConvertToV3Request) GetClientTime() int64 {
	if x != nil {
		return x.ClientTime
	}
	return 0
}

// to be used with records_remove and records_delete
type RecordsRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records [][]byte `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RecordsRemoveRequest) Reset() {
	*x = RecordsRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsRemoveRequest) ProtoMessage() {}

func (x *RecordsRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsRemoveRequest.ProtoReflect.Descriptor instead.
func (*RecordsRemoveRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{20}
}

func (x *RecordsRemoveRequest) GetRecords() [][]byte {
	if x != nil {
		return x.Records
	}
	return nil
}

type RecordRevert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid        []byte `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	RevertToRevision int64  `protobuf:"varint,2,opt,name=revert_to_revision,json=revertToRevision,proto3" json:"revert_to_revision,omitempty"`
}

func (x *RecordRevert) Reset() {
	*x = RecordRevert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordRevert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRevert) ProtoMessage() {}

func (x *RecordRevert) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRevert.ProtoReflect.Descriptor instead.
func (*RecordRevert) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{21}
}

func (x *RecordRevert) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordRevert) GetRevertToRevision() int64 {
	if x != nil {
		return x.RevertToRevision
	}
	return 0
}

type RecordsRevertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*RecordRevert `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RecordsRevertRequest) Reset() {
	*x = RecordsRevertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsRevertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsRevertRequest) ProtoMessage() {}

func (x *RecordsRevertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsRevertRequest.ProtoReflect.Descriptor instead.
func (*RecordsRevertRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{22}
}

func (x *RecordsRevertRequest) GetRecords() []*RecordRevert {
	if x != nil {
		return x.Records
	}
	return nil
}

type RecordLinkError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte             `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	Status    RecordModifyResult `protobuf:"varint,2,opt,name=status,proto3,enum=Records.RecordModifyResult" json:"status,omitempty"`
	Message   string             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RecordLinkError) Reset() {
	*x = RecordLinkError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordLinkError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordLinkError) ProtoMessage() {}

func (x *RecordLinkError) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordLinkError.ProtoReflect.Descriptor instead.
func (*RecordLinkError) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{23}
}

func (x *RecordLinkError) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordLinkError) GetStatus() RecordModifyResult {
	if x != nil {
		return x.Status
	}
	return RecordModifyResult_RS_SUCCESS
}

func (x *RecordLinkError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RecordModifyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid  []byte             `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	Status     RecordModifyResult `protobuf:"varint,2,opt,name=status,proto3,enum=Records.RecordModifyResult" json:"status,omitempty"`
	Message    string             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	LinkErrors []*RecordLinkError `protobuf:"bytes,4,rep,name=link_errors,json=linkErrors,proto3" json:"link_errors,omitempty"`
}

func (x *RecordModifyStatus) Reset() {
	*x = RecordModifyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordModifyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordModifyStatus) ProtoMessage() {}

func (x *RecordModifyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordModifyStatus.ProtoReflect.Descriptor instead.
func (*RecordModifyStatus) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{24}
}

func (x *RecordModifyStatus) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordModifyStatus) GetStatus() RecordModifyResult {
	if x != nil {
		return x.Status
	}
	return RecordModifyResult_RS_SUCCESS
}

func (x *RecordModifyStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RecordModifyStatus) GetLinkErrors() []*RecordLinkError {
	if x != nil {
		return x.LinkErrors
	}
	return nil
}

type RecordsModifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records  []*RecordModifyStatus `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Revision int64                 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *RecordsModifyResponse) Reset() {
	*x = RecordsModifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsModifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsModifyResponse) ProtoMessage() {}

func (x *RecordsModifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsModifyResponse.ProtoReflect.Descriptor instead.
func (*RecordsModifyResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{25}
}

func (x *RecordsModifyResponse) GetRecords() []*RecordModifyStatus {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RecordsModifyResponse) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type RecordAddAuditData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	Revision  int64  `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Version   int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RecordAddAuditData) Reset() {
	*x = RecordAddAuditData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordAddAuditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordAddAuditData) ProtoMessage() {}

func (x *RecordAddAuditData) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordAddAuditData.ProtoReflect.Descriptor instead.
func (*RecordAddAuditData) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{26}
}

func (x *RecordAddAuditData) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordAddAuditData) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RecordAddAuditData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RecordAddAuditData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type AddAuditDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*RecordAddAuditData `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *AddAuditDataRequest) Reset() {
	*x = AddAuditDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAuditDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAuditDataRequest) ProtoMessage() {}

func (x *AddAuditDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAuditDataRequest.ProtoReflect.Descriptor instead.
func (*AddAuditDataRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{27}
}

func (x *AddAuditDataRequest) GetRecords() []*RecordAddAuditData {
	if x != nil {
		return x.Records
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	RecordKey []byte `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	FileSize  int64  `protobuf:"varint,4,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	ThumbSize int32  `protobuf:"varint,5,opt,name=thumbSize,proto3" json:"thumbSize,omitempty"`
	IsScript  bool   `protobuf:"varint,6,opt,name=is_script,json=isScript,proto3" json:"is_script,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{28}
}

func (x *File) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *File) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *File) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *File) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *File) GetThumbSize() int32 {
	if x != nil {
		return x.ThumbSize
	}
	return 0
}

func (x *File) GetIsScript() bool {
	if x != nil {
		return x.IsScript
	}
	return false
}

type FilesAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files      []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	ClientTime int64   `protobuf:"varint,2,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
}

func (x *FilesAddRequest) Reset() {
	*x = FilesAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesAddRequest) ProtoMessage() {}

func (x *FilesAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesAddRequest.ProtoReflect.Descriptor instead.
func (*FilesAddRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{29}
}

func (x *FilesAddRequest) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FilesAddRequest) GetClientTime() int64 {
	if x != nil {
		return x.ClientTime
	}
	return 0
}

type FileAddStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid           []byte        `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	Status              FileAddResult `protobuf:"varint,2,opt,name=status,proto3,enum=Records.FileAddResult" json:"status,omitempty"`
	Url                 string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Parameters          string        `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	ThumbnailParameters string        `protobuf:"bytes,5,opt,name=thumbnail_parameters,json=thumbnailParameters,proto3" json:"thumbnail_parameters,omitempty"`
	SuccessStatusCode   int32         `protobuf:"varint,6,opt,name=success_status_code,json=successStatusCode,proto3" json:"success_status_code,omitempty"`
}

func (x *FileAddStatus) Reset() {
	*x = FileAddStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAddStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAddStatus) ProtoMessage() {}

func (x *FileAddStatus) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAddStatus.ProtoReflect.Descriptor instead.
func (*FileAddStatus) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{30}
}

func (x *FileAddStatus) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *FileAddStatus) GetStatus() FileAddResult {
	if x != nil {
		return x.Status
	}
	return FileAddResult_FA_SUCCESS
}

func (x *FileAddStatus) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileAddStatus) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

func (x *FileAddStatus) GetThumbnailParameters() string {
	if x != nil {
		return x.ThumbnailParameters
	}
	return ""
}

func (x *FileAddStatus) GetSuccessStatusCode() int32 {
	if x != nil {
		return x.SuccessStatusCode
	}
	return 0
}

type FilesAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files    []*FileAddStatus `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Revision int64            `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *FilesAddResponse) Reset() {
	*x = FilesAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesAddResponse) ProtoMessage() {}

func (x *FilesAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesAddResponse.ProtoReflect.Descriptor instead.
func (*FilesAddResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{31}
}

func (x *FilesAddResponse) GetFiles() []*FileAddStatus {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FilesAddResponse) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type FilesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUids                  [][]byte `protobuf:"bytes,1,rep,name=record_uids,json=recordUids,proto3" json:"record_uids,omitempty"`
	ForThumbnails               bool     `protobuf:"varint,2,opt,name=for_thumbnails,json=forThumbnails,proto3" json:"for_thumbnails,omitempty"`
	EmergencyAccessAccountOwner string   `protobuf:"bytes,3,opt,name=emergency_access_account_owner,json=emergencyAccessAccountOwner,proto3" json:"emergency_access_account_owner,omitempty"`
}

func (x *FilesGetRequest) Reset() {
	*x = FilesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesGetRequest) ProtoMessage() {}

func (x *FilesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesGetRequest.ProtoReflect.Descriptor instead.
func (*FilesGetRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{32}
}

func (x *FilesGetRequest) GetRecordUids() [][]byte {
	if x != nil {
		return x.RecordUids
	}
	return nil
}

func (x *FilesGetRequest) GetForThumbnails() bool {
	if x != nil {
		return x.ForThumbnails
	}
	return false
}

func (x *FilesGetRequest) GetEmergencyAccessAccountOwner() string {
	if x != nil {
		return x.EmergencyAccessAccountOwner
	}
	return ""
}

type FileGetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid         []byte        `protobuf:"bytes,1,opt,name=record_uid,json=recordUid,proto3" json:"record_uid,omitempty"`
	Status            FileGetResult `protobuf:"varint,2,opt,name=status,proto3,enum=Records.FileGetResult" json:"status,omitempty"`
	Url               string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	SuccessStatusCode int32         `protobuf:"varint,4,opt,name=success_status_code,json=successStatusCode,proto3" json:"success_status_code,omitempty"`
	FileKeyType       RecordKeyType `protobuf:"varint,5,opt,name=fileKeyType,proto3,enum=Records.RecordKeyType" json:"fileKeyType,omitempty"`
}

func (x *FileGetStatus) Reset() {
	*x = FileGetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileGetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileGetStatus) ProtoMessage() {}

func (x *FileGetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileGetStatus.ProtoReflect.Descriptor instead.
func (*FileGetStatus) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{33}
}

func (x *FileGetStatus) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *FileGetStatus) GetStatus() FileGetResult {
	if x != nil {
		return x.Status
	}
	return FileGetResult_FG_SUCCESS
}

func (x *FileGetStatus) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileGetStatus) GetSuccessStatusCode() int32 {
	if x != nil {
		return x.SuccessStatusCode
	}
	return 0
}

func (x *FileGetStatus) GetFileKeyType() RecordKeyType {
	if x != nil {
		return x.FileKeyType
	}
	return RecordKeyType_NO_KEY
}

type FilesGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*FileGetStatus `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *FilesGetResponse) Reset() {
	*x = FilesGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesGetResponse) ProtoMessage() {}

func (x *FilesGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesGetResponse.ProtoReflect.Descriptor instead.
func (*FilesGetResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{34}
}

func (x *FilesGetResponse) GetFiles() []*FileGetStatus {
	if x != nil {
		return x.Files
	}
	return nil
}

type ApplicationAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppUid             []byte `protobuf:"bytes,1,opt,name=app_uid,json=appUid,proto3" json:"app_uid,omitempty"`
	RecordKey          []byte `protobuf:"bytes,2,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
	ClientModifiedTime int64  `protobuf:"varint,3,opt,name=client_modified_time,json=clientModifiedTime,proto3" json:"client_modified_time,omitempty"`
	Data               []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApplicationAddRequest) Reset() {
	*x = ApplicationAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationAddRequest) ProtoMessage() {}

func (x *ApplicationAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationAddRequest.ProtoReflect.Descriptor instead.
func (*ApplicationAddRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{35}
}

func (x *ApplicationAddRequest) GetAppUid() []byte {
	if x != nil {
		return x.AppUid
	}
	return nil
}

func (x *ApplicationAddRequest) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *ApplicationAddRequest) GetClientModifiedTime() int64 {
	if x != nil {
		return x.ClientModifiedTime
	}
	return 0
}

func (x *ApplicationAddRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetRecordDataWithAccessInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientTime           int64                `protobuf:"varint,1,opt,name=clientTime,proto3" json:"clientTime,omitempty"`
	RecordUid            [][]byte             `protobuf:"bytes,2,rep,name=recordUid,proto3" json:"recordUid,omitempty"`
	RecordDetailsInclude RecordDetailsInclude `protobuf:"varint,3,opt,name=recordDetailsInclude,proto3,enum=Records.RecordDetailsInclude" json:"recordDetailsInclude,omitempty"`
}

func (x *GetRecordDataWithAccessInfoRequest) Reset() {
	*x = GetRecordDataWithAccessInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordDataWithAccessInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordDataWithAccessInfoRequest) ProtoMessage() {}

func (x *GetRecordDataWithAccessInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordDataWithAccessInfoRequest.ProtoReflect.Descriptor instead.
func (*GetRecordDataWithAccessInfoRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{36}
}

func (x *GetRecordDataWithAccessInfoRequest) GetClientTime() int64 {
	if x != nil {
		return x.ClientTime
	}
	return 0
}

func (x *GetRecordDataWithAccessInfoRequest) GetRecordUid() [][]byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *GetRecordDataWithAccessInfoRequest) GetRecordDetailsInclude() RecordDetailsInclude {
	if x != nil {
		return x.RecordDetailsInclude
	}
	return RecordDetailsInclude_DATA_PLUS_SHARE
}

type UserPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username         string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Owner            bool   `protobuf:"varint,2,opt,name=owner,proto3" json:"owner,omitempty"`
	ShareAdmin       bool   `protobuf:"varint,3,opt,name=shareAdmin,proto3" json:"shareAdmin,omitempty"`
	Sharable         bool   `protobuf:"varint,4,opt,name=sharable,proto3" json:"sharable,omitempty"`
	Editable         bool   `protobuf:"varint,5,opt,name=editable,proto3" json:"editable,omitempty"`
	AwaitingApproval bool   `protobuf:"varint,6,opt,name=awaitingApproval,proto3" json:"awaitingApproval,omitempty"` //flag indicating if the record is awaiting approval from the user referenced in username
	Expiration       int64  `protobuf:"varint,7,opt,name=expiration,proto3" json:"expiration,omitempty"`             //time limit for the record directly shared to a user
	AccountUid       []byte `protobuf:"bytes,8,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
}

func (x *UserPermission) Reset() {
	*x = UserPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermission) ProtoMessage() {}

func (x *UserPermission) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermission.ProtoReflect.Descriptor instead.
func (*UserPermission) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{37}
}

func (x *UserPermission) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPermission) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *UserPermission) GetShareAdmin() bool {
	if x != nil {
		return x.ShareAdmin
	}
	return false
}

func (x *UserPermission) GetSharable() bool {
	if x != nil {
		return x.Sharable
	}
	return false
}

func (x *UserPermission) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *UserPermission) GetAwaitingApproval() bool {
	if x != nil {
		return x.AwaitingApproval
	}
	return false
}

func (x *UserPermission) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *UserPermission) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

type SharedFolderPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolderUid []byte `protobuf:"bytes,1,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	Resharable      bool   `protobuf:"varint,2,opt,name=resharable,proto3" json:"resharable,omitempty"`
	Editable        bool   `protobuf:"varint,3,opt,name=editable,proto3" json:"editable,omitempty"`
	Revision        int64  `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"`
	Expiration      int64  `protobuf:"varint,5,opt,name=expiration,proto3" json:"expiration,omitempty"` //time limit for the record in a shared folder
}

func (x *SharedFolderPermission) Reset() {
	*x = SharedFolderPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedFolderPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedFolderPermission) ProtoMessage() {}

func (x *SharedFolderPermission) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedFolderPermission.ProtoReflect.Descriptor instead.
func (*SharedFolderPermission) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{38}
}

func (x *SharedFolderPermission) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedFolderPermission) GetResharable() bool {
	if x != nil {
		return x.Resharable
	}
	return false
}

func (x *SharedFolderPermission) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *SharedFolderPermission) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *SharedFolderPermission) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

type RecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision            int64         `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Version             int32         `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"` //ORIGINAL(1), SUPPORTS_EXTRA(2), RECORD_TYPES(3), FILE(4), APP(5);
	Shared              bool          `protobuf:"varint,3,opt,name=shared,proto3" json:"shared,omitempty"`
	EncryptedRecordData string        `protobuf:"bytes,4,opt,name=encryptedRecordData,proto3" json:"encryptedRecordData,omitempty"` //record data encrypted with the record key
	EncryptedExtraData  string        `protobuf:"bytes,5,opt,name=encryptedExtraData,proto3" json:"encryptedExtraData,omitempty"`   //extra record data encrypted with the record key
	ClientModifiedTime  int64         `protobuf:"varint,6,opt,name=clientModifiedTime,proto3" json:"clientModifiedTime,omitempty"`
	NonSharedData       string        `protobuf:"bytes,7,opt,name=nonSharedData,proto3" json:"nonSharedData,omitempty"`
	LinkedRecordData    []*RecordData `protobuf:"bytes,8,rep,name=linkedRecordData,proto3" json:"linkedRecordData,omitempty"` // a list of child record data
	FileId              [][]byte      `protobuf:"bytes,9,rep,name=fileId,proto3" json:"fileId,omitempty"`                     // json object of unencrypted data (currently contains only file ids)
	FileSize            int64         `protobuf:"varint,10,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	ThumbnailSize       int64         `protobuf:"varint,11,opt,name=thumbnailSize,proto3" json:"thumbnailSize,omitempty"`
	RecordKeyType       RecordKeyType `protobuf:"varint,12,opt,name=recordKeyType,proto3,enum=Records.RecordKeyType" json:"recordKeyType,omitempty"`
	RecordKey           []byte        `protobuf:"bytes,13,opt,name=recordKey,proto3" json:"recordKey,omitempty"`
	RecordUid           []byte        `protobuf:"bytes,14,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
}

func (x *RecordData) Reset() {
	*x = RecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordData) ProtoMessage() {}

func (x *RecordData) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordData.ProtoReflect.Descriptor instead.
func (*RecordData) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{39}
}

func (x *RecordData) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RecordData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RecordData) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

func (x *RecordData) GetEncryptedRecordData() string {
	if x != nil {
		return x.EncryptedRecordData
	}
	return ""
}

func (x *RecordData) GetEncryptedExtraData() string {
	if x != nil {
		return x.EncryptedExtraData
	}
	return ""
}

func (x *RecordData) GetClientModifiedTime() int64 {
	if x != nil {
		return x.ClientModifiedTime
	}
	return 0
}

func (x *RecordData) GetNonSharedData() string {
	if x != nil {
		return x.NonSharedData
	}
	return ""
}

func (x *RecordData) GetLinkedRecordData() []*RecordData {
	if x != nil {
		return x.LinkedRecordData
	}
	return nil
}

func (x *RecordData) GetFileId() [][]byte {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *RecordData) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *RecordData) GetThumbnailSize() int64 {
	if x != nil {
		return x.ThumbnailSize
	}
	return 0
}

func (x *RecordData) GetRecordKeyType() RecordKeyType {
	if x != nil {
		return x.RecordKeyType
	}
	return RecordKeyType_NO_KEY
}

func (x *RecordData) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *RecordData) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

type RecordDataWithAccessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid              []byte                    `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	RecordData             *RecordData               `protobuf:"bytes,2,opt,name=recordData,proto3" json:"recordData,omitempty"`
	UserPermission         []*UserPermission         `protobuf:"bytes,3,rep,name=userPermission,proto3" json:"userPermission,omitempty"`
	SharedFolderPermission []*SharedFolderPermission `protobuf:"bytes,4,rep,name=sharedFolderPermission,proto3" json:"sharedFolderPermission,omitempty"`
}

func (x *RecordDataWithAccessInfo) Reset() {
	*x = RecordDataWithAccessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataWithAccessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataWithAccessInfo) ProtoMessage() {}

func (x *RecordDataWithAccessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataWithAccessInfo.ProtoReflect.Descriptor instead.
func (*RecordDataWithAccessInfo) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{40}
}

func (x *RecordDataWithAccessInfo) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordDataWithAccessInfo) GetRecordData() *RecordData {
	if x != nil {
		return x.RecordData
	}
	return nil
}

func (x *RecordDataWithAccessInfo) GetUserPermission() []*UserPermission {
	if x != nil {
		return x.UserPermission
	}
	return nil
}

func (x *RecordDataWithAccessInfo) GetSharedFolderPermission() []*SharedFolderPermission {
	if x != nil {
		return x.SharedFolderPermission
	}
	return nil
}

type GetRecordDataWithAccessInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordDataWithAccessInfo []*RecordDataWithAccessInfo `protobuf:"bytes,1,rep,name=recordDataWithAccessInfo,proto3" json:"recordDataWithAccessInfo,omitempty"`
	NoPermissionRecordUid    [][]byte                    `protobuf:"bytes,2,rep,name=noPermissionRecordUid,proto3" json:"noPermissionRecordUid,omitempty"`
}

func (x *GetRecordDataWithAccessInfoResponse) Reset() {
	*x = GetRecordDataWithAccessInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordDataWithAccessInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordDataWithAccessInfoResponse) ProtoMessage() {}

func (x *GetRecordDataWithAccessInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordDataWithAccessInfoResponse.ProtoReflect.Descriptor instead.
func (*GetRecordDataWithAccessInfoResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{41}
}

func (x *GetRecordDataWithAccessInfoResponse) GetRecordDataWithAccessInfo() []*RecordDataWithAccessInfo {
	if x != nil {
		return x.RecordDataWithAccessInfo
	}
	return nil
}

func (x *GetRecordDataWithAccessInfoResponse) GetNoPermissionRecordUid() [][]byte {
	if x != nil {
		return x.NoPermissionRecordUid
	}
	return nil
}

type IsObjectShareAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        []byte                    `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	IsAdmin    bool                      `protobuf:"varint,2,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"` // used in the response
	ObjectType CheckShareAdminObjectType `protobuf:"varint,3,opt,name=objectType,proto3,enum=Records.CheckShareAdminObjectType" json:"objectType,omitempty"`
}

func (x *IsObjectShareAdmin) Reset() {
	*x = IsObjectShareAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsObjectShareAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsObjectShareAdmin) ProtoMessage() {}

func (x *IsObjectShareAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsObjectShareAdmin.ProtoReflect.Descriptor instead.
func (*IsObjectShareAdmin) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{42}
}

func (x *IsObjectShareAdmin) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *IsObjectShareAdmin) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *IsObjectShareAdmin) GetObjectType() CheckShareAdminObjectType {
	if x != nil {
		return x.ObjectType
	}
	return CheckShareAdminObjectType_CHECK_SA_INVALID_TYPE
}

type AmIShareAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsObjectShareAdmin []*IsObjectShareAdmin `protobuf:"bytes,1,rep,name=isObjectShareAdmin,proto3" json:"isObjectShareAdmin,omitempty"`
}

func (x *AmIShareAdmin) Reset() {
	*x = AmIShareAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmIShareAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmIShareAdmin) ProtoMessage() {}

func (x *AmIShareAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmIShareAdmin.ProtoReflect.Descriptor instead.
func (*AmIShareAdmin) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{43}
}

func (x *AmIShareAdmin) GetIsObjectShareAdmin() []*IsObjectShareAdmin {
	if x != nil {
		return x.IsObjectShareAdmin
	}
	return nil
}

type RecordShareUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddSharedRecord    []*SharedRecord `protobuf:"bytes,1,rep,name=addSharedRecord,proto3" json:"addSharedRecord,omitempty"`
	UpdateSharedRecord []*SharedRecord `protobuf:"bytes,2,rep,name=updateSharedRecord,proto3" json:"updateSharedRecord,omitempty"`
	RemoveSharedRecord []*SharedRecord `protobuf:"bytes,3,rep,name=removeSharedRecord,proto3" json:"removeSharedRecord,omitempty"`
	Pt                 string          `protobuf:"bytes,4,opt,name=pt,proto3" json:"pt,omitempty"`
}

func (x *RecordShareUpdateRequest) Reset() {
	*x = RecordShareUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordShareUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordShareUpdateRequest) ProtoMessage() {}

func (x *RecordShareUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordShareUpdateRequest.ProtoReflect.Descriptor instead.
func (*RecordShareUpdateRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{44}
}

func (x *RecordShareUpdateRequest) GetAddSharedRecord() []*SharedRecord {
	if x != nil {
		return x.AddSharedRecord
	}
	return nil
}

func (x *RecordShareUpdateRequest) GetUpdateSharedRecord() []*SharedRecord {
	if x != nil {
		return x.UpdateSharedRecord
	}
	return nil
}

func (x *RecordShareUpdateRequest) GetRemoveSharedRecord() []*SharedRecord {
	if x != nil {
		return x.RemoveSharedRecord
	}
	return nil
}

func (x *RecordShareUpdateRequest) GetPt() string {
	if x != nil {
		return x.Pt
	}
	return ""
}

type SharedRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToUsername      string `protobuf:"bytes,1,opt,name=toUsername,proto3" json:"toUsername,omitempty"`
	RecordUid       []byte `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	RecordKey       []byte `protobuf:"bytes,3,opt,name=recordKey,proto3" json:"recordKey,omitempty"`
	SharedFolderUid []byte `protobuf:"bytes,4,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
	TeamUid         []byte `protobuf:"bytes,5,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
	Editable        bool   `protobuf:"varint,6,opt,name=editable,proto3" json:"editable,omitempty"`
	Shareable       bool   `protobuf:"varint,7,opt,name=shareable,proto3" json:"shareable,omitempty"`
	Transfer        bool   `protobuf:"varint,8,opt,name=transfer,proto3" json:"transfer,omitempty"`
	UseEccKey       bool   `protobuf:"varint,9,opt,name=useEccKey,proto3" json:"useEccKey,omitempty"`
	RemoveVaultData bool   `protobuf:"varint,10,opt,name=removeVaultData,proto3" json:"removeVaultData,omitempty"`
	Expiration      int64  `protobuf:"varint,11,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *SharedRecord) Reset() {
	*x = SharedRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedRecord) ProtoMessage() {}

func (x *SharedRecord) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedRecord.ProtoReflect.Descriptor instead.
func (*SharedRecord) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{45}
}

func (x *SharedRecord) GetToUsername() string {
	if x != nil {
		return x.ToUsername
	}
	return ""
}

func (x *SharedRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *SharedRecord) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *SharedRecord) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

func (x *SharedRecord) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

func (x *SharedRecord) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *SharedRecord) GetShareable() bool {
	if x != nil {
		return x.Shareable
	}
	return false
}

func (x *SharedRecord) GetTransfer() bool {
	if x != nil {
		return x.Transfer
	}
	return false
}

func (x *SharedRecord) GetUseEccKey() bool {
	if x != nil {
		return x.UseEccKey
	}
	return false
}

func (x *SharedRecord) GetRemoveVaultData() bool {
	if x != nil {
		return x.RemoveVaultData
	}
	return false
}

func (x *SharedRecord) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

type RecordShareUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddSharedRecordStatus    []*SharedRecordStatus `protobuf:"bytes,1,rep,name=addSharedRecordStatus,proto3" json:"addSharedRecordStatus,omitempty"`
	UpdateSharedRecordStatus []*SharedRecordStatus `protobuf:"bytes,2,rep,name=updateSharedRecordStatus,proto3" json:"updateSharedRecordStatus,omitempty"`
	RemoveSharedRecordStatus []*SharedRecordStatus `protobuf:"bytes,3,rep,name=removeSharedRecordStatus,proto3" json:"removeSharedRecordStatus,omitempty"`
}

func (x *RecordShareUpdateResponse) Reset() {
	*x = RecordShareUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordShareUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordShareUpdateResponse) ProtoMessage() {}

func (x *RecordShareUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordShareUpdateResponse.ProtoReflect.Descriptor instead.
func (*RecordShareUpdateResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{46}
}

func (x *RecordShareUpdateResponse) GetAddSharedRecordStatus() []*SharedRecordStatus {
	if x != nil {
		return x.AddSharedRecordStatus
	}
	return nil
}

func (x *RecordShareUpdateResponse) GetUpdateSharedRecordStatus() []*SharedRecordStatus {
	if x != nil {
		return x.UpdateSharedRecordStatus
	}
	return nil
}

func (x *RecordShareUpdateResponse) GetRemoveSharedRecordStatus() []*SharedRecordStatus {
	if x != nil {
		return x.RemoveSharedRecordStatus
	}
	return nil
}

type SharedRecordStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // success, pending_accept, user_not_found, already_shared, not_allowed_to_share, access_denied, not_allowed_to_set_permission
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Username  string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SharedRecordStatus) Reset() {
	*x = SharedRecordStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedRecordStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedRecordStatus) ProtoMessage() {}

func (x *SharedRecordStatus) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedRecordStatus.ProtoReflect.Descriptor instead.
func (*SharedRecordStatus) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{47}
}

func (x *SharedRecordStatus) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *SharedRecordStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SharedRecordStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SharedRecordStatus) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetRecordPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUids   [][]byte `protobuf:"bytes,1,rep,name=recordUids,proto3" json:"recordUids,omitempty"`
	IsShareAdmin bool     `protobuf:"varint,2,opt,name=isShareAdmin,proto3" json:"isShareAdmin,omitempty"`
}

func (x *GetRecordPermissionsRequest) Reset() {
	*x = GetRecordPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordPermissionsRequest) ProtoMessage() {}

func (x *GetRecordPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetRecordPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{48}
}

func (x *GetRecordPermissionsRequest) GetRecordUids() [][]byte {
	if x != nil {
		return x.RecordUids
	}
	return nil
}

func (x *GetRecordPermissionsRequest) GetIsShareAdmin() bool {
	if x != nil {
		return x.IsShareAdmin
	}
	return false
}

type GetRecordPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordPermissions []*RecordPermission `protobuf:"bytes,1,rep,name=recordPermissions,proto3" json:"recordPermissions,omitempty"`
}

func (x *GetRecordPermissionsResponse) Reset() {
	*x = GetRecordPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordPermissionsResponse) ProtoMessage() {}

func (x *GetRecordPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetRecordPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{49}
}

func (x *GetRecordPermissionsResponse) GetRecordPermissions() []*RecordPermission {
	if x != nil {
		return x.RecordPermissions
	}
	return nil
}

type RecordPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid   []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Owner       bool   `protobuf:"varint,2,opt,name=owner,proto3" json:"owner,omitempty"`
	CanEdit     bool   `protobuf:"varint,3,opt,name=canEdit,proto3" json:"canEdit,omitempty"`
	CanShare    bool   `protobuf:"varint,4,opt,name=canShare,proto3" json:"canShare,omitempty"`
	CanTransfer bool   `protobuf:"varint,5,opt,name=canTransfer,proto3" json:"canTransfer,omitempty"`
}

func (x *RecordPermission) Reset() {
	*x = RecordPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPermission) ProtoMessage() {}

func (x *RecordPermission) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPermission.ProtoReflect.Descriptor instead.
func (*RecordPermission) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{50}
}

func (x *RecordPermission) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordPermission) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *RecordPermission) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *RecordPermission) GetCanShare() bool {
	if x != nil {
		return x.CanShare
	}
	return false
}

func (x *RecordPermission) GetCanTransfer() bool {
	if x != nil {
		return x.CanTransfer
	}
	return false
}

type GetShareObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartWith       string `protobuf:"bytes,1,opt,name=startWith,proto3" json:"startWith,omitempty"`             //return share objects that start with this value
	Contains        string `protobuf:"bytes,2,opt,name=contains,proto3" json:"contains,omitempty"`               //return share objects that contains this value
	Filtered        bool   `protobuf:"varint,3,opt,name=filtered,proto3" json:"filtered,omitempty"`              //users with status != ACTIVE will not be returned if true - used for autoshare, false - used for manage share relationships
	SharedFolderUid []byte `protobuf:"bytes,4,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"` //the shared folder uid
}

func (x *GetShareObjectsRequest) Reset() {
	*x = GetShareObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareObjectsRequest) ProtoMessage() {}

func (x *GetShareObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareObjectsRequest.ProtoReflect.Descriptor instead.
func (*GetShareObjectsRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{51}
}

func (x *GetShareObjectsRequest) GetStartWith() string {
	if x != nil {
		return x.StartWith
	}
	return ""
}

func (x *GetShareObjectsRequest) GetContains() string {
	if x != nil {
		return x.Contains
	}
	return ""
}

func (x *GetShareObjectsRequest) GetFiltered() bool {
	if x != nil {
		return x.Filtered
	}
	return false
}

func (x *GetShareObjectsRequest) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

type GetShareObjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareRelationships     []*ShareUser       `protobuf:"bytes,1,rep,name=shareRelationships,proto3" json:"shareRelationships,omitempty"`         //for user sharing relationships
	ShareFamilyUsers       []*ShareUser       `protobuf:"bytes,2,rep,name=shareFamilyUsers,proto3" json:"shareFamilyUsers,omitempty"`             //for family
	ShareEnterpriseUsers   []*ShareUser       `protobuf:"bytes,3,rep,name=shareEnterpriseUsers,proto3" json:"shareEnterpriseUsers,omitempty"`     //for visible users of enterprise
	ShareTeams             []*ShareTeam       `protobuf:"bytes,4,rep,name=shareTeams,proto3" json:"shareTeams,omitempty"`                         //for visible teams of enterprise
	ShareMCTeams           []*ShareTeam       `protobuf:"bytes,5,rep,name=shareMCTeams,proto3" json:"shareMCTeams,omitempty"`                     //only for mc admins, teams associated with the MC
	ShareMCEnterpriseUsers []*ShareUser       `protobuf:"bytes,6,rep,name=shareMCEnterpriseUsers,proto3" json:"shareMCEnterpriseUsers,omitempty"` //only for mc admins
	ShareEnterpriseNames   []*ShareEnterprise `protobuf:"bytes,7,rep,name=shareEnterpriseNames,proto3" json:"shareEnterpriseNames,omitempty"`     //to send the names of enterprises in which the users are members of
}

func (x *GetShareObjectsResponse) Reset() {
	*x = GetShareObjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareObjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareObjectsResponse) ProtoMessage() {}

func (x *GetShareObjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareObjectsResponse.ProtoReflect.Descriptor instead.
func (*GetShareObjectsResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{52}
}

func (x *GetShareObjectsResponse) GetShareRelationships() []*ShareUser {
	if x != nil {
		return x.ShareRelationships
	}
	return nil
}

func (x *GetShareObjectsResponse) GetShareFamilyUsers() []*ShareUser {
	if x != nil {
		return x.ShareFamilyUsers
	}
	return nil
}

func (x *GetShareObjectsResponse) GetShareEnterpriseUsers() []*ShareUser {
	if x != nil {
		return x.ShareEnterpriseUsers
	}
	return nil
}

func (x *GetShareObjectsResponse) GetShareTeams() []*ShareTeam {
	if x != nil {
		return x.ShareTeams
	}
	return nil
}

func (x *GetShareObjectsResponse) GetShareMCTeams() []*ShareTeam {
	if x != nil {
		return x.ShareMCTeams
	}
	return nil
}

func (x *GetShareObjectsResponse) GetShareMCEnterpriseUsers() []*ShareUser {
	if x != nil {
		return x.ShareMCEnterpriseUsers
	}
	return nil
}

func (x *GetShareObjectsResponse) GetShareEnterpriseNames() []*ShareEnterprise {
	if x != nil {
		return x.ShareEnterpriseNames
	}
	return nil
}

type ShareUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username                   string      `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Fullname                   string      `protobuf:"bytes,2,opt,name=fullname,proto3" json:"fullname,omitempty"`
	EnterpriseId               int32       `protobuf:"varint,3,opt,name=enterpriseId,proto3" json:"enterpriseId,omitempty"` // only for enterprise user
	Status                     ShareStatus `protobuf:"varint,4,opt,name=status,proto3,enum=Records.ShareStatus" json:"status,omitempty"`
	IsShareAdmin               bool        `protobuf:"varint,5,opt,name=isShareAdmin,proto3" json:"isShareAdmin,omitempty"`                             // only for enterprise user
	IsAdminOfSharedFolderOwner bool        `protobuf:"varint,6,opt,name=isAdminOfSharedFolderOwner,proto3" json:"isAdminOfSharedFolderOwner,omitempty"` // only used for enterprise user
}

func (x *ShareUser) Reset() {
	*x = ShareUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareUser) ProtoMessage() {}

func (x *ShareUser) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareUser.ProtoReflect.Descriptor instead.
func (*ShareUser) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{53}
}

func (x *ShareUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ShareUser) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *ShareUser) GetEnterpriseId() int32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *ShareUser) GetStatus() ShareStatus {
	if x != nil {
		return x.Status
	}
	return ShareStatus_ACTIVE
}

func (x *ShareUser) GetIsShareAdmin() bool {
	if x != nil {
		return x.IsShareAdmin
	}
	return false
}

func (x *ShareUser) GetIsAdminOfSharedFolderOwner() bool {
	if x != nil {
		return x.IsAdminOfSharedFolderOwner
	}
	return false
}

type ShareTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamname     string `protobuf:"bytes,1,opt,name=teamname,proto3" json:"teamname,omitempty"`
	EnterpriseId int32  `protobuf:"varint,2,opt,name=enterpriseId,proto3" json:"enterpriseId,omitempty"`
	TeamUid      []byte `protobuf:"bytes,3,opt,name=teamUid,proto3" json:"teamUid,omitempty"`
}

func (x *ShareTeam) Reset() {
	*x = ShareTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareTeam) ProtoMessage() {}

func (x *ShareTeam) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareTeam.ProtoReflect.Descriptor instead.
func (*ShareTeam) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{54}
}

func (x *ShareTeam) GetTeamname() string {
	if x != nil {
		return x.Teamname
	}
	return ""
}

func (x *ShareTeam) GetEnterpriseId() int32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *ShareTeam) GetTeamUid() []byte {
	if x != nil {
		return x.TeamUid
	}
	return nil
}

type ShareEnterprise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enterprisename string `protobuf:"bytes,1,opt,name=enterprisename,proto3" json:"enterprisename,omitempty"`
	EnterpriseId   int32  `protobuf:"varint,2,opt,name=enterpriseId,proto3" json:"enterpriseId,omitempty"`
}

func (x *ShareEnterprise) Reset() {
	*x = ShareEnterprise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareEnterprise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareEnterprise) ProtoMessage() {}

func (x *ShareEnterprise) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareEnterprise.ProtoReflect.Descriptor instead.
func (*ShareEnterprise) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{55}
}

func (x *ShareEnterprise) GetEnterprisename() string {
	if x != nil {
		return x.Enterprisename
	}
	return ""
}

func (x *ShareEnterprise) GetEnterpriseId() int32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

type RecordsOnwershipTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferRecords []*TransferRecord `protobuf:"bytes,1,rep,name=transferRecords,proto3" json:"transferRecords,omitempty"`
}

func (x *RecordsOnwershipTransferRequest) Reset() {
	*x = RecordsOnwershipTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsOnwershipTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsOnwershipTransferRequest) ProtoMessage() {}

func (x *RecordsOnwershipTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsOnwershipTransferRequest.ProtoReflect.Descriptor instead.
func (*RecordsOnwershipTransferRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{56}
}

func (x *RecordsOnwershipTransferRequest) GetTransferRecords() []*TransferRecord {
	if x != nil {
		return x.TransferRecords
	}
	return nil
}

type TransferRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	RecordUid []byte `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	RecordKey []byte `protobuf:"bytes,3,opt,name=recordKey,proto3" json:"recordKey,omitempty"`
	UseEccKey bool   `protobuf:"varint,4,opt,name=useEccKey,proto3" json:"useEccKey,omitempty"`
}

func (x *TransferRecord) Reset() {
	*x = TransferRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRecord) ProtoMessage() {}

func (x *TransferRecord) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRecord.ProtoReflect.Descriptor instead.
func (*TransferRecord) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{57}
}

func (x *TransferRecord) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TransferRecord) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *TransferRecord) GetRecordKey() []byte {
	if x != nil {
		return x.RecordKey
	}
	return nil
}

func (x *TransferRecord) GetUseEccKey() bool {
	if x != nil {
		return x.UseEccKey
	}
	return false
}

type RecordsOnwershipTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferRecordStatus []*TransferRecordStatus `protobuf:"bytes,1,rep,name=transferRecordStatus,proto3" json:"transferRecordStatus,omitempty"`
}

func (x *RecordsOnwershipTransferResponse) Reset() {
	*x = RecordsOnwershipTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsOnwershipTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsOnwershipTransferResponse) ProtoMessage() {}

func (x *RecordsOnwershipTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsOnwershipTransferResponse.ProtoReflect.Descriptor instead.
func (*RecordsOnwershipTransferResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{58}
}

func (x *RecordsOnwershipTransferResponse) GetTransferRecordStatus() []*TransferRecordStatus {
	if x != nil {
		return x.TransferRecordStatus
	}
	return nil
}

type TransferRecordStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	RecordUid []byte `protobuf:"bytes,2,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Message   string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TransferRecordStatus) Reset() {
	*x = TransferRecordStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRecordStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRecordStatus) ProtoMessage() {}

func (x *TransferRecordStatus) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRecordStatus.ProtoReflect.Descriptor instead.
func (*TransferRecordStatus) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{59}
}

func (x *TransferRecordStatus) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TransferRecordStatus) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *TransferRecordStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransferRecordStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RecordsUnshareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolders []*RecordsUnshareFolder `protobuf:"bytes,1,rep,name=sharedFolders,proto3" json:"sharedFolders,omitempty"`
	Users         []*RecordsUnshareUser   `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *RecordsUnshareRequest) Reset() {
	*x = RecordsUnshareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsUnshareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsUnshareRequest) ProtoMessage() {}

func (x *RecordsUnshareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsUnshareRequest.ProtoReflect.Descriptor instead.
func (*RecordsUnshareRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{60}
}

func (x *RecordsUnshareRequest) GetSharedFolders() []*RecordsUnshareFolder {
	if x != nil {
		return x.SharedFolders
	}
	return nil
}

func (x *RecordsUnshareRequest) GetUsers() []*RecordsUnshareUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type RecordsUnshareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFolders []*RecordsUnshareFolderStatus `protobuf:"bytes,1,rep,name=sharedFolders,proto3" json:"sharedFolders,omitempty"`
	Users         []*RecordsUnshareUserStatus   `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *RecordsUnshareResponse) Reset() {
	*x = RecordsUnshareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsUnshareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsUnshareResponse) ProtoMessage() {}

func (x *RecordsUnshareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsUnshareResponse.ProtoReflect.Descriptor instead.
func (*RecordsUnshareResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{61}
}

func (x *RecordsUnshareResponse) GetSharedFolders() []*RecordsUnshareFolderStatus {
	if x != nil {
		return x.SharedFolders
	}
	return nil
}

func (x *RecordsUnshareResponse) GetUsers() []*RecordsUnshareUserStatus {
	if x != nil {
		return x.Users
	}
	return nil
}

type RecordsUnshareFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid       []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	SharedFolderUid []byte `protobuf:"bytes,2,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
}

func (x *RecordsUnshareFolder) Reset() {
	*x = RecordsUnshareFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsUnshareFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsUnshareFolder) ProtoMessage() {}

func (x *RecordsUnshareFolder) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsUnshareFolder.ProtoReflect.Descriptor instead.
func (*RecordsUnshareFolder) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{62}
}

func (x *RecordsUnshareFolder) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordsUnshareFolder) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

type RecordsUnshareUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid  []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	AccountUid []byte `protobuf:"bytes,2,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
}

func (x *RecordsUnshareUser) Reset() {
	*x = RecordsUnshareUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsUnshareUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsUnshareUser) ProtoMessage() {}

func (x *RecordsUnshareUser) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsUnshareUser.ProtoReflect.Descriptor instead.
func (*RecordsUnshareUser) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{63}
}

func (x *RecordsUnshareUser) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordsUnshareUser) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

type RecordsUnshareFolderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid       []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	SharedFolderUid []byte `protobuf:"bytes,2,opt,name=sharedFolderUid,proto3" json:"sharedFolderUid,omitempty"`
}

func (x *RecordsUnshareFolderStatus) Reset() {
	*x = RecordsUnshareFolderStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsUnshareFolderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsUnshareFolderStatus) ProtoMessage() {}

func (x *RecordsUnshareFolderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsUnshareFolderStatus.ProtoReflect.Descriptor instead.
func (*RecordsUnshareFolderStatus) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{64}
}

func (x *RecordsUnshareFolderStatus) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordsUnshareFolderStatus) GetSharedFolderUid() []byte {
	if x != nil {
		return x.SharedFolderUid
	}
	return nil
}

type RecordsUnshareUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordUid  []byte `protobuf:"bytes,1,opt,name=recordUid,proto3" json:"recordUid,omitempty"`
	AccountUid []byte `protobuf:"bytes,2,opt,name=accountUid,proto3" json:"accountUid,omitempty"`
}

func (x *RecordsUnshareUserStatus) Reset() {
	*x = RecordsUnshareUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordsUnshareUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsUnshareUserStatus) ProtoMessage() {}

func (x *RecordsUnshareUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsUnshareUserStatus.ProtoReflect.Descriptor instead.
func (*RecordsUnshareUserStatus) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{65}
}

func (x *RecordsUnshareUserStatus) GetRecordUid() []byte {
	if x != nil {
		return x.RecordUid
	}
	return nil
}

func (x *RecordsUnshareUserStatus) GetAccountUid() []byte {
	if x != nil {
		return x.AccountUid
	}
	return nil
}

var File_record_proto protoreflect.FileDescriptor

var file_record_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x7a, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x61, 0x6d, 0x22, 0xe6, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0x58, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x55,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x3e,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x6e, 0x0a, 0x0f, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x06,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x74,
	0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a,
	0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x65,
	0x61, 0x6d, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x07, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x4a,
	0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x03, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x64, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x22,
	0x62, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x64, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x41, 0x64, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x22, 0x68, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x4b, 0x65,
	0x79, 0x22, 0x66, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0xee, 0x02, 0x0a, 0x11, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x56, 0x33, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x72, 0x0a, 0x19, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x56, 0x33,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x54, 0x6f, 0x56, 0x33, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30,
	0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x5b, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a,
	0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x7f, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x6c, 0x69, 0x6e,
	0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x64, 0x64,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x64, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xaf, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x22, 0x57, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x0d,
	0x46, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x5c, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x9e, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f,
	0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x65,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x22, 0xda, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a,
	0x10, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x95, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x14,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22,
	0x86, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x04, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x6e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x22,
	0x87, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5d, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x57,
	0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x15, 0x6e, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x15, 0x6e, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a,
	0x0d, 0x41, 0x6d, 0x49, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x4b,
	0x0a, 0x12, 0x69, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x49, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x12, 0x69, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x45, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x74, 0x22, 0xec, 0x02, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x45, 0x63, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x45, 0x63, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x15, 0x61, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x57, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22,
	0x67, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x61, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x22, 0xeb, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x36, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x4d, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x4d, 0x43, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x16, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x4d, 0x43, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x14, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x3e,
	0x0a, 0x1a, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x65,
	0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x55, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4f,
	0x6e, 0x77, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x45, 0x63, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x45, 0x63, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0x75, 0x0a, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4f, 0x6e,
	0x77, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x55, 0x6e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x55,
	0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x55, 0x6e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x22, 0x5e, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x55, 0x6e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x22, 0x52, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x55, 0x6e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x55,
	0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x18, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x69, 0x64, 0x2a, 0x68, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x54, 0x5f, 0x50,
	0x41, 0x4d, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x54, 0x5f, 0x50, 0x41, 0x4d, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0xd1,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x47, 0x43,
	0x4d, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45,
	0x43, 0x43, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x42,
	0x43, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x47, 0x43, 0x4d,
	0x10, 0x06, 0x2a, 0x50, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x10, 0x02, 0x2a, 0xec, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x53, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x53,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04,
	0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x53, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05,
	0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x53, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x53, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x24, 0x0a,
	0x20, 0x52, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x53, 0x10, 0x0c, 0x2a, 0x2d, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x2a, 0x43, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x47, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x02, 0x2a, 0x62, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x41, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x46, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x15, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x54, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x54, 0x54, 0x5f, 0x52, 0x4f, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x42, 0x23, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x07, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_record_proto_rawDescOnce sync.Once
	file_record_proto_rawDescData = file_record_proto_rawDesc
)

func file_record_proto_rawDescGZIP() []byte {
	file_record_proto_rawDescOnce.Do(func() {
		file_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_proto_rawDescData)
	})
	return file_record_proto_rawDescData
}

var file_record_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_record_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_record_proto_goTypes = []interface{}{
	(RecordTypeScope)(0),                        // 0: Records.RecordTypeScope
	(RecordKeyType)(0),                          // 1: Records.RecordKeyType
	(RecordFolderType)(0),                       // 2: Records.RecordFolderType
	(RecordModifyResult)(0),                     // 3: Records.RecordModifyResult
	(FileAddResult)(0),                          // 4: Records.FileAddResult
	(FileGetResult)(0),                          // 5: Records.FileGetResult
	(RecordDetailsInclude)(0),                   // 6: Records.RecordDetailsInclude
	(CheckShareAdminObjectType)(0),              // 7: Records.CheckShareAdminObjectType
	(ShareStatus)(0),                            // 8: Records.ShareStatus
	(RecordTransactionType)(0),                  // 9: Records.RecordTransactionType
	(*RecordType)(nil),                          // 10: Records.RecordType
	(*RecordTypesRequest)(nil),                  // 11: Records.RecordTypesRequest
	(*RecordTypesResponse)(nil),                 // 12: Records.RecordTypesResponse
	(*RecordTypeModifyResponse)(nil),            // 13: Records.RecordTypeModifyResponse
	(*RecordsGetRequest)(nil),                   // 14: Records.RecordsGetRequest
	(*Record)(nil),                              // 15: Records.Record
	(*FolderRecordKey)(nil),                     // 16: Records.FolderRecordKey
	(*Folder)(nil),                              // 17: Records.Folder
	(*Team)(nil),                                // 18: Records.Team
	(*RecordsGetResponse)(nil),                  // 19: Records.RecordsGetResponse
	(*RecordLink)(nil),                          // 20: Records.RecordLink
	(*RecordAudit)(nil),                         // 21: Records.RecordAudit
	(*RecordAdd)(nil),                           // 22: Records.RecordAdd
	(*RecordsAddRequest)(nil),                   // 23: Records.RecordsAddRequest
	(*RecordUpdate)(nil),                        // 24: Records.RecordUpdate
	(*RecordsUpdateRequest)(nil),                // 25: Records.RecordsUpdateRequest
	(*RecordFileForConversion)(nil),             // 26: Records.RecordFileForConversion
	(*RecordFolderForConversion)(nil),           // 27: Records.RecordFolderForConversion
	(*RecordConvertToV3)(nil),                   // 28: Records.RecordConvertToV3
	(*RecordsConvertToV3Request)(nil),           // 29: Records.RecordsConvertToV3Request
	(*RecordsRemoveRequest)(nil),                // 30: Records.RecordsRemoveRequest
	(*RecordRevert)(nil),                        // 31: Records.RecordRevert
	(*RecordsRevertRequest)(nil),                // 32: Records.RecordsRevertRequest
	(*RecordLinkError)(nil),                     // 33: Records.RecordLinkError
	(*RecordModifyStatus)(nil),                  // 34: Records.RecordModifyStatus
	(*RecordsModifyResponse)(nil),               // 35: Records.RecordsModifyResponse
	(*RecordAddAuditData)(nil),                  // 36: Records.RecordAddAuditData
	(*AddAuditDataRequest)(nil),                 // 37: Records.AddAuditDataRequest
	(*File)(nil),                                // 38: Records.File
	(*FilesAddRequest)(nil),                     // 39: Records.FilesAddRequest
	(*FileAddStatus)(nil),                       // 40: Records.FileAddStatus
	(*FilesAddResponse)(nil),                    // 41: Records.FilesAddResponse
	(*FilesGetRequest)(nil),                     // 42: Records.FilesGetRequest
	(*FileGetStatus)(nil),                       // 43: Records.FileGetStatus
	(*FilesGetResponse)(nil),                    // 44: Records.FilesGetResponse
	(*ApplicationAddRequest)(nil),               // 45: Records.ApplicationAddRequest
	(*GetRecordDataWithAccessInfoRequest)(nil),  // 46: Records.GetRecordDataWithAccessInfoRequest
	(*UserPermission)(nil),                      // 47: Records.UserPermission
	(*SharedFolderPermission)(nil),              // 48: Records.SharedFolderPermission
	(*RecordData)(nil),                          // 49: Records.RecordData
	(*RecordDataWithAccessInfo)(nil),            // 50: Records.RecordDataWithAccessInfo
	(*GetRecordDataWithAccessInfoResponse)(nil), // 51: Records.GetRecordDataWithAccessInfoResponse
	(*IsObjectShareAdmin)(nil),                  // 52: Records.IsObjectShareAdmin
	(*AmIShareAdmin)(nil),                       // 53: Records.AmIShareAdmin
	(*RecordShareUpdateRequest)(nil),            // 54: Records.RecordShareUpdateRequest
	(*SharedRecord)(nil),                        // 55: Records.SharedRecord
	(*RecordShareUpdateResponse)(nil),           // 56: Records.RecordShareUpdateResponse
	(*SharedRecordStatus)(nil),                  // 57: Records.SharedRecordStatus
	(*GetRecordPermissionsRequest)(nil),         // 58: Records.GetRecordPermissionsRequest
	(*GetRecordPermissionsResponse)(nil),        // 59: Records.GetRecordPermissionsResponse
	(*RecordPermission)(nil),                    // 60: Records.RecordPermission
	(*GetShareObjectsRequest)(nil),              // 61: Records.GetShareObjectsRequest
	(*GetShareObjectsResponse)(nil),             // 62: Records.GetShareObjectsResponse
	(*ShareUser)(nil),                           // 63: Records.ShareUser
	(*ShareTeam)(nil),                           // 64: Records.ShareTeam
	(*ShareEnterprise)(nil),                     // 65: Records.ShareEnterprise
	(*RecordsOnwershipTransferRequest)(nil),     // 66: Records.RecordsOnwershipTransferRequest
	(*TransferRecord)(nil),                      // 67: Records.TransferRecord
	(*RecordsOnwershipTransferResponse)(nil),    // 68: Records.RecordsOnwershipTransferResponse
	(*TransferRecordStatus)(nil),                // 69: Records.TransferRecordStatus
	(*RecordsUnshareRequest)(nil),               // 70: Records.RecordsUnshareRequest
	(*RecordsUnshareResponse)(nil),              // 71: Records.RecordsUnshareResponse
	(*RecordsUnshareFolder)(nil),                // 72: Records.RecordsUnshareFolder
	(*RecordsUnshareUser)(nil),                  // 73: Records.RecordsUnshareUser
	(*RecordsUnshareFolderStatus)(nil),          // 74: Records.RecordsUnshareFolderStatus
	(*RecordsUnshareUserStatus)(nil),            // 75: Records.RecordsUnshareUserStatus
}
var file_record_proto_depIdxs = []int32{
	0,  // 0: Records.RecordType.scope:type_name -> Records.RecordTypeScope
	10, // 1: Records.RecordTypesResponse.recordTypes:type_name -> Records.RecordType
	1,  // 2: Records.Record.record_key_type:type_name -> Records.RecordKeyType
	1,  // 3: Records.Folder.folder_key_type:type_name -> Records.RecordKeyType
	1,  // 4: Records.Team.team_key_type:type_name -> Records.RecordKeyType
	17, // 5: Records.Team.folders:type_name -> Records.Folder
	15, // 6: Records.RecordsGetResponse.records:type_name -> Records.Record
	16, // 7: Records.RecordsGetResponse.folder_record_keys:type_name -> Records.FolderRecordKey
	17, // 8: Records.RecordsGetResponse.folders:type_name -> Records.Folder
	18, // 9: Records.RecordsGetResponse.teams:type_name -> Records.Team
	2,  // 10: Records.RecordAdd.folder_type:type_name -> Records.RecordFolderType
	20, // 11: Records.RecordAdd.record_links:type_name -> Records.RecordLink
	21, // 12: Records.RecordAdd.audit:type_name -> Records.RecordAudit
	22, // 13: Records.RecordsAddRequest.records:type_name -> Records.RecordAdd
	20, // 14: Records.RecordUpdate.record_links_add:type_name -> Records.RecordLink
	21, // 15: Records.RecordUpdate.audit:type_name -> Records.RecordAudit
	24, // 16: Records.RecordsUpdateRequest.records:type_name -> Records.RecordUpdate
	21, // 17: Records.RecordConvertToV3.audit:type_name -> Records.RecordAudit
	26, // 18: Records.RecordConvertToV3.record_file:type_name -> Records.RecordFileForConversion
	27, // 19: Records.RecordConvertToV3.folder_key:type_name -> Records.RecordFolderForConversion
	28, // 20: Records.RecordsConvertToV3Request.records:type_name -> Records.RecordConvertToV3
	31, // 21: Records.RecordsRevertRequest.records:type_name -> Records.RecordRevert
	3,  // 22: Records.RecordLinkError.status:type_name -> Records.RecordModifyResult
	3,  // 23: Records.RecordModifyStatus.status:type_name -> Records.RecordModifyResult
	33, // 24: Records.RecordModifyStatus.link_errors:type_name -> Records.RecordLinkError
	34, // 25: Records.RecordsModifyResponse.records:type_name -> Records.RecordModifyStatus
	36, // 26: Records.AddAuditDataRequest.records:type_name -> Records.RecordAddAuditData
	38, // 27: Records.FilesAddRequest.files:type_name -> Records.File
	4,  // 28: Records.FileAddStatus.status:type_name -> Records.FileAddResult
	40, // 29: Records.FilesAddResponse.files:type_name -> Records.FileAddStatus
	5,  // 30: Records.FileGetStatus.status:type_name -> Records.FileGetResult
	1,  // 31: Records.FileGetStatus.fileKeyType:type_name -> Records.RecordKeyType
	43, // 32: Records.FilesGetResponse.files:type_name -> Records.FileGetStatus
	6,  // 33: Records.GetRecordDataWithAccessInfoRequest.recordDetailsInclude:type_name -> Records.RecordDetailsInclude
	49, // 34: Records.RecordData.linkedRecordData:type_name -> Records.RecordData
	1,  // 35: Records.RecordData.recordKeyType:type_name -> Records.RecordKeyType
	49, // 36: Records.RecordDataWithAccessInfo.recordData:type_name -> Records.RecordData
	47, // 37: Records.RecordDataWithAccessInfo.userPermission:type_name -> Records.UserPermission
	48, // 38: Records.RecordDataWithAccessInfo.sharedFolderPermission:type_name -> Records.SharedFolderPermission
	50, // 39: Records.GetRecordDataWithAccessInfoResponse.recordDataWithAccessInfo:type_name -> Records.RecordDataWithAccessInfo
	7,  // 40: Records.IsObjectShareAdmin.objectType:type_name -> Records.CheckShareAdminObjectType
	52, // 41: Records.AmIShareAdmin.isObjectShareAdmin:type_name -> Records.IsObjectShareAdmin
	55, // 42: Records.RecordShareUpdateRequest.addSharedRecord:type_name -> Records.SharedRecord
	55, // 43: Records.RecordShareUpdateRequest.updateSharedRecord:type_name -> Records.SharedRecord
	55, // 44: Records.RecordShareUpdateRequest.removeSharedRecord:type_name -> Records.SharedRecord
	57, // 45: Records.RecordShareUpdateResponse.addSharedRecordStatus:type_name -> Records.SharedRecordStatus
	57, // 46: Records.RecordShareUpdateResponse.updateSharedRecordStatus:type_name -> Records.SharedRecordStatus
	57, // 47: Records.RecordShareUpdateResponse.removeSharedRecordStatus:type_name -> Records.SharedRecordStatus
	60, // 48: Records.GetRecordPermissionsResponse.recordPermissions:type_name -> Records.RecordPermission
	63, // 49: Records.GetShareObjectsResponse.shareRelationships:type_name -> Records.ShareUser
	63, // 50: Records.GetShareObjectsResponse.shareFamilyUsers:type_name -> Records.ShareUser
	63, // 51: Records.GetShareObjectsResponse.shareEnterpriseUsers:type_name -> Records.ShareUser
	64, // 52: Records.GetShareObjectsResponse.shareTeams:type_name -> Records.ShareTeam
	64, // 53: Records.GetShareObjectsResponse.shareMCTeams:type_name -> Records.ShareTeam
	63, // 54: Records.GetShareObjectsResponse.shareMCEnterpriseUsers:type_name -> Records.ShareUser
	65, // 55: Records.GetShareObjectsResponse.shareEnterpriseNames:type_name -> Records.ShareEnterprise
	8,  // 56: Records.ShareUser.status:type_name -> Records.ShareStatus
	67, // 57: Records.RecordsOnwershipTransferRequest.transferRecords:type_name -> Records.TransferRecord
	69, // 58: Records.RecordsOnwershipTransferResponse.transferRecordStatus:type_name -> Records.TransferRecordStatus
	72, // 59: Records.RecordsUnshareRequest.sharedFolders:type_name -> Records.RecordsUnshareFolder
	73, // 60: Records.RecordsUnshareRequest.users:type_name -> Records.RecordsUnshareUser
	74, // 61: Records.RecordsUnshareResponse.sharedFolders:type_name -> Records.RecordsUnshareFolderStatus
	75, // 62: Records.RecordsUnshareResponse.users:type_name -> Records.RecordsUnshareUserStatus
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_record_proto_init() }
func file_record_proto_init() {
	if File_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordTypeModifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderRecordKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Folder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordFileForConversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordFolderForConversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordConvertToV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsConvertToV3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordRevert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsRevertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordLinkError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordModifyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsModifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordAddAuditData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAuditDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAddStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileGetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordDataWithAccessInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedFolderPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataWithAccessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordDataWithAccessInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsObjectShareAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmIShareAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordShareUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordShareUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedRecordStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareObjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareEnterprise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsOnwershipTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsOnwershipTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRecordStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsUnshareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsUnshareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsUnshareFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsUnshareUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsUnshareFolderStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordsUnshareUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_record_proto_goTypes,
		DependencyIndexes: file_record_proto_depIdxs,
		EnumInfos:         file_record_proto_enumTypes,
		MessageInfos:      file_record_proto_msgTypes,
	}.Build()
	File_record_proto = out.File
	file_record_proto_rawDesc = nil
	file_record_proto_goTypes = nil
	file_record_proto_depIdxs = nil
}
